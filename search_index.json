[["index.html", "DNA methyltransferases 3A and 3B target specific sequences during mouse gastrulation 1 DNA methyltransferases 3A and 3B target specific sequences during mouse gastrulation 1.1 Run the notebooks 1.2 Download the UMI matrices 1.3 Notebook order", " DNA methyltransferases 3A and 3B target specific sequences during mouse gastrulation Aviezer Lifshitz 2022-08-01 1 DNA methyltransferases 3A and 3B target specific sequences during mouse gastrulation Following is the code that generates the figures for the methylation part of Mukamel et al.Â paper on DNA methyltransferases 3A and 3B activity during gastrulation. The code is splitted to jupyter notebooks that can be found at: https://github.com/tanaylab/Dnmt3ab_MEEB The RNA part can be found at that repository under the rna directory. 1.1 Run the notebooks Prior to any analysis, after cloning the repository, please download first the necessary data by running (in the root directory of the cloned repository): R -e &quot;source(&#39;scripts/download_data.R&#39;); download_full_data()&quot; 1.2 Download the UMI matrices The UMI matrices can be downloaded by running: R -e &quot;source(&#39;scripts/download_data.R&#39;); download_raw_umi_tables()&quot; 1.3 Notebook order Methylation-trends.ipynb Sequence-model.ipynb Sequence-model-validation.ipynb Strand-specific-models.ipynb Yagi_et_al.ipynb Single-cell-methylation.ipynb Day6-differential-methylation.ipynb QC-bulk-meth.ipynb QC-sc-meth.ipynb "],["methylation-trends-in-eb-days-0-6.html", "2 Methylation trends in EB days 0-6 2.1 Plot global EB trends 2.2 cluster methylation in days 5 and 6 with DKO", " 2 Methylation trends in EB days 0-6 2.0.1 initialize definitions suppressMessages(suppressWarnings(source(here::here(&quot;code/init.R&quot;)))) 2.0.2 Load data Load the data of methylation day 0-4: cpg_meth &lt;- calc_eb_day0_to_day4_cpg_meth(min_cov = 10, max_na = 5) m &lt;- intervs_to_mat(cpg_meth) dim(m) ## [1] 132052 24 colnames(m) ## [1] &quot;d0_3a&quot; &quot;d0S_3a&quot; &quot;d1_3a&quot; &quot;d2_3a&quot; &quot;d3_3a&quot; &quot;d4_3a&quot; &quot;d0_3b&quot; ## [8] &quot;d0S_3b&quot; &quot;d1_3b&quot; &quot;d2_3b&quot; &quot;d3_3b&quot; &quot;d4_3b&quot; &quot;d0_tko&quot; &quot;d0S_tko&quot; ## [15] &quot;d1_tko&quot; &quot;d2_tko&quot; &quot;d3_tko&quot; &quot;d4_tko&quot; &quot;d0_wt&quot; &quot;d0S_wt&quot; &quot;d1_wt&quot; ## [22] &quot;d2_wt&quot; &quot;d3_wt&quot; &quot;d4_wt&quot; 2.0.3 Cluster colnames(m) ## [1] &quot;d0_3a&quot; &quot;d0S_3a&quot; &quot;d1_3a&quot; &quot;d2_3a&quot; &quot;d3_3a&quot; &quot;d4_3a&quot; &quot;d0_3b&quot; ## [8] &quot;d0S_3b&quot; &quot;d1_3b&quot; &quot;d2_3b&quot; &quot;d3_3b&quot; &quot;d4_3b&quot; &quot;d0_tko&quot; &quot;d0S_tko&quot; ## [15] &quot;d1_tko&quot; &quot;d2_tko&quot; &quot;d3_tko&quot; &quot;d4_tko&quot; &quot;d0_wt&quot; &quot;d0S_wt&quot; &quot;d1_wt&quot; ## [22] &quot;d2_wt&quot; &quot;d3_wt&quot; &quot;d4_wt&quot; m_column_order &lt;- c( &quot;d0_3a&quot;, &quot;d1_3a&quot;, &quot;d2_3a&quot;, &quot;d3_3a&quot;, &quot;d4_3a&quot;, &quot;d0_3b&quot;, &quot;d1_3b&quot;, &quot;d2_3b&quot;, &quot;d3_3b&quot;, &quot;d4_3b&quot;, &quot;d0_wt&quot;, &quot;d1_wt&quot;, &quot;d2_wt&quot;, &quot;d3_wt&quot;, &quot;d4_wt&quot;, &quot;d0_tko&quot;, &quot;d1_tko&quot;, &quot;d2_tko&quot;, &quot;d3_tko&quot;, &quot;d4_tko&quot;, &quot;d0S_3a&quot;, &quot;d0S_3b&quot;, &quot;d0S_wt&quot;, &quot;d0S_tko&quot; ) m &lt;- m[, m_column_order] colnames(m) ## [1] &quot;d0_3a&quot; &quot;d1_3a&quot; &quot;d2_3a&quot; &quot;d3_3a&quot; &quot;d4_3a&quot; &quot;d0_3b&quot; &quot;d1_3b&quot; ## [8] &quot;d2_3b&quot; &quot;d3_3b&quot; &quot;d4_3b&quot; &quot;d0_wt&quot; &quot;d1_wt&quot; &quot;d2_wt&quot; &quot;d3_wt&quot; ## [15] &quot;d4_wt&quot; &quot;d0_tko&quot; &quot;d1_tko&quot; &quot;d2_tko&quot; &quot;d3_tko&quot; &quot;d4_tko&quot; &quot;d0S_3a&quot; ## [22] &quot;d0S_3b&quot; &quot;d0S_wt&quot; &quot;d0S_tko&quot; K &lt;- 60 km &lt;- tglkmeans::TGL_kmeans(m, K, id_column=FALSE, seed=19) %cache_rds% here(&quot;output/meth_capt_clust.rds&quot;) enframe(km$size[c(1, 9, 19, 24, 30, 32, 40, 44, 53, 60)]) ## # A tibble: 10 x 2 ## name value ## 1 1 1179 ## 2 9 5459 ## 3 19 2023 ## 4 24 1573 ## 5 30 1295 ## 6 32 2810 ## # ... with 4 more rows km_m_3a &lt;- rowSums(km$centers[,c(&quot;d1_3a&quot;,&quot;d2_3a&quot;,&quot;d3_3a&quot;,&quot;d4_3a&quot;)]) km_m_3b &lt;- rowSums(km$centers[,c(&quot;d1_3b&quot;,&quot;d2_3b&quot;,&quot;d3_3b&quot;,&quot;d4_3b&quot;)]) km_m_wt &lt;- rowSums(km$centers[,c(&quot;d1_wt&quot;,&quot;d2_wt&quot;,&quot;d3_wt&quot;,&quot;d4_wt&quot;)]) cent_dlt &lt;- km$centers[,c(&quot;d1_3a&quot;,&quot;d2_3a&quot;,&quot;d3_3a&quot;,&quot;d4_3a&quot;)]- km$centers[,c(&quot;d1_3b&quot;,&quot;d2_3b&quot;,&quot;d3_3b&quot;,&quot;d4_3b&quot;)] dlt24 &lt;- cent_dlt[,2]-cent_dlt[,4] clst_mod &lt;- rep(0, K) clst_mod[(km_m_3a-km_m_3b) &lt; -0.3 &amp; dlt24 &gt; -0.05] &lt;- 3 clst_mod[(km_m_3a-km_m_3b) &lt; -0.2 &amp; dlt24 &lt; -0.05] &lt;- 2 clst_mod[(km_m_3a-km_m_3b) &gt; 0.2] &lt;- 1 smooth_n = floor(nrow(m)/1000)+1 km_mean_e = rowSums(km$centers) tot_cent_dlt = rowSums(cent_dlt) k_ord = order(ifelse(clst_mod==0, km_mean_e, abs(tot_cent_dlt)) + clst_mod*20) clst_map &lt;- 1:K names(clst_map) &lt;- as.character(k_ord) clst &lt;- km$cluster clst_sorted &lt;- clst_map[as.character(clst)] km$cluster &lt;- clst_sorted km$centers &lt;- km$centers[k_ord,] rownames(km$centers) &lt;- 1:K m_ord &lt;- order(km$cluster) m_s5 = apply(m[m_ord,-1],2, zoo::rollmean, smooth_n, fill=c(&#39;extend&#39;,NA,&#39;extend&#39;), na.rm=T) colnames(m_s5) = colnames(m)[-1] dim(m_s5) ## [1] 132052 23 options(repr.plot.width = 8, repr.plot.height = 20) plot_clust &lt;- function() { shades &lt;- colorRampPalette(c(&quot;white&quot;, &quot;#635547&quot;, &quot;#DABE99&quot;,&quot;#C594BF&quot;,&quot;#B51D8D&quot;,&quot;darkred&quot;, &quot;yellow&quot;))(1000) image(t(as.matrix(m_s5)),col=shades, xaxt=&#39;n&#39;, yaxt=&#39;n&#39;); N = length(m_ord) m_y = tapply((1:N)/N, km$cluster[m_ord], mean) mtext(1:K, at = m_y, las=2, side= 2) mtext(1:K, at = m_y, las=2, side= 4) abline(h=tapply((1:N)/N, km$cluster[m_ord], max)) } plot_clust() options(repr.plot.width = 3, repr.plot.height = 10) plot_delta &lt;- function(){ delta = m_s5[,c(&quot;d1_3a&quot;,&quot;d2_3a&quot;,&quot;d3_3a&quot;,&quot;d4_3a&quot;)]- m_s5[,c(&quot;d1_3b&quot;,&quot;d2_3b&quot;,&quot;d3_3b&quot;,&quot;d4_3b&quot;)] dshades &lt;- colorRampPalette(c(&quot;red&quot;,&quot;darkred&quot;,&quot;white&quot;,&quot;darkblue&quot;,&quot;blue&quot;))(1000) image(pmin(pmax(t(as.matrix(delta)),-0.3),0.3),col=dshades,zlim=c(-0.3,0.3)) } plot_delta() 2.0.4 Project DNMT1 data clust_intervs &lt;- m %&gt;% mat_to_intervs() %&gt;% select(chrom:end) all_clust_data &lt;- calc_eb_cpg_meth(from = 0, to = 5, min_cov = 10, max_na = NULL, intervals = clust_intervs, iterator = clust_intervs, cache_fn = here(&quot;output/all_clust_data.tsv&quot;), rm_meth_cov = TRUE) colnames(all_clust_data) ## [1] &quot;chrom&quot; &quot;start&quot; &quot;end&quot; &quot;d0_d13ako&quot; &quot;d3_d13ako&quot; &quot;d4_d13ako&quot; ## [7] &quot;d0_d13bko&quot; &quot;d3_d13bko&quot; &quot;d4_d13bko&quot; &quot;d5_dko&quot; &quot;d0_ko1&quot; &quot;d0S_ko1&quot; ## [13] &quot;d1_ko1&quot; &quot;d2_ko1&quot; &quot;d3_ko1&quot; &quot;d4_ko1&quot; &quot;d5_ko1&quot; &quot;d0_3a&quot; ## [19] &quot;d0S_3a&quot; &quot;d1_3a&quot; &quot;d2_3a&quot; &quot;d3_3a&quot; &quot;d4_3a&quot; &quot;d5_3a&quot; ## [25] &quot;d0_3b&quot; &quot;d0S_3b&quot; &quot;d1_3b&quot; &quot;d2_3b&quot; &quot;d3_3b&quot; &quot;d4_3b&quot; ## [31] &quot;d5_3b&quot; &quot;d0_tko&quot; &quot;d0S_tko&quot; &quot;d1_tko&quot; &quot;d2_tko&quot; &quot;d3_tko&quot; ## [37] &quot;d4_tko&quot; &quot;d0_wt&quot; &quot;d0S_wt&quot; &quot;d1_wt&quot; &quot;d2_wt&quot; &quot;d3_wt&quot; ## [43] &quot;d4_wt&quot; &quot;d5_wt&quot; m_column_order &lt;- c( &quot;d0_3a&quot;, &quot;d1_3a&quot;, &quot;d2_3a&quot;, &quot;d3_3a&quot;, &quot;d4_3a&quot;, &quot;d0_3b&quot;, &quot;d1_3b&quot;, &quot;d2_3b&quot;, &quot;d3_3b&quot;, &quot;d4_3b&quot;, &quot;d0_wt&quot;, &quot;d1_wt&quot;, &quot;d2_wt&quot;, &quot;d3_wt&quot;, &quot;d4_wt&quot;, &quot;d0_tko&quot;, &quot;d1_tko&quot;, &quot;d2_tko&quot;, &quot;d3_tko&quot;, &quot;d4_tko&quot;, &quot;d0S_3a&quot;, &quot;d0S_3b&quot;, &quot;d0S_wt&quot;, &quot;d0S_tko&quot;, &quot;d0S_ko1&quot;, &quot;d0_ko1&quot;, &quot;d1_ko1&quot;, &quot;d2_ko1&quot;, &quot;d3_ko1&quot;, &quot;d4_ko1&quot;, &quot;d0_d13ako&quot;, &quot;d3_d13ako&quot;, &quot;d4_d13ako&quot;, &quot;d0_d13bko&quot;, &quot;d3_d13bko&quot;, &quot;d4_d13bko&quot; ) setdiff(colnames(all_clust_data)[-1:-3], m_column_order) ## [1] &quot;d5_dko&quot; &quot;d5_ko1&quot; &quot;d5_3a&quot; &quot;d5_3b&quot; &quot;d5_wt&quot; m_all &lt;- intervs_to_mat(all_clust_data)[, m_column_order] colnames(m_all) ## [1] &quot;d0_3a&quot; &quot;d1_3a&quot; &quot;d2_3a&quot; &quot;d3_3a&quot; &quot;d4_3a&quot; &quot;d0_3b&quot; ## [7] &quot;d1_3b&quot; &quot;d2_3b&quot; &quot;d3_3b&quot; &quot;d4_3b&quot; &quot;d0_wt&quot; &quot;d1_wt&quot; ## [13] &quot;d2_wt&quot; &quot;d3_wt&quot; &quot;d4_wt&quot; &quot;d0_tko&quot; &quot;d1_tko&quot; &quot;d2_tko&quot; ## [19] &quot;d3_tko&quot; &quot;d4_tko&quot; &quot;d0S_3a&quot; &quot;d0S_3b&quot; &quot;d0S_wt&quot; &quot;d0S_tko&quot; ## [25] &quot;d0S_ko1&quot; &quot;d0_ko1&quot; &quot;d1_ko1&quot; &quot;d2_ko1&quot; &quot;d3_ko1&quot; &quot;d4_ko1&quot; ## [31] &quot;d0_d13ako&quot; &quot;d3_d13ako&quot; &quot;d4_d13ako&quot; &quot;d0_d13bko&quot; &quot;d3_d13bko&quot; &quot;d4_d13bko&quot; m_all_s5 = apply(m_all[m_ord, ],2, zoo::rollmean, smooth_n, fill=c(&#39;extend&#39;,NA,&#39;extend&#39;), na.rm=T) head(m_all_s5) ## d0_3a d1_3a d2_3a d3_3a d4_3a d0_3b ## [1,] 0.01001037 0.01079793 0.004898041 0.01102023 0.01277668 0.005717633 ## [2,] 0.01001037 0.01079793 0.004898041 0.01102023 0.01277668 0.005717633 ## [3,] 0.01001037 0.01079793 0.004898041 0.01102023 0.01277668 0.005717633 ## [4,] 0.01001037 0.01079793 0.004898041 0.01102023 0.01277668 0.005717633 ## [5,] 0.01001037 0.01079793 0.004898041 0.01102023 0.01277668 0.005717633 ## [6,] 0.01001037 0.01079793 0.004898041 0.01102023 0.01277668 0.005717633 ## d1_3b d2_3b d3_3b d4_3b d0_wt d1_wt ## [1,] 0.007146658 0.008921023 0.01298582 0.01649393 0.006180905 0.006556652 ## [2,] 0.007146658 0.008921023 0.01298582 0.01649393 0.006180905 0.006556652 ## [3,] 0.007146658 0.008921023 0.01298582 0.01649393 0.006180905 0.006556652 ## [4,] 0.007146658 0.008921023 0.01298582 0.01649393 0.006180905 0.006556652 ## [5,] 0.007146658 0.008921023 0.01298582 0.01649393 0.006180905 0.006556652 ## [6,] 0.007146658 0.008921023 0.01298582 0.01649393 0.006180905 0.006556652 ## d2_wt d3_wt d4_wt d0_tko d1_tko d2_tko ## [1,] 0.01132803 0.01854894 0.02603882 0.005965149 0.004823037 0.004019872 ## [2,] 0.01132803 0.01854894 0.02603882 0.005965149 0.004823037 0.004019872 ## [3,] 0.01132803 0.01854894 0.02603882 0.005965149 0.004823037 0.004019872 ## [4,] 0.01132803 0.01854894 0.02603882 0.005965149 0.004823037 0.004019872 ## [5,] 0.01132803 0.01854894 0.02603882 0.005965149 0.004823037 0.004019872 ## [6,] 0.01132803 0.01854894 0.02603882 0.005965149 0.004823037 0.004019872 ## d3_tko d4_tko d0S_3a d0S_3b d0S_wt d0S_tko ## [1,] 0.005696785 0.006240729 0.01627394 0.01726621 0.02124627 0.007268556 ## [2,] 0.005696785 0.006240729 0.01627394 0.01726621 0.02124627 0.007268556 ## [3,] 0.005696785 0.006240729 0.01627394 0.01726621 0.02124627 0.007268556 ## [4,] 0.005696785 0.006240729 0.01627394 0.01726621 0.02124627 0.007268556 ## [5,] 0.005696785 0.006240729 0.01627394 0.01726621 0.02124627 0.007268556 ## [6,] 0.005696785 0.006240729 0.01627394 0.01726621 0.02124627 0.007268556 ## d0S_ko1 d0_ko1 d1_ko1 d2_ko1 d3_ko1 d4_ko1 ## [1,] 0.01001541 0.004047823 0.006723765 0.007574284 0.01410948 0.007942855 ## [2,] 0.01001541 0.004047823 0.006723765 0.007574284 0.01410948 0.007942855 ## [3,] 0.01001541 0.004047823 0.006723765 0.007574284 0.01410948 0.007942855 ## [4,] 0.01001541 0.004047823 0.006723765 0.007574284 0.01410948 0.007942855 ## [5,] 0.01001541 0.004047823 0.006723765 0.007574284 0.01410948 0.007942855 ## [6,] 0.01001541 0.004047823 0.006723765 0.007574284 0.01410948 0.007942855 ## d0_d13ako d3_d13ako d4_d13ako d0_d13bko d3_d13bko d4_d13bko ## [1,] 0.008525676 0.0166642 0.01150588 0.006178614 0.01029716 0.005339577 ## [2,] 0.008525676 0.0166642 0.01150588 0.006178614 0.01029716 0.005339577 ## [3,] 0.008525676 0.0166642 0.01150588 0.006178614 0.01029716 0.005339577 ## [4,] 0.008525676 0.0166642 0.01150588 0.006178614 0.01029716 0.005339577 ## [5,] 0.008525676 0.0166642 0.01150588 0.006178614 0.01029716 0.005339577 ## [6,] 0.008525676 0.0166642 0.01150588 0.006178614 0.01029716 0.005339577 days &lt;- strsplit(colnames(m_all_s5), split = &quot;_&quot;) %&gt;% map_chr(~ .x[1]) %&gt;% gsub(&quot;d&quot;, &quot;&quot;, .) days[grep(&quot;0S&quot;, days)] &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;WT&quot;, &quot;TKO&quot;, &quot;KO1&quot;) options(repr.plot.width = 20, repr.plot.height = 20) shades &lt;- colorRampPalette(c(&quot;white&quot;, &quot;#635547&quot;, &quot;#DABE99&quot;,&quot;#C594BF&quot;,&quot;#B51D8D&quot;,&quot;darkred&quot;, &quot;yellow&quot;))(1000) image(t(as.matrix(m_all_s5)),col=shades, xaxt=&#39;n&#39;, yaxt=&#39;n&#39;); N = length(m_ord) m_y = tapply((1:N)/N, km$cluster[m_ord], mean) mtext(1:K, at = m_y, las=2, side= 2) mtext(1:K, at = m_y, las=2, side= 4) axis(3, at = seq(0, 1, length = ncol(m_all_s5)), labels = days) abline(h=tapply((1:N)/N, km$cluster[m_ord], max)) options(repr.plot.width = 3, repr.plot.height = 20) delta = m_s5[,c(&quot;d1_3a&quot;,&quot;d2_3a&quot;,&quot;d3_3a&quot;,&quot;d4_3a&quot;)]- m_s5[,c(&quot;d1_3b&quot;,&quot;d2_3b&quot;,&quot;d3_3b&quot;,&quot;d4_3b&quot;)] dshades &lt;- colorRampPalette(c(&quot;red&quot;,&quot;darkred&quot;,&quot;white&quot;,&quot;darkblue&quot;,&quot;blue&quot;))(1000) image(pmin(pmax(t(as.matrix(delta)),-0.3),0.3),col=dshades,zlim=c(-0.3,0.3)) 2.0.4.1 Trajectory per cluster chosen_clusters &lt;- c(1, 9, 19, 24, 30, 32, 40, 44, 53, 60) line_colors &lt;- c(&quot;wt&quot; = &quot;darkblue&quot;, &quot;3a&quot; = &quot;purple&quot;, &quot;3b&quot; = &quot;orange&quot;, &quot;tko&quot; = &quot;darkgray&quot;, &quot;ko1&quot; = &quot;darkgreen&quot;, &quot;d13ako&quot; = &quot;turquoise4&quot;, &quot;d13bko&quot; = &quot;orangered4&quot;) df &lt;- all_clust_data %&gt;% mutate(clust = km$cluster) %&gt;% group_by(clust) %&gt;% summarise_at(vars(starts_with(&quot;d&quot;)), mean, na.rm=TRUE) %&gt;% gather(&quot;samp&quot;, &quot;meth&quot;, -clust) %&gt;% separate(samp, c(&quot;day&quot;, &quot;line&quot;), sep=&quot;_&quot;) %&gt;% filter(day != &quot;d0S&quot;, day != &quot;d5&quot;) %&gt;% mutate(day = gsub(&quot;d&quot;, &quot;&quot;, day)) %&gt;% mutate(line = factor(line, levels = names(line_colors))) options(repr.plot.width = 5, repr.plot.height = 15) df %&gt;% filter(clust %in% chosen_clusters) %&gt;% mutate(clust = factor(clust), clust = forcats::fct_rev(clust)) %&gt;% ggplot(aes(x=day, y=meth, color=line, group=line)) + geom_line() + geom_point(size=0.5) + xlab(&quot;EB day&quot;) + ylab(&quot;Meth.&quot;) + theme(aspect.ratio = 1) + facet_grid(clust~.) + scale_color_manual(name = &quot;&quot;, values = line_colors) + scale_y_continuous(limits=c(0,1)) 2.1 Plot global EB trends 2.1.1 Figure 4A cpg_meth1 &lt;- gextract.left_join(&quot;seq.CG_500_mean&quot;, intervals=cpg_meth, iterator=cpg_meth, colnames=&quot;cg_cont&quot;) %&gt;% select(-(chrom1:end1)) %&gt;% select(chrom, start, end, cg_cont, everything()) %&gt;% as_tibble() line_colors &lt;- c(&quot;wt&quot; = &quot;darkblue&quot;, &quot;3a&quot; = &quot;purple&quot;, &quot;3b&quot; = &quot;orange&quot;, &quot;tko&quot; = &quot;darkgray&quot;) df &lt;- cpg_meth1 %&gt;% mutate(cg_cont = cut(cg_cont, c(0,0.03,0.08,0.15), include.lowest=TRUE, labels=c(&quot;low&quot;, &quot;mid&quot;, &quot;high&quot;))) %&gt;% group_by(cg_cont) %&gt;% summarise_at(vars(starts_with(&quot;d&quot;)), mean, na.rm=TRUE) %&gt;% gather(&quot;samp&quot;, &quot;meth&quot;, -cg_cont) %&gt;% separate(samp, c(&quot;day&quot;, &quot;line&quot;), sep=&quot;_&quot;) %&gt;% filter(day != &quot;d0S&quot;) %&gt;% mutate(day = gsub(&quot;d&quot;, &quot;&quot;, day)) %&gt;% mutate(line = factor(line, levels = names(line_colors))) options(repr.plot.width = 14, repr.plot.height = 7) p_high &lt;- df %&gt;% filter(cg_cont == &quot;high&quot;) %&gt;% ggplot(aes(x=day, y=meth, color=line, group=line)) + geom_line() + geom_point(size=0.5) + ggtitle(&quot;High CpG content&quot;) + xlab(&quot;EB day&quot;) + ylab(&quot;Meth.&quot;) + theme(aspect.ratio = 1) + scale_color_manual(name = &quot;&quot;, values = line_colors) + scale_y_continuous(limits=c(0,0.8)) p_low &lt;- df %&gt;% filter(cg_cont == &quot;low&quot;) %&gt;% ggplot(aes(x=day, y=meth, color=line, group=line)) + geom_line() + geom_point(size=0.5) + ggtitle(&quot;Low CpG content&quot;) + xlab(&quot;EB day&quot;) + ylab(&quot;Meth.&quot;) + theme(aspect.ratio = 1) + scale_color_manual(name = &quot;&quot;, values = line_colors) + scale_y_continuous(limits=c(0,0.8)) p_high + p_low 2.1.2 Extended Data Figure 8K Same for X chromosome line_colors &lt;- c(&quot;wt&quot; = &quot;darkblue&quot;, &quot;3a&quot; = &quot;purple&quot;, &quot;3b&quot; = &quot;orange&quot;, &quot;tko&quot; = &quot;darkgray&quot;) df &lt;- cpg_meth1 %&gt;% mutate(type = case_when(chrom == &quot;chrX&quot; ~ &quot;X&quot;, TRUE ~ &quot;autosome&quot;)) %&gt;% mutate(cg_cont = cut(cg_cont, c(0,0.03,0.08,0.15), include.lowest=TRUE, labels=c(&quot;low&quot;, &quot;mid&quot;, &quot;high&quot;))) %&gt;% group_by(type, cg_cont) %&gt;% summarise_at(vars(starts_with(&quot;d&quot;)), mean, na.rm=TRUE) %&gt;% gather(&quot;samp&quot;, &quot;meth&quot;, -cg_cont, -type) %&gt;% separate(samp, c(&quot;day&quot;, &quot;line&quot;), sep=&quot;_&quot;) %&gt;% filter(day != &quot;d0S&quot;) %&gt;% mutate(day = gsub(&quot;d&quot;, &quot;&quot;, day)) %&gt;% mutate(line = factor(line, levels = names(line_colors))) options(repr.plot.width = 14, repr.plot.height = 7) p_high_x &lt;- df %&gt;% filter(type == &quot;X&quot;, cg_cont == &quot;high&quot;) %&gt;% ggplot(aes(x=day, y=meth, color=line, group=line)) + geom_line() + geom_point(size=0.5) + ggtitle(&quot;X chromosome:\\nHigh CpG content&quot;) + xlab(&quot;EB day&quot;) + ylab(&quot;Meth.&quot;) + theme(aspect.ratio = 1) + scale_color_manual(name = &quot;&quot;, values = line_colors) + scale_y_continuous(limits=c(0,0.8)) p_low_x &lt;- df %&gt;% filter(type == &quot;X&quot;, cg_cont == &quot;low&quot;) %&gt;% ggplot(aes(x=day, y=meth, color=line, group=line)) + geom_line() + geom_point(size=0.5) + ggtitle(&quot;X chromosome:\\nLow CpG content&quot;) + xlab(&quot;EB day&quot;) + ylab(&quot;Meth.&quot;) + theme(aspect.ratio = 1) + scale_color_manual(name = &quot;&quot;, values = line_colors) + scale_y_continuous(limits=c(0,0.8)) p_high_x + p_low_x 2.2 cluster methylation in days 5 and 6 with DKO cpg_meth_56 &lt;- calc_eb_day5_to_day6_cpg_meth() 2.2.1 Project DKO on day 1-4 clusters all_clust_data &lt;- calc_eb_cpg_meth(from = 0, to = 6, min_cov = 10, max_na = NULL, intervals = clust_intervs, iterator = clust_intervs, cache_fn = here(&quot;output/all_clust_data_day1_to_6.tsv&quot;), rm_meth_cov = TRUE, tracks_key = NULL) m_column_order &lt;- c( &quot;d0_3a&quot;, &quot;d1_3a&quot;, &quot;d2_3a&quot;, &quot;d3_3a&quot;, &quot;d4_3a&quot;, &quot;d5_3a&quot;, &quot;d6_3a&quot;, &quot;d0_3b&quot;, &quot;d1_3b&quot;, &quot;d2_3b&quot;, &quot;d3_3b&quot;, &quot;d4_3b&quot;, &quot;d5_3b&quot;, &quot;d6_3b&quot;, &quot;d0_wt&quot;, &quot;d1_wt&quot;, &quot;d2_wt&quot;, &quot;d3_wt&quot;, &quot;d4_wt&quot;, &quot;d5_wt&quot;, &quot;d6_wt&quot;, &quot;d5_dko&quot;, &quot;d6_dko&quot;, &quot;d0_tko&quot;, &quot;d1_tko&quot;, &quot;d2_tko&quot;, &quot;d3_tko&quot;, &quot;d4_tko&quot;, &quot;d0S_3a&quot;, &quot;d0S_3b&quot;, &quot;d0S_wt&quot;, &quot;d0S_tko&quot; ) setdiff(colnames(all_clust_data)[-1:-3], m_column_order) ## [1] &quot;d0_d13ako&quot; &quot;d3_d13ako&quot; &quot;d4_d13ako&quot; &quot;d0_d13bko&quot; &quot;d3_d13bko&quot; &quot;d4_d13bko&quot; ## [7] &quot;d0_ko1&quot; &quot;d0S_ko1&quot; &quot;d1_ko1&quot; &quot;d2_ko1&quot; &quot;d3_ko1&quot; &quot;d4_ko1&quot; ## [13] &quot;d5_ko1&quot; setdiff(m_column_order, colnames(all_clust_data)) ## character(0) m_all &lt;- intervs_to_mat(all_clust_data)[, m_column_order] colnames(m_all) ## [1] &quot;d0_3a&quot; &quot;d1_3a&quot; &quot;d2_3a&quot; &quot;d3_3a&quot; &quot;d4_3a&quot; &quot;d5_3a&quot; &quot;d6_3a&quot; ## [8] &quot;d0_3b&quot; &quot;d1_3b&quot; &quot;d2_3b&quot; &quot;d3_3b&quot; &quot;d4_3b&quot; &quot;d5_3b&quot; &quot;d6_3b&quot; ## [15] &quot;d0_wt&quot; &quot;d1_wt&quot; &quot;d2_wt&quot; &quot;d3_wt&quot; &quot;d4_wt&quot; &quot;d5_wt&quot; &quot;d6_wt&quot; ## [22] &quot;d5_dko&quot; &quot;d6_dko&quot; &quot;d0_tko&quot; &quot;d1_tko&quot; &quot;d2_tko&quot; &quot;d3_tko&quot; &quot;d4_tko&quot; ## [29] &quot;d0S_3a&quot; &quot;d0S_3b&quot; &quot;d0S_wt&quot; &quot;d0S_tko&quot; m_all_s5 = apply(m_all[m_ord, ],2, zoo::rollmean, smooth_n, fill=c(&#39;extend&#39;,NA,&#39;extend&#39;), na.rm=T) head(m_all_s5) ## d0_3a d1_3a d2_3a d3_3a d4_3a d5_3a d6_3a ## [1,] 0.01001037 0.01079793 0.004898041 0.01102023 0.01277668 0 0.02408283 ## [2,] 0.01001037 0.01079793 0.004898041 0.01102023 0.01277668 0 0.02408283 ## [3,] 0.01001037 0.01079793 0.004898041 0.01102023 0.01277668 0 0.02408283 ## [4,] 0.01001037 0.01079793 0.004898041 0.01102023 0.01277668 0 0.02408283 ## [5,] 0.01001037 0.01079793 0.004898041 0.01102023 0.01277668 0 0.02408283 ## [6,] 0.01001037 0.01079793 0.004898041 0.01102023 0.01277668 0 0.02408283 ## d0_3b d1_3b d2_3b d3_3b d4_3b d5_3b ## [1,] 0.005717633 0.007146658 0.008921023 0.01298582 0.01649393 0.01666667 ## [2,] 0.005717633 0.007146658 0.008921023 0.01298582 0.01649393 0.01666667 ## [3,] 0.005717633 0.007146658 0.008921023 0.01298582 0.01649393 0.01666667 ## [4,] 0.005717633 0.007146658 0.008921023 0.01298582 0.01649393 0.01666667 ## [5,] 0.005717633 0.007146658 0.008921023 0.01298582 0.01649393 0.01666667 ## [6,] 0.005717633 0.007146658 0.008921023 0.01298582 0.01649393 0.01666667 ## d6_3b d0_wt d1_wt d2_wt d3_wt d4_wt ## [1,] 0.01485334 0.006180905 0.006556652 0.01132803 0.01854894 0.02603882 ## [2,] 0.01485334 0.006180905 0.006556652 0.01132803 0.01854894 0.02603882 ## [3,] 0.01485334 0.006180905 0.006556652 0.01132803 0.01854894 0.02603882 ## [4,] 0.01485334 0.006180905 0.006556652 0.01132803 0.01854894 0.02603882 ## [5,] 0.01485334 0.006180905 0.006556652 0.01132803 0.01854894 0.02603882 ## [6,] 0.01485334 0.006180905 0.006556652 0.01132803 0.01854894 0.02603882 ## d5_wt d6_wt d5_dko d6_dko d0_tko d1_tko ## [1,] 0.03191584 0.02506428 0.004145408 0.004717813 0.005965149 0.004823037 ## [2,] 0.03191584 0.02506428 0.004145408 0.004717813 0.005965149 0.004823037 ## [3,] 0.03191584 0.02506428 0.004145408 0.004717813 0.005965149 0.004823037 ## [4,] 0.03191584 0.02506428 0.004145408 0.004717813 0.005965149 0.004823037 ## [5,] 0.03191584 0.02506428 0.004145408 0.004717813 0.005965149 0.004823037 ## [6,] 0.03191584 0.02506428 0.004145408 0.004717813 0.005965149 0.004823037 ## d2_tko d3_tko d4_tko d0S_3a d0S_3b d0S_wt ## [1,] 0.004019872 0.005696785 0.006240729 0.01627394 0.01726621 0.02124627 ## [2,] 0.004019872 0.005696785 0.006240729 0.01627394 0.01726621 0.02124627 ## [3,] 0.004019872 0.005696785 0.006240729 0.01627394 0.01726621 0.02124627 ## [4,] 0.004019872 0.005696785 0.006240729 0.01627394 0.01726621 0.02124627 ## [5,] 0.004019872 0.005696785 0.006240729 0.01627394 0.01726621 0.02124627 ## [6,] 0.004019872 0.005696785 0.006240729 0.01627394 0.01726621 0.02124627 ## d0S_tko ## [1,] 0.007268556 ## [2,] 0.007268556 ## [3,] 0.007268556 ## [4,] 0.007268556 ## [5,] 0.007268556 ## [6,] 0.007268556 days &lt;- strsplit(colnames(m_all_s5), split = &quot;_&quot;) %&gt;% map_chr(~ .x[1]) %&gt;% gsub(&quot;d&quot;, &quot;&quot;, .) days ## [1] &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;0&quot; ## [16] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;5&quot; &quot;6&quot; &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;0S&quot; &quot;0S&quot; ## [31] &quot;0S&quot; &quot;0S&quot; days[grep(&quot;0S&quot;, days)] &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;WT&quot;, &quot;TKO&quot;) 2.2.2 Figure 4C options(repr.plot.width = 20, repr.plot.height = 20) shades &lt;- colorRampPalette(c(&quot;white&quot;, &quot;#635547&quot;, &quot;#DABE99&quot;,&quot;#C594BF&quot;,&quot;#B51D8D&quot;,&quot;darkred&quot;, &quot;yellow&quot;))(1000) image(t(as.matrix(m_all_s5)),col=shades, xaxt=&#39;n&#39;, yaxt=&#39;n&#39;); N = length(m_ord) m_y = tapply((1:N)/N, km$cluster[m_ord], mean) mtext(1:K, at = m_y, las=2, side= 2) mtext(1:K, at = m_y, las=2, side= 4) axis(3, at = seq(0, 1, length = ncol(m_all_s5)), labels = days) abline(h=tapply((1:N)/N, km$cluster[m_ord], max)) 2.2.3 Figure 4B options(repr.plot.width = 3, repr.plot.height = 20) delta = m_s5[,c(&quot;d1_3a&quot;,&quot;d2_3a&quot;,&quot;d3_3a&quot;,&quot;d4_3a&quot;)]- m_s5[,c(&quot;d1_3b&quot;,&quot;d2_3b&quot;,&quot;d3_3b&quot;,&quot;d4_3b&quot;)] dshades &lt;- colorRampPalette(c(&quot;red&quot;,&quot;darkred&quot;,&quot;white&quot;,&quot;darkblue&quot;,&quot;blue&quot;))(1000) image(pmin(pmax(t(as.matrix(delta)),-0.3),0.3),col=dshades,zlim=c(-0.3,0.3)) "],["ab-sequence-model.html", "3 A/B sequence model 3.1 Calculate models 3.2 Plot models vs preditions 3.3 plot logo 3.4 Test models with closest CpG methylation 3.5 Estimate prediction noise", " 3 A/B sequence model 3.0.1 initialize definitions suppressMessages(suppressWarnings(source(here::here(&quot;code/init.R&quot;)))) 3.0.2 Get A/B meth data cpg_meth &lt;- calc_eb_day0_to_day4_cpg_meth(min_cov = 10, max_na = 5) nrow(cpg_meth) ## [1] 132052 colnames(cpg_meth) ## [1] &quot;chrom&quot; &quot;start&quot; &quot;end&quot; &quot;d0_3a&quot; &quot;d0S_3a&quot; &quot;d1_3a&quot; &quot;d2_3a&quot; ## [8] &quot;d3_3a&quot; &quot;d4_3a&quot; &quot;d0_3b&quot; &quot;d0S_3b&quot; &quot;d1_3b&quot; &quot;d2_3b&quot; &quot;d3_3b&quot; ## [15] &quot;d4_3b&quot; &quot;d0_tko&quot; &quot;d0S_tko&quot; &quot;d1_tko&quot; &quot;d2_tko&quot; &quot;d3_tko&quot; &quot;d4_tko&quot; ## [22] &quot;d0_wt&quot; &quot;d0S_wt&quot; &quot;d1_wt&quot; &quot;d2_wt&quot; &quot;d3_wt&quot; &quot;d4_wt&quot; m &lt;- cpg_meth %&gt;% mutate( mA = psum(d1_3a, d2_3a, d3_3a, d4_3a, na.rm=FALSE), mB = psum(d1_3b, d2_3b, d3_3b, d4_3b, na.rm=FALSE), mwt = psum(d1_wt, d2_wt, d3_wt, d4_wt, na.rm=FALSE), dAB = mA - mB, dB = mB - mwt, dA = mA - mwt ) %&gt;% select(chrom, start, end, mA, mB, mwt, dAB, dB, dA) 3.0.2.1 Clean loci with 0 methylation: locus_means &lt;- rowMeans(cpg_meth %&gt;% select(-(chrom:end)), na.rm=TRUE) locus_sds &lt;- matrixStats::rowSds(cpg_meth %&gt;% select(-(chrom:end)) %&gt;% as.matrix() , na.rm=TRUE) options(repr.plot.width = 8, repr.plot.height = 4) thresh &lt;- 0.05 p1 &lt;- tibble(m = locus_means) %&gt;% ggplot(aes(x=m)) + geom_density() + geom_vline(xintercept=thresh, linetype=&quot;dashed&quot;, color=&quot;red&quot;) p2 &lt;- tibble(m = locus_means, sd = locus_sds) %&gt;% ggplot(aes(x=m, y=sd)) + geom_point(size=0.01) + geom_vline(xintercept=thresh, linetype=&quot;dashed&quot;, color=&quot;red&quot;) p1 + p2 m &lt;- m[locus_means &gt;= thresh, ] sum(locus_means &lt; thresh) ## [1] 15935 nrow(m) ## [1] 116117 fwrite(m, here(&quot;output/ebd_day1_to_day4_cpg_meth_mat.tsv&quot;), sep=&quot;\\t&quot;) 3.1 Calculate models intervs_all &lt;- m %&gt;% select(chrom, start, end) flank_bp &lt;- 5 seq_df &lt;- get_seq_df(intervs_all, flank_bp = flank_bp) head(seq_df) ## # A tibble: 6 x 6 ## chrom start end nuc pos dnuc ## 1 chr1 4402515 4402516 G 2 GG ## 2 chr1 4402515 4402516 G 3 GG ## 3 chr1 4402515 4402516 G 4 GA ## 4 chr1 4402515 4402516 A 5 AA ## 5 chr1 4402515 4402516 A 6 AG ## 6 chr1 4402515 4402516 G 9 GC seq_df_wide &lt;- seq_df_to_wide(seq_df, flank_bp = 5) seq_df_wide_nuc &lt;- seq_df_to_wide(seq_df, flank_bp = 5, dinuc=FALSE) 3.1.1 Compute models 3.1.1.1 hyperparameters tuning: xgb_params &lt;- hypertune_xgb(seq_df_wide, m, dAB) %cache_rds% here(&quot;data/xgb_params.rds&quot;) xgb_params ## $params ## $params$booster ## [1] &quot;gbtree&quot; ## ## $params$objective ## [1] &quot;reg:squarederror&quot; ## ## $params$subsample ## [1] 1 ## ## $params$max_depth ## [1] 4 ## ## $params$colsample_bytree ## [1] 0.4 ## ## $params$gamma ## [1] 0.1 ## ## $params$eta ## [1] 0.05 ## ## $params$eval_metric ## [1] &quot;rmse&quot; ## ## $params$min_child_weight ## [1] 2 ## ## ## $nrounds ## [1] 1750 message(&quot;dAB (dinuc)&quot;) ## dAB (dinuc) model_ab &lt;- gen_seq_model(seq_df_wide, m, dAB) %cache_rds% here(&quot;output/ab_dinuc_model_5bp.rds&quot;) model_ab_xgboost &lt;- gen_seq_model_xgboost(seq_df_wide, m, dAB, xgb_params) %cache_rds% here(&quot;output/ab_dinuc_model_5bp_xgboost.rds&quot;) message(&quot;dAB (nuc)&quot;) ## dAB (nuc) model_ab_nuc &lt;- gen_seq_model(seq_df_wide_nuc, m, dAB) %cache_rds% here(&quot;output/ab_nuc_model_5bp.rds&quot;) model_ab_nuc_xgboost &lt;- gen_seq_model_xgboost(seq_df_wide_nuc, m, dAB, xgb_params) %cache_rds% here(&quot;output/ab_nuc_model_5bp_xgboost.rds&quot;) message(&quot;dA&quot;) ## dA model_a &lt;- gen_seq_model(seq_df_wide, m, dA) %cache_rds% here(&quot;output/a_dinuc_model_5bp.rds&quot;) model_a_xgboost &lt;- gen_seq_model_xgboost(seq_df_wide, m, dA, xgb_params) %cache_rds% here(&quot;output/a_dinuc_model_5bp_xgboost.rds&quot;) message(&quot;dB&quot;) ## dB model_b &lt;- gen_seq_model(seq_df_wide, m, dB) %cache_rds% here(&quot;output/b_dinuc_model_5bp.rds&quot;) model_b_xgboost &lt;- gen_seq_model_xgboost(seq_df_wide, m, dB, xgb_params) %cache_rds% here(&quot;output/b_dinuc_model_5bp_xgboost.rds&quot;) 3.2 Plot models vs preditions 3.2.1 Figure 4F options(repr.plot.width = 20, repr.plot.height=4) p_ab_glm &lt;- plot_model_scatter(model_ab, x_lab=&quot;Dinucleotide combined model (GLM)&quot;, y_lab = &quot;Meth (3a-/-) - (3b-/-)&quot;, xlim=c(-1.1, 0.6), ylim= c(-1.8, 1.2)) p_ab &lt;- plot_model_scatter(model_ab_xgboost, x_lab=&quot;Dinucleotide combined model&quot;, y_lab = &quot;Meth (3a-/-) - (3b-/-)&quot;, xlim=c(-1.1, 0.6), ylim= c(-1.8, 1.2)) p_ab_nuc &lt;- plot_model_scatter(model_ab_nuc_xgboost, x_lab=&quot;Nucleotide combined model&quot;, y_lab = &quot;Meth (3a-/-) - (3b-/-)&quot;, xlim=c(-1.1, 0.6), ylim= c(-1.8, 1.2)) p_a &lt;- plot_model_scatter(model_a_xgboost, x_lab=&quot;Dinucleotide combined model&quot;, y_lab = &quot;3a-/- - wt&quot;) p_b &lt;- plot_model_scatter(model_b_xgboost, x_lab=&quot;Dinucleotide combined model&quot;, y_lab = &quot;3b-/- - wt&quot;) fa_b &lt;- model_a$mat %&gt;% select(chrom:end) %&gt;% mutate(i = 1:n()) %&gt;% inner_join(model_b$mat %&gt;% select(chrom, start, end)) %&gt;% pull(i) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) fb_a &lt;- model_b$mat %&gt;% select(chrom:end) %&gt;% mutate(i = 1:n()) %&gt;% inner_join(model_a$mat %&gt;% select(chrom, start, end)) %&gt;% pull(i) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) p_models &lt;- tibble(model_a = model_a_xgboost$pred[fa_b], model_b = model_b_xgboost$pred[fb_a]) %&gt;% mutate(col = densCols(., bandwidth=0.08,colramp=colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )))) %&gt;% ggplot(aes(x=model_a, y=model_b, col=col)) + geom_point(shape=19, size=0.4) + scale_color_identity() + coord_cartesian(xlim = c(-1, 0.4), ylim = c(-0.3, 0.3)) + xlab(&quot;3a-/- model&quot;) + ylab(&quot;3b-/- model&quot;) + theme(aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) + labs(subtitle = glue(&quot;R^2 = {cor}, m = {meth_cor}&quot;, cor = round(cor(model_a_xgboost$pred[fa_b], model_b_xgboost$pred[fb_a])^2, digits=2), meth_cor = round(cor(model_a_xgboost$mat$dA[fa_b], model_b_xgboost$mat$dB[fb_a])^2, digits=2))) p &lt;- p_a + p_b + p_models + p_ab_nuc + p_ab + p_ab_glm + plot_layout(nrow=1) p &amp; theme_bw() &amp; theme(plot.subtitle = ggtext::element_markdown(), aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) options(repr.plot.width = 6, repr.plot.height=10) plot_model_scatter_legend(model_ab) 3.2.2 Plot GLM model parameters 3.2.3 Figure 4D coef_df &lt;- get_coef_df(model_ab) ## Loading required package: Matrix ## ## Attaching package: &#39;Matrix&#39; ## The following objects are masked from &#39;package:tidyr&#39;: ## ## expand, pack, unpack ## Loaded glmnet 4.1-4 options(repr.plot.width = 5, repr.plot.height = 6) p &lt;- coef_df %&gt;% ggplot(aes(x=pos, y=dinuc, fill=coefficient)) + geom_tile() + scale_fill_gradient2(low = &quot;darkblue&quot;, high = &quot;darkred&quot;, mid = &quot;white&quot;, midpoint = 0, na.value=&quot;white&quot;) + theme_minimal() + ylab(&quot;Dinucleotide&quot;) + xlab(&quot;Position&quot;) p 3.3 plot logo 3.3.1 Figure 4E ab_score_quant &lt;- gquantiles(&quot;DNMT.ab_score_glm_plus&quot;, c(0.1,0.9)) high_score_df &lt;- gscreen(&quot;DNMT.ab_score_glm_plus &gt;= ab_score_quant[2]&quot;, intervals=gintervals.all()) %&gt;% mutate(start = start - 5, end = end + 6) %&gt;% mutate(s = toupper(gseq.extract(.))) %&gt;% as_tibble() low_score_df &lt;- gscreen(&quot;DNMT.ab_score_glm_plus &lt;= ab_score_quant[1]&quot;, intervals=gintervals.all()) %&gt;% mutate(start = start - 5, end = end + 6) %&gt;% mutate(s = toupper(gseq.extract(.))) %&gt;% as_tibble() high_score_df1 &lt;- high_score_df %&gt;% mutate( r1 = sample(c(&quot;A&quot;, &quot;C&quot;, &quot;G&quot;, &quot;T&quot;), size=length(s), replace=TRUE), r2 = sample(c(&quot;A&quot;, &quot;C&quot;, &quot;G&quot;, &quot;T&quot;), size=length(s), replace=TRUE)) %&gt;% unite(&quot;r&quot;, r1, r2, sep=&quot;&quot;) %&gt;% mutate(i = 1:n(), r = ifelse(i &lt;= length(s) * 0.8, &quot;CG&quot;, r)) %&gt;% mutate(s1 = paste0(substr(s, 1, 5), r, substr(s, 8, length(s)))) %&gt;% select(chrom, start, end, s = s1) low_score_df1 &lt;- low_score_df %&gt;% mutate( r1 = sample(c(&quot;A&quot;, &quot;C&quot;, &quot;G&quot;, &quot;T&quot;), size=length(s), replace=TRUE), r2 = sample(c(&quot;A&quot;, &quot;C&quot;, &quot;G&quot;, &quot;T&quot;), size=length(s), replace=TRUE)) %&gt;% unite(&quot;r&quot;, r1, r2, sep=&quot;&quot;) %&gt;% mutate(i = 1:n(), r = ifelse(i &lt;= length(s) * 0.8, &quot;CG&quot;, r)) %&gt;% mutate(s1 = paste0(substr(s, 1, 5), r, substr(s, 8, length(s)))) %&gt;% select(chrom, start, end, s = s1) options(repr.plot.width = 8, repr.plot.height = 4) p_high &lt;- ggplot() + ggseqlogo::geom_logo(high_score_df1$s, method=&quot;bits&quot;, seq_type=&quot;dna&quot;) + ggseqlogo::theme_logo() ## Warning: `guides(&lt;scale&gt; = FALSE)` is deprecated. Please use `guides(&lt;scale&gt; = ## &quot;none&quot;)` instead. p_high p_high &lt;- p_high + scale_x_continuous(labels = c(-5:-1, 0, 0, 1:5), breaks=1:12) ## Scale for &#39;x&#39; is already present. Adding another scale for &#39;x&#39;, which will ## replace the existing scale. p_high options(repr.plot.width = 8, repr.plot.height = 4) p_low &lt;- ggplot() + ggseqlogo::geom_logo(low_score_df1$s, method=&quot;bits&quot;, seq_type=&quot;dna&quot;) + ggseqlogo::theme_logo() ## Warning: `guides(&lt;scale&gt; = FALSE)` is deprecated. Please use `guides(&lt;scale&gt; = ## &quot;none&quot;)` instead. p_low p_low &lt;- p_low + scale_x_continuous(labels = c(-5:-1, 0, 0, 1:5), breaks=1:12) ## Scale for &#39;x&#39; is already present. Adding another scale for &#39;x&#39;, which will ## replace the existing scale. p_low 3.4 Test models with closest CpG methylation Add CG content and GC content gvtrack.create(&quot;tor&quot;, &quot;Encode.esd3.replichip.rep2&quot;, &quot;avg&quot;) gvtrack.iterator(&quot;tor&quot;, sshift=-15000, eshift=15000) m_annot &lt;- gextract.left_join(c(&quot;seq.CG_500_mean&quot;, &quot;seq.GC_500_mean&quot;, &quot;tor&quot;), intervals=m, iterator=m, colnames=c(&quot;cg_cont&quot;, &quot;gc_cont&quot;, &quot;tor&quot;)) %&gt;% select(chrom, start, end, cg_cont, gc_cont, tor) Add closest CpG methylation m_close_cg &lt;- m %&gt;% gintervals.neighbors1(m %&gt;% select(chrom, start, end, dAB_close = dAB), maxneighbors=2) %&gt;% filter(!(start == start1 &amp; end == end1 &amp; chrom == chrom1)) %&gt;% mutate(dAB_close = ifelse(abs(dist) &lt;= 1e3, dAB_close, NA)) %&gt;% select(chrom, start, end, dAB_close) m_annot &lt;- m_annot %&gt;% left_join(m_close_cg) %&gt;% as_tibble() ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) 3.4.1 Compute model with CG and GC content stopifnot(m_annot %&gt;% anti_join(seq_df_wide) %&gt;% nrow() == 0) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) model_ab_gc_cg &lt;- gen_seq_model(bind_cols(seq_df_wide, m_annot %&gt;% select(cg_cont, gc_cont)), m, dAB) %cache_rds% here(&quot;output/ab_dinuc_model_5bp_cg_gc.rds&quot;) model_ab_gc_cg_xgb &lt;- gen_seq_model_xgboost(bind_cols(seq_df_wide, m_annot %&gt;% select(cg_cont, gc_cont)), m, dAB, xgb_params) %cache_rds% here(&quot;output/ab_dinuc_model_5bp_cg_gc_xgboost.rds&quot;) bandwidth &lt;- 0.08 point_size &lt;- 0.001 p_gc_cg &lt;- plot_model_scatter(model_ab_gc_cg_xgb, x_lab=&quot;Dinucleotide model +\\nCG content + GC content&quot;, y_lab = &quot;Meth (3a-/-) - (3b-/-)&quot;) options(repr.plot.width = 5, repr.plot.height=5) p_gc_cg &amp; theme_bw() &amp; theme(plot.subtitle = ggtext::element_markdown(),, aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) 3.4.2 Compute model with TOR model_ab_tor_xgb &lt;- gen_seq_model_xgboost(bind_cols(seq_df_wide, m_annot %&gt;% select(tor)), m, dAB, xgb_params) %cache_rds% here(&quot;output/ab_dinuc_model_5bp_tor_xgboost.rds&quot;) bandwidth &lt;- 0.08 point_size &lt;- 0.001 p_tor &lt;- plot_model_scatter(model_ab_tor_xgb, x_lab=&quot;Dinucleotide model +\\nTOR&quot;, y_lab = &quot;Meth (3a-/-) - (3b-/-)&quot;) options(repr.plot.width = 5, repr.plot.height=5) p_tor &amp; theme_bw() &amp; theme(plot.subtitle = ggtext::element_markdown(),, aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) 3.4.3 Compute model with closest CpG intervs_f &lt;- m_annot %&gt;% filter(!is.na(dAB_close)) %&gt;% select(chrom, start, end, dAB_close) m_f &lt;- m %&gt;% inner_join(intervs_f %&gt;% select(chrom:end)) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) seq_df_wide_f &lt;- seq_df_wide %&gt;% inner_join(intervs_f) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) model_ab_close_cg &lt;- gen_seq_model(seq_df_wide_f, m_f, dAB) %cache_rds% here(&quot;output/ab_dinuc_model_5bp_close_cg.rds&quot;) nrow(intervs_f) ## [1] 80056 model_ab_close_cg_xgb &lt;- gen_seq_model_xgboost(seq_df_wide_f, m_f, dAB, xgb_params) %cache_rds% here(&quot;output/ab_dinuc_model_5bp_close_cg_xgb.rds&quot;) nrow(intervs_f) ## [1] 80056 p_close_cg &lt;- plot_model_scatter(model_ab_close_cg_xgb, x_lab=&quot;Dinucleotide model +\\nclosest CpG methylation&quot;, y_lab = &quot;Meth (3a-/-) - (3b-/-)&quot;) options(repr.plot.width = 5, repr.plot.height=5) p_close_cg &amp; theme_bw() &amp; theme(plot.subtitle = ggtext::element_markdown(),, aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) 3.4.4 Compute model with all enhancer methylation cpg_meth_meth_cov &lt;- calc_eb_day0_to_day4_cpg_meth(min_cov = 10, max_na = 5, rm_meth_cov=FALSE) enh_intervs &lt;- get_all_enhancers() %&gt;% mutate(l = end - start) %&gt;% filter(l &lt;= 1e4) %&gt;% select(-l) enh_intervs %&gt;% mutate(l = end - start) %&gt;% pull(l) %&gt;% summary() ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 20.0 60.0 100.0 200.2 200.0 9320.0 m_enh_punc &lt;- cpg_meth_meth_cov %&gt;% gintervals.neighbors1(enh_intervs) %&gt;% filter(dist == 0) %&gt;% group_by(chrom1, start1, end1) %&gt;% mutate(mA_enh.meth = sum(d1_3a.meth, d2_3a.meth, d3_3a.meth, d4_3a.meth, na.rm=FALSE), mA_enh.cov = sum(d1_3a.cov, d2_3a.cov, d3_3a.cov, d4_3a.cov, na.rm=FALSE), mB_enh.meth = sum(d1_3b.meth, d2_3b.meth, d3_3b.meth, d4_3b.meth, na.rm=FALSE), mB_enh.cov = sum(d1_3b.cov, d2_3b.cov, d3_3b.cov, d4_3b.cov, na.rm=FALSE), mA.meth = psum(d1_3a.meth, d2_3a.meth, d3_3a.meth, d4_3a.meth, na.rm=FALSE), mA.cov = psum(d1_3a.cov, d2_3a.cov, d3_3a.cov, d4_3a.cov, na.rm=FALSE), mB.meth = psum(d1_3b.meth, d2_3b.meth, d3_3b.meth, d4_3b.meth, na.rm=FALSE), mB.cov = psum(d1_3b.cov, d2_3b.cov, d3_3b.cov, d4_3b.cov, na.rm=FALSE), mA_enh = (mA_enh.meth - mA.meth) / (mA_enh.cov - mA.cov), mB_enh = (mB_enh.meth - mB.meth) / (mB_enh.cov - mB.cov), dAB_enh = mA_enh - mB_enh ) %&gt;% ungroup() %&gt;% select(chrom, start, end, dAB_enh) intervs_f &lt;- m_annot %&gt;% inner_join(m_enh_punc) %&gt;% filter(!is.na(dAB_enh)) %&gt;% select(chrom, start, end, dAB_enh) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) m_f &lt;- m %&gt;% inner_join(intervs_f %&gt;% select(chrom:end)) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) seq_df_wide_f &lt;- seq_df_wide %&gt;% inner_join(intervs_f) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) model_ab_enh &lt;- gen_seq_model(seq_df_wide_f, m_f, dAB) %cache_rds% here(&quot;output/ab_dinuc_model_5bp_enh_meth.rds&quot;) model_ab_enh_xgb &lt;- gen_seq_model_xgboost(seq_df_wide_f, m_f, dAB, xgb_params) %cache_rds% here(&quot;output/ab_dinuc_model_5bp_enh_meth_xgb.rds&quot;) nrow(intervs_f) ## [1] 40813 3.4.5 Figure 7A p_enh_meth &lt;- plot_model_scatter(model_ab_enh_xgb, x_lab=&quot;Dinucleotide model +\\nEnhancer methylation&quot;, y_lab = &quot;Meth (3a-/-) - (3b-/-)&quot;) options(repr.plot.width = 5, repr.plot.height=5) p_enh_meth &amp; theme_bw() &amp; theme(plot.subtitle = ggtext::element_markdown(), aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) 3.4.5.1 All variables intervs_f &lt;- m_annot %&gt;% inner_join(m_enh_punc) %&gt;% filter(!is.na(dAB_enh)) %&gt;% select(chrom, start, end, dAB_enh) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) m_f &lt;- m %&gt;% inner_join(intervs_f %&gt;% select(chrom:end)) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) seq_df_wide_f &lt;- seq_df_wide %&gt;% inner_join(intervs_f) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) seq_df_wide_f &lt;- seq_df_wide_f %&gt;% left_join(m_annot %&gt;% select(chrom:end, cg_cont, gc_cont, tor, dAB_close)) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) model_ab_all_vars_xgb &lt;- gen_seq_model_xgboost(seq_df_wide_f, m_f, dAB, xgb_params) %cache_rds% here(&quot;output/ab_dinuc_model_5bp_all_vars_xgb.rds&quot;) nrow(intervs_f) ## [1] 40813 p_all_vars &lt;- plot_model_scatter(model_ab_all_vars_xgb, x_lab=&quot;Dinucleotide model +\\nCG+GC+TOR+Closest CpG+Enhancer&quot;, y_lab = &quot;Meth (3a-/-) - (3b-/-)&quot;) options(repr.plot.width = 5, repr.plot.height=5) p_all_vars &amp; theme_bw() &amp; theme(plot.subtitle = ggtext::element_markdown(), aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) 3.5 Estimate prediction noise cpg_meth1 &lt;- calc_eb_day0_to_day4_cpg_meth(min_cov = 10, max_na = 5, rm_meth_cov=FALSE) cpg_meth1 &lt;- cpg_meth1 %&gt;% inner_join(m %&gt;% select(chrom, start, end)) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) cpg_meth.avg &lt;- cpg_meth1 %&gt;% select(-ends_with(&quot;meth&quot;), -ends_with(&quot;cov&quot;)) %&gt;% intervs_to_mat() cpg_meth.cov &lt;- cpg_meth1 %&gt;% select(chrom:end, ends_with(&quot;cov&quot;)) %&gt;% intervs_to_mat() cpg_meth.cov &lt;- cpg_meth.cov[, paste0(colnames(cpg_meth.avg), &quot;.cov&quot;)] cpg_meth.samp_meth &lt;- cpg_meth.avg for (col in colnames(cpg_meth.avg)){ suppressWarnings(cpg_meth.samp_meth[, col] &lt;- map2_int(cpg_meth.cov[, paste0(col, &quot;.cov&quot;)], cpg_meth.avg[, col], ~ sum(rbinom(n=.x, size=1, prob=.y) ))) } cpg_meth.samp &lt;- cpg_meth.samp_meth / cpg_meth.cov m_samp &lt;- cpg_meth.samp %&gt;% mat_to_intervs() %&gt;% mutate( mA = psum(d1_3a, d2_3a, d3_3a, d4_3a, na.rm=FALSE), mB = psum(d1_3b, d2_3b, d3_3b, d4_3b, na.rm=FALSE), mwt = psum(d1_wt, d2_wt, d3_wt, d4_wt, na.rm=FALSE), dAB = mA - mB, dB = mB - mwt, dA = mA - mwt ) %&gt;% select(chrom, start, end, mA, mB, mwt, dAB, dB, dA) %&gt;% as_tibble() message(&quot;dAB (dinuc)&quot;) ## dAB (dinuc) model_ab_samp &lt;- gen_seq_model(seq_df_wide, m_samp, dAB) %cache_rds% here(&quot;output/ab_dinuc_model_5bp_samp.rds&quot;) model_ab_samp_xgb &lt;- gen_seq_model_xgboost(seq_df_wide, m_samp, dAB, xgb_params) %cache_rds% here(&quot;output/ab_dinuc_model_5bp_samp_xgboost.rds&quot;) bandwidth &lt;- 0.08 point_size &lt;- 0.001 p_ab_samp &lt;- plot_model_scatter(model_ab_samp_xgb, x_lab=&quot;Dinucleotide combined model (sampled)&quot;, y_lab = &quot;Meth (3a-/-) - (3b-/-)&quot;) p_ab_samp bandwidth &lt;- 0.08 point_size &lt;- 0.001 p_ab_samp_obs &lt;- tibble(pred = model_ab_xgboost$pred, y = model_ab_samp_xgb$pred) %&gt;% mutate(col = densCols(., bandwidth=0.06,colramp=colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )))) %&gt;% ggplot(aes(x=pred, y=y, col=col)) + geom_point(shape=19, size=0.001) + scale_color_identity() + xlab(&quot;Dinucleotide combined model (observed)&quot;) + ylab(&quot;Dinucleotide combined model (sampled)&quot;) + theme(aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) + labs(subtitle = glue(&quot;R^2 = {cor}&quot;, cor = round(cor(model_ab_xgboost$pred, model_ab_samp_xgb$pred)^2, digits=5))) + theme(plot.subtitle = ggtext::element_markdown()) p_ab_samp_obs round(cor(model_ab_xgboost$pred, model_ab_samp_xgb$pred)^2, digits=5) ## [1] 0.98552 bandwidth &lt;- 0.08 point_size &lt;- 0.001 p_ab_samp_obs_y &lt;- tibble(pred = model_ab_xgboost$y, y = model_ab_samp_xgb$y) %&gt;% mutate(col = densCols(., bandwidth=0.06,colramp=colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )))) %&gt;% ggplot(aes(x=pred, y=y, col=col)) + geom_point(shape=19, size=0.001) + scale_color_identity() + xlab(&quot;Meth (3a-/-) - (3b-/-) (observed)&quot;) + ylab(&quot;Meth (3a-/-) - (3b-/-) (sampled)&quot;) + theme(aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) + labs(subtitle = glue(&quot;R^2 = {cor}&quot;, cor = round(cor(model_ab_xgboost$y, model_ab_samp_xgb$y)^2, digits=2))) + theme(plot.subtitle = ggtext::element_markdown()) p_ab_samp_obs_y 3.5.1 Kinteics per time and score bin track_df &lt;- tracks_key %&gt;% filter(day %in% c(&quot;d0S&quot;, paste0(&quot;d&quot;, 0:6))) %&gt;% group_by(day, line) %&gt;% mutate(name1 = glue(&quot;{day}_{line}_{sort}_{1:n()}&quot;)) %&gt;% ungroup() %&gt;% select(line, day, sort, name = name1, track_name) %&gt;% unite(&quot;grp&quot;, day, line, sort, remove=FALSE) cpg_meth_all &lt;- gextract_meth( tracks = track_df$track_name, names=track_df$name, intervals=gintervals.union(&quot;intervs.captPBAT_probes.ES_EB_V1&quot;, &quot;intervs.captPBAT_probes.ES_EB_V2&quot;), extract_meth_calls = TRUE) %cache_df% here(&quot;output/eb_day0_to_day6_cpg_meth.tsv&quot;) %&gt;% select(-intervalID) %&gt;% as_tibble() cpg_meth_all &lt;- cpg_meth_all %&gt;% select(-ends_with(&quot;ko1&quot;)) colnames(cpg_meth_all) &lt;- gsub(&quot;ko3a&quot;, &quot;3a&quot;, colnames(cpg_meth_all)) colnames(cpg_meth_all) &lt;- gsub(&quot;ko3b&quot;, &quot;3b&quot;, colnames(cpg_meth_all)) cpg_meth_days &lt;- cpg_meth_all %&gt;% select(chrom, start, end) grps &lt;- expand.grid(paste0(&quot;d&quot;, 0:6), c(&quot;wt&quot;, &quot;3a&quot;, &quot;3b&quot;)) %&gt;% unite(&quot;var&quot;, c(&quot;Var1&quot;, &quot;Var2&quot;)) %&gt;% pull(var) for (g in grps){ cov_cols &lt;- grep(glue(&quot;{g}.*cov$&quot;), colnames(cpg_meth_all), value=TRUE) meth_cols &lt;- grep(glue(&quot;{g}.*meth$&quot;), colnames(cpg_meth_all), value=TRUE) cpg_meth_days[[paste0(g, &quot;.cov&quot;)]] &lt;- rowSums(cpg_meth_all[, cov_cols], na.rm=TRUE) cpg_meth_days[[paste0(g, &quot;.meth&quot;)]] &lt;- rowSums(cpg_meth_all[, meth_cols], na.rm=TRUE) } cpg_intervs &lt;- cpg_meth_all %&gt;% select(chrom:end) scores_df &lt;- gextract(&quot;DNMT.ab_score_xgb_plus&quot;, iterator=cpg_intervs, intervals=cpg_intervs, colnames=&quot;ab_score&quot;) %&gt;% arrange(intervalID) %&gt;% select(-intervalID) %&gt;% as_tibble() cov_mat &lt;- cpg_meth_days %&gt;% select(chrom:end, ends_with(&quot;cov&quot;)) %&gt;% intervs_to_mat() colnames(cov_mat) &lt;- gsub(&quot;.cov$&quot;, &quot;&quot;, colnames(cov_mat)) meth_mat &lt;- cpg_meth_days %&gt;% select(chrom:end, ends_with(&quot;meth&quot;)) %&gt;% intervs_to_mat() colnames(meth_mat) &lt;- gsub(&quot;.meth$&quot;, &quot;&quot;, colnames(meth_mat)) score_qs &lt;- quantile(scores_df$ab_score, (0:20)/20) score_qs[length(score_qs)] &lt;- score_qs[length(score_qs)]+1 score_qs[1] &lt;- score_qs[1]-1 scores_df &lt;- scores_df %&gt;% mutate(score_grp = as.character(as.numeric(cut(ab_score, breaks=score_qs, include.lowest = TRUE)))) cov_bin &lt;- tgs_matrix_tapply(t(cov_mat), scores_df$score_grp, sum, na.rm=TRUE) meth_bin &lt;- tgs_matrix_tapply(t(meth_mat), scores_df$score_grp, sum, na.rm=TRUE) stopifnot(all(colnames(cov_bin) == colnames(meth_bin))) avg_bin &lt;- meth_bin / cov_bin avg_df &lt;- avg_bin %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;bin&quot;) %&gt;% gather(&quot;samp&quot;, &quot;val&quot;, -bin) %&gt;% separate(samp, c(&quot;day&quot;, &quot;line&quot;)) %&gt;% as_tibble() 3.5.2 Figure 4G options(repr.plot.width = 10, repr.plot.height=4) cols &lt;- colorRampPalette(c(&quot;gray&quot;, &quot;darkred&quot;,&quot;yellow&quot;))(20) p &lt;- avg_df %&gt;% mutate(day = gsub(&quot;d&quot;, &quot;&quot;, day)) %&gt;% mutate(bin = factor(bin, levels=as.character(1:20))) %&gt;% mutate(line = factor(line, levels=c(&quot;wt&quot;, &quot;3b&quot;, &quot;3a&quot;))) %&gt;% mutate(line = fct_recode(line, &quot;3b-/-&quot; = &quot;3b&quot;, &quot;3a-/-&quot; = &quot;3a&quot;)) %&gt;% ggplot(aes(x=day, y=val, color=bin, group=bin)) + geom_point(size=0.5) + geom_line(lwd = 0.5) + scale_color_manual(values=cols) + facet_grid(.~line) + xlab(&quot;EB day&quot;) + ylab(&quot;Meth.&quot;) + guides(color=FALSE) + theme_arial(7) ## Warning: `guides(&lt;scale&gt; = FALSE)` is deprecated. Please use `guides(&lt;scale&gt; = ## &quot;none&quot;)` instead. p options(repr.plot.width=2, repr.plot.height=10) color.bar &lt;- function(lut, min, max=-min, nticks=11, ticks=seq(min, max, len=nticks), title=&#39;&#39;) { scale = (length(lut)-1)/(max-min) plot(c(0,10), c(min,max), type=&#39;n&#39;, bty=&#39;n&#39;, xaxt=&#39;n&#39;, xlab=&#39;&#39;, yaxt=&#39;n&#39;, ylab=&#39;&#39;, main=title) for (i in 1:(length(lut)-1)) { y = (i-1)/scale + min rect(0,y,10,y+1/scale, col=lut[i], border=NA) } } color.bar(cols, min=1, max=20, nticks=20) 3.5.3 Scores within enhancers enh_intervs &lt;- get_all_enhancers() small_enh &lt;- enh_intervs %&gt;% mutate(l = end - start) %&gt;% filter(l &lt;= 1e4) enh_cpg_score &lt;- gextract.left_join(&quot;DNMT.ab_score_xgb_plus&quot;, intervals = small_enh, iterator = &quot;intervs.global.seq_CG&quot;, colnames=&quot;score&quot;) %&gt;% as_tibble() 3.5.3.1 Plot distribution of sequence scores inside enhancers enh_cpg_score &lt;- enh_cpg_score %&gt;% add_count(chrom1, start1, end1, name = &quot;n_cpgs&quot;) nrow(enh_cpg_score) ## [1] 1787409 enh_cpg_score %&gt;% distinct(chrom1, start1, end1) %&gt;% distinct() %&gt;% nrow() ## [1] 323431 enh_cpg_score %&gt;% filter(n_cpgs %in% c(2:6)) %&gt;% count(n_cpgs) ## # A tibble: 5 x 2 ## n_cpgs n ## 1 2 120330 ## 2 3 110865 ## 3 4 97400 ## 4 5 85575 ## 5 6 76332 mean_enh_score &lt;- enh_cpg_score %&gt;% group_by(chrom1, start1, end1, n_cpgs) %&gt;% summarise(mean_enh = mean(score), .groups=&quot;drop&quot;) enh_cpg_score_shuff &lt;- enh_cpg_score %&gt;% mutate(score = sample(score)) mean_enh_score_shuff &lt;- enh_cpg_score_shuff %&gt;% group_by(chrom1, start1, end1, n_cpgs) %&gt;% summarise(mean_enh = mean(score), .groups=&quot;drop&quot;) 3.5.4 Figure 7B options(repr.plot.width = 7, repr.plot.height = 5) p &lt;- bind_rows(mean_enh_score %&gt;% mutate(type = &quot;Observed&quot;), mean_enh_score_shuff %&gt;% mutate(type = &quot;Control&quot;)) %&gt;% filter(n_cpgs %in% c(2:6)) %&gt;% mutate(type = factor(type, levels = c(&quot;Observed&quot;, &quot;Control&quot;))) %&gt;% ggplot(aes(x=factor(n_cpgs), y=mean_enh, fill=type)) + geom_boxplot( outlier.size = 0.005, lwd = 0.2) + scale_fill_manual(name=&quot;&quot;, values=c(&quot;Observed&quot; = &quot;darkred&quot;, &quot;Control&quot; = &quot;darkgray&quot;)) + xlab(&quot;# of CpGs in enhancer&quot;) + ylab(&quot;Mean sequence score&quot;) p 3.5.5 Extract proA/proB enhancers We will extract enhancers with 2 or more CpGs which have a sequence score in the top 2% as proB, and the bottom 2% as proA: norm_enh_intervs &lt;- get_all_enhancers() %&gt;% gintervals.normalize(200) norm_enh_cpg_score &lt;- gextract.left_join(&quot;DNMT.ab_score_xgb_plus&quot;, intervals = norm_enh_intervs, iterator = &quot;intervs.global.seq_CG&quot;, colnames=&quot;score&quot;) %&gt;% as_tibble() score_quants &lt;- gquantiles(&quot;DNMT.ab_score_xgb_plus&quot;, c(0.07, 0.93), iterator = 200) quant_A &lt;- score_quants[1] quant_B &lt;- score_quants[2] biased_enh &lt;- norm_enh_cpg_score %&gt;% data.table::as.data.table() %&gt;% group_by(chrom1, start1, end1) %&gt;% filter(n() &gt;= 3) %&gt;% summarise(n_cpgs = n(), type = case_when(all(score &lt;= quant_A) ~ &quot;proA&quot;, all(score &gt;= quant_B) ~ &quot;proB&quot;), .groups = &quot;drop&quot;) %&gt;% filter(!is.na(type)) %&gt;% as_tibble() biased_enh1 &lt;- biased_enh %&gt;% rename(chrom = chrom1, start = start1, end = end1) %&gt;% gintervals.neighbors1(&quot;intervs.global.tss&quot;) %&gt;% select(chrom:type, closest_gene = geneSymbol, gene_distance = dist) %&gt;% filter(gene_distance &lt; -500 | gene_distance &gt; 50) # remove promoters writexl::write_xlsx( list(proA = biased_enh1 %&gt;% filter(type == &quot;proA&quot;) %&gt;% select(chrom:end, n_cpgs, closest_gene, gene_distance) %&gt;% arrange(abs(gene_distance)), proB = biased_enh1 %&gt;% filter(type == &quot;proB&quot;) %&gt;% select(chrom:end, n_cpgs, closest_gene, gene_distance) %&gt;% arrange(abs(gene_distance))), here(&quot;output/Biased-Enhancers.xlsx&quot;)) 3.5.6 No difference in methylation of full enhancers vs shuffled enh_cpg_score1 &lt;- enh_cpg_score %&gt;% mutate(center = start1 + (end1 - start1) / 2, d_center = abs(start - center)) %&gt;% group_by(chrom1, start1, end1) %&gt;% filter(n() &gt;= 5) %&gt;% arrange(chrom1, start1, end1, d_center) %&gt;% dplyr::slice(1:5) %&gt;% ungroup() set.seed(17) obs_df &lt;- enh_cpg_score1 %&gt;% group_by(chrom1, start1, end1) %&gt;% summarise(mean_score = mean(score, na.rm=TRUE), .groups=&quot;drop&quot;) %&gt;% mutate(type = &quot;obs&quot;) shuff_df &lt;- enh_cpg_score1 %&gt;% mutate(score = sample(score)) %&gt;% group_by(chrom1, start1, end1) %&gt;% summarise(mean_score = mean(score, na.rm=TRUE), .groups=&quot;drop&quot;) %&gt;% mutate(type = &quot;shuff&quot;) options(repr.plot.width = 7, repr.plot.height = 7) bind_rows(shuff_df, obs_df) %&gt;% ggplot(aes(x=mean_score, color=type)) + stat_ecdf() ks.test(shuff_df$mean_score, obs_df$mean_score) ## Warning in ks.test.default(shuff_df$mean_score, obs_df$mean_score): p-value will ## be approximate in the presence of ties ## ## Asymptotic two-sample Kolmogorov-Smirnov test ## ## data: shuff_df$mean_score and obs_df$mean_score ## D = 0.0058028, p-value = 0.06908 ## alternative hypothesis: two-sided bind_rows(shuff_df, obs_df) %&gt;% ggplot(aes(x=mean_score, color=type)) + geom_density() map_dfr(c(-0.5, -0.3, -0.2), function(thresh) tibble(thresh = thresh, fdr = (obs_df %&gt;% filter(mean_score &lt;= thresh) %&gt;% nrow()) / (shuff_df %&gt;% filter(mean_score &lt;= thresh) %&gt;% nrow()))) ## # A tibble: 3 x 2 ## thresh fdr ## 1 -0.5 1.0502502 ## 2 -0.3 1.0016682 ## 3 -0.2 0.9960809 3.5.7 Toatal enh methylation prediction enh_intervs &lt;- get_all_enhancers() small_enh &lt;- enh_intervs %&gt;% mutate(l = end - start) %&gt;% filter(l &lt;= 1e4) full_enh_meth &lt;- calc_eb_day0_to_day4_cpg_meth(min_cov = 10, max_na = 5, intervals=small_enh, iterator = small_enh, cache_fn = here(&quot;output/eb_day0_to_day4_full_enh_meth.tsv&quot;)) m_full &lt;- full_enh_meth %&gt;% mutate( mA = psum(d1_3a, d2_3a, d3_3a, d4_3a, na.rm=FALSE), mB = psum(d1_3b, d2_3b, d3_3b, d4_3b, na.rm=FALSE), mwt = psum(d1_wt, d2_wt, d3_wt, d4_wt, na.rm=FALSE), dAB = mA - mB, dB = mB - mwt, dA = mA - mwt ) %&gt;% select(chrom, start, end, mA, mB, mwt, dAB, dB, dA) locus_means &lt;- rowMeans(full_enh_meth %&gt;% select(-(chrom:end)), na.rm=TRUE) locus_sds &lt;- matrixStats::rowSds(full_enh_meth %&gt;% select(-(chrom:end)) %&gt;% as.matrix(), na.rm=TRUE) options(repr.plot.width = 8, repr.plot.height = 4) thresh &lt;- 0.05 p1 &lt;- tibble(m = locus_means) %&gt;% ggplot(aes(x=m)) + geom_density() + geom_vline(xintercept=thresh, linetype=&quot;dashed&quot;, color=&quot;red&quot;) p2 &lt;- tibble(m = locus_means, sd = locus_sds) %&gt;% ggplot(aes(x=m, y=sd)) + geom_point(size=0.01) + geom_vline(xintercept=thresh, linetype=&quot;dashed&quot;, color=&quot;red&quot;) p1 + p2 m_full &lt;- m_full[locus_means &gt;= thresh, ] sum(locus_means &lt; thresh) ## [1] 7901 nrow(m) ## [1] 116117 m_full_dAB &lt;- m_full %&gt;% filter(!is.na(dAB)) %&gt;% select(chrom, start, end, dAB) m_full_cpg_scores &lt;- gextract.left_join(&quot;DNMT.ab_score_xgb_plus&quot;, intervals = m_full_dAB, iterator = &quot;intervs.global.seq_CG&quot;, colnames=&quot;score&quot;) %&gt;% as_tibble() m_full_pred &lt;- m_full_cpg_scores %&gt;% group_by(chrom1, start1, end1) %&gt;% filter(n() &gt;= 2) %&gt;% summarise(score = mean(score), dAB = dAB[1], .groups=&quot;drop&quot;) %&gt;% rename(chrom = chrom1, start = start1, end = end1, pred = score, y = dAB) %&gt;% filter(!is.na(pred), !is.na(y)) bandwidth &lt;- 0.08 point_size &lt;- 0.001 p_full_enh_meth &lt;- tibble(pred = m_full_pred$pred, y = m_full_pred$y) %&gt;% mutate(col = densCols(., bandwidth=bandwidth,colramp=colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )))) %&gt;% ggplot(aes(x=pred, y=y, col=col)) + geom_point(shape=19, size=point_size) + scale_color_identity() + coord_cartesian(xlim = c(-0.6, 0.1), ylim = c(-1, 0.6)) + xlab(&quot;Prediction&quot;) + ylab(&quot;Full enhancer meth. (3a-/-) - (3b-/-)&quot;) + theme(aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) + labs(subtitle = glue(&quot;R^2 = {cor}&quot;, cor = round(cor(m_full_pred$pred, m_full_pred$y)^2, digits=2))) options(repr.plot.width = 5, repr.plot.height=5) p_full_enh_meth &amp; theme_bw() &amp; theme(plot.subtitle = ggtext::element_markdown(), aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) m_full_pred_cg_num &lt;- m_full_cpg_scores %&gt;% group_by(chrom1, start1, end1) %&gt;% mutate(n_cpgs = n()) %&gt;% group_by(chrom1, start1, end1, n_cpgs) %&gt;% summarise(score = mean(score), dAB = dAB[1], .groups=&quot;drop&quot;) %&gt;% rename(chrom = chrom1, start = start1, end = end1, pred = score, y = dAB) %&gt;% filter(!is.na(pred), !is.na(y)) %&gt;% group_by(n_cpgs) %&gt;% summarise(rsq = cor(pred, y)^2) 3.5.8 Figure 7C p &lt;- m_full_pred_cg_num %&gt;% filter(n_cpgs &gt;= 1, n_cpgs &lt;= 5) %&gt;% ggplot(aes(x=factor(n_cpgs), y=rsq)) + geom_col() + xlab(&quot;# of CpGs in enhancer&quot;) + ylab(expression (R^2)) p df_full &lt;- full_enh_meth %&gt;% select(chrom, start, end) for (d in 0:4){ df_full[[paste0(&quot;d&quot;, d)]] &lt;- full_enh_meth[[glue(&quot;d{d}_3a&quot;)]] - full_enh_meth[[glue(&quot;d{d}_3b&quot;)]] } df_full &lt;- df_full %&gt;% gather(&quot;day&quot;, &quot;diff&quot;, -(chrom:end)) %&gt;% mutate(day = gsub(&quot;d&quot;, &quot;Day &quot;, day)) options(repr.plot.width=5, repr.plot.height=12) p &lt;- df_full %&gt;% ggplot(aes(x=diff, fill=stat(abs(x)), y=1)) + ggridges::geom_density_ridges_gradient(lwd = 0.5) + scale_fill_stepsn(colors=c(&quot;darkgray&quot;, &quot;darkred&quot;), breaks = c(0, 0.2, 1)) + guides(fill=&quot;none&quot;) + ylab(&quot;Density&quot;) + xlab(&quot;Meth (3a-/-) - (3b-/-)&quot;) + coord_cartesian(xlim = c(-0.5, 0.5)) + facet_grid(day~., scales=&quot;free_y&quot;) + theme_arial(7) + theme(aspect.ratio=0.6) + vertical_labs() p ## Picking joint bandwidth of 0.00776 ## Picking joint bandwidth of 0.00824 ## Picking joint bandwidth of 0.0118 ## Picking joint bandwidth of 0.0148 ## Picking joint bandwidth of 0.00856 "],["validation-from-external-data.html", "4 Validation from external data", " 4 Validation from external data 4.0.1 initialize definitions suppressMessages(suppressWarnings(source(here::here(&quot;code/init.R&quot;)))) 4.0.2 Get A/B meth data m &lt;- fread(here(&quot;output/ebd_day1_to_day4_cpg_meth_mat.tsv&quot;)) %&gt;% as_tibble() %&gt;% filter(!is.na(dAB)) m &lt;- gextract.left_join(&quot;DNMT.ab_score_xgb_plus&quot;, intervals = m %&gt;% select(chrom, start, end, dAB), iterator = m, colnames=&quot;score&quot;) %&gt;% select(-(chrom1:end1)) %&gt;% select(chrom, start, end, dAB, score) %&gt;% as_tibble() 4.0.3 Get Meissner data md &lt;- tribble(~track_name, ~sort, ~num, &quot;Meissner_Nature_2017.Epi_Dnmt3a_1&quot;, &quot;ko3a&quot;, 1, &quot;Meissner_Nature_2017.Epi_Dnmt3a_2&quot;, &quot;ko3a&quot;, 2, &quot;Meissner_Nature_2017.Epi_Dnmt3a_4&quot;, &quot;ko3a&quot;, 4, &quot;Meissner_Nature_2017.Epi_Dnmt3a_5&quot;, &quot;ko3a&quot;, 5, &quot;Meissner_Nature_2017.Epi_Dnmt3a_6&quot;, &quot;ko3a&quot;, 6, &quot;Meissner_Nature_2017.Epi_Dnmt3b_1&quot;, &quot;ko3b&quot;, 1, &quot;Meissner_Nature_2017.Epi_Dnmt3b_2&quot;, &quot;ko3b&quot;, 2, &quot;Meissner_Nature_2017.Epi_Dnmt3b_3&quot;, &quot;ko3b&quot;, 3, &quot;Meissner_Nature_2017.Epi_Dnmt3b_4&quot;, &quot;ko3b&quot;, 4, &quot;Meissner_Nature_2017.Epi_Dnmt3b_5&quot;, &quot;ko3b&quot;, 5, &quot;Meissner_Nature_2017.Epi_Dnmt3b_6&quot;, &quot;ko3b&quot;, 6, &quot;Meissner_Nature_2017.Epi_WT_4&quot;, &quot;wt&quot;, 4, &quot;Meissner_Nature_2017.Epi_WT_5&quot;, &quot;wt&quot;, 5, &quot;Meissner_Nature_2017.Epi_WT_6&quot;, &quot;wt&quot;, 6, &quot;Meissner_Nature_2017.Epi_WT_7&quot;, &quot;wt&quot;, 7) %&gt;% mutate(name = paste0(sort, &quot;_&quot;, num)) m_all_epi6 &lt;- gextract_meth(tracks = md$track_name, names=md$name, intervals=m %&gt;% select(chrom, start, end), extract_meth_calls = TRUE, iterator = m %&gt;% select(chrom, start, end)) %cache_df% here(&quot;output/meissner_epi_cpg_meth.tsv&quot;) %&gt;% as_tibble() min_cov &lt;- 10 m_epi6 &lt;- m_all_epi6 %&gt;% select(chrom, start, end) for (g in unique(md$sort)){ nms &lt;- md %&gt;% filter(sort == g) %&gt;% pull(name) cov_col &lt;- paste0(g, &quot;.cov&quot;) meth_col &lt;- paste0(g, &quot;.meth&quot;) m_epi6[[cov_col]] &lt;- rowSums(m_all_epi6[, paste0(nms, &quot;.cov&quot;)], na.rm=TRUE) m_epi6[[meth_col]] &lt;- rowSums(m_all_epi6[, paste0(nms, &quot;.meth&quot;)], na.rm=TRUE) m_epi6[[g]] &lt;- ifelse(m_epi6[[cov_col]] &gt;= min_cov, m_epi6[[meth_col]] / m_epi6[[cov_col]], NA) } m_epi6 &lt;- m_epi6 %&gt;% select(-ends_with(&quot;.meth&quot;), -ends_with(&quot;.cov&quot;)) %cache_df% here(&quot;output/meissner_epi_cpg_meth_sum.tsv&quot;) df &lt;- m_epi6 %&gt;% mutate(dAB_epi6 = ko3a - ko3b) %&gt;% filter(!is.na(dAB_epi6)) %&gt;% select(chrom, start, end, dAB_epi6) %&gt;% inner_join(m) %&gt;% filter(!is.na(dAB)) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) dim(df) ## [1] 13388 6 4.0.4 Figure 4H bandwidth &lt;- 0.06 point_size = 0.1 p_epi6_meth &lt;- df %&gt;% select(dAB, dAB_epi6) %&gt;% mutate(col = densCols(., bandwidth=bandwidth,colramp=colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )))) %&gt;% ggplot(aes(x=dAB, y=dAB_epi6, col=col)) + geom_point(shape=19, size=point_size) + scale_color_identity() + coord_cartesian(xlim = c(-1.4, 1.1), ylim = c(-0.4, 0.7)) + xlab(&quot;EB d1-4 (3a-/-) â (3b-/-)&quot;) + ylab(&quot;Epi (3a-/-) â (3b-/-)&quot;) + theme(aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) + labs(subtitle = glue(&quot;r = {cor}&quot;, cor = round(cor(df$dAB_epi6, df$dAB), digits=2))) p_epi6_meth p_epi6_score &lt;- df %&gt;% select(score, dAB_epi6) %&gt;% mutate(col = densCols(., bandwidth=bandwidth,colramp=colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )))) %&gt;% ggplot(aes(x=score, y=dAB_epi6, col=col)) + geom_point(shape=19, size=point_size) + scale_color_identity() + coord_cartesian(xlim = c(-1, 0.6), ylim = c(-0.4, 0.6)) + xlab(&quot;Dinucleotide combined model&quot;) + ylab(&quot;Epi (3a-/-) â (3b-/-)&quot;) + theme(aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) + labs(subtitle = glue(&quot;r = {cor}&quot;, cor = round(cor(df$dAB_epi6, df$score), digits=2))) round(cor(df$dAB_epi6, df$score), digits=2) ## [1] 0.63 p_epi6_score weber_tracks &lt;- gtrack.ls(&quot;Web.+8_5.+avg&quot;) weber_nms &lt;- gsub(&quot;Weber_Genome_Biol_2014.&quot;,&quot;&quot;, weber_tracks) weber_capt &lt;- gextract.left_join(weber_tracks, intervals=m, iterator=m, colnames=weber_nms) %&gt;% as_tibble() df_weber &lt;- weber_capt %&gt;% mutate(ko3a = pmean(E8_5_3AKO_Rep1.avg, E8_5_3AKO_Rep2.avg, na.rm=TRUE), ko3b = pmean(E8_5_3BKO_Rep1.avg, E8_5_3BKO_Rep2.avg, na.rm=TRUE)) %&gt;% mutate(dAB_e8.5 = ko3a - ko3b) %&gt;% filter(!is.na(dAB_e8.5), !is.na(dAB)) %&gt;% select(chrom, start, end, dAB_e8.5, score, dAB) 4.0.5 Figure 4I bandwidth &lt;- 0.06 point_size = 0.1 p_e8.5_meth &lt;- df_weber %&gt;% select(dAB, dAB_e8.5) %&gt;% mutate(col = densCols(., bandwidth=bandwidth,colramp=colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )))) %&gt;% ggplot(aes(x=dAB, y=dAB_e8.5, col=col)) + geom_point(shape=19, size=point_size) + scale_color_identity() + coord_cartesian(xlim = c(-1.4, 1.1), ylim = c(-0.4, 0.7)) + xlab(&quot;EB d1-4 (3a-/-) â (3b-/-)&quot;) + ylab(&quot;E8.5 (3a-/-) â (3b-/-)&quot;) + theme(aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) + labs(subtitle = glue(&quot;r = {cor}&quot;, cor = round(cor(df_weber$dAB_e8.5, df_weber$dAB), digits=2))) p_e8.5_meth p_e8.5_score &lt;- df_weber %&gt;% select(score, dAB_e8.5) %&gt;% mutate(col = densCols(., bandwidth=bandwidth,colramp=colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )))) %&gt;% ggplot(aes(x=score, y=dAB_e8.5, col=col)) + geom_point(shape=19, size=point_size) + scale_color_identity() + coord_cartesian(xlim = c(-1, 0.5), ylim = c(-0.25, 0.7)) + xlab(&quot;Dinucleotide combined model&quot;) + ylab(&quot;E8.5 (3a-/-) â (3b-/-)&quot;) + theme(aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) + labs(subtitle = glue(&quot;r = {cor}&quot;, cor = round(cor(df_weber$dAB_e8.5, df_weber$score), digits=2))) p_e8.5_score "],["mallona-et-al.-nar-2020.html", "5 Mallona et al.Â NAR 2020 5.1 Model ES", " 5 Mallona et al.Â NAR 2020 Data from: https://doi.org/10.1093/nar/gkaa1168 5.0.1 initialize definitions suppressMessages(suppressWarnings(source(here::here(&quot;code/init.R&quot;)))) md_baubec &lt;- tibble::tribble( ~name, ~track, &quot;active_3a&quot;, &quot;Mallona_NAR_2020.HA36_TKO_DNMT3A2_r2&quot;, &quot;active_3b&quot;, &quot;Mallona_NAR_2020.HA36_TKO_DNMT3B1_r2&quot; ) md_baubec ## # A tibble: 2 x 2 ## name track ## 1 active_3a Mallona_NAR_2020.HA36_TKO_DNMT3A2_r2 ## 2 active_3b Mallona_NAR_2020.HA36_TKO_DNMT3B1_r2 baubec_meth_all &lt;- misha.ext::gextract_meth(tracks = md_baubec$track, names = md_baubec$name, extract_meth_calls = TRUE) %cache_df% here(&quot;output/baubec_meth_all.tsv&quot;) %&gt;% as_tibble() baubec_meth_plus &lt;- misha.ext::gextract_meth(tracks = paste0(md_baubec$track, &quot;_plus&quot;), names = md_baubec$name, extract_meth_calls = TRUE) %cache_df% here(&quot;output/baubec_meth_plus.tsv&quot;) %&gt;% as_tibble() baubec_meth_minus &lt;- misha.ext::gextract_meth(tracks = paste0(md_baubec$track, &quot;_minus&quot;), names = md_baubec$name, extract_meth_calls = TRUE) %cache_df% here(&quot;output/baubec_meth_minus.tsv&quot;) %&gt;% as_tibble() baubec_meth_all %&gt;% filter(active_3a.cov &gt; 0 | active_3b.cov &gt; 0) %&gt;% nrow() ## [1] 16082106 baubec_meth_plus %&gt;% filter(active_3a.cov &gt; 0 | active_3b.cov &gt; 0) %&gt;% nrow() ## [1] 12036497 baubec_meth_minus %&gt;% filter(active_3a.cov &gt; 0 | active_3b.cov &gt; 0) %&gt;% nrow() ## [1] 12028654 summary(baubec_meth_all$active_3a.cov[baubec_meth_all$active_3a.cov &gt; 0]) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 10.0 11.0 14.0 16.5 18.0 1972.0 scales::comma(sum(baubec_meth_all$active_3a.cov &gt; 0)) ## [1] &quot;2,298,609&quot; summary(baubec_meth_plus$active_3a.cov[baubec_meth_plus$active_3a.cov &gt; 0]) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 10.00 11.00 14.00 16.36 18.00 1947.00 scales::comma(sum(baubec_meth_plus$active_3a.cov &gt; 0)) ## [1] &quot;1,151,583&quot; summary(baubec_meth_minus$active_3a.cov[baubec_meth_minus$active_3a.cov &gt; 0]) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 10.00 11.00 14.00 16.58 18.00 1904.00 scales::comma(sum(baubec_meth_minus$active_3a.cov &gt; 0)) ## [1] &quot;1,152,232&quot; summary(baubec_meth_all$active_3b.cov[baubec_meth_all$active_3b.cov &gt; 0]) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.000 2.000 4.000 4.291 6.000 190.000 scales::comma(sum(baubec_meth_all$active_3b.cov &gt; 0)) ## [1] &quot;15,928,534&quot; summary(baubec_meth_plus$active_3b.cov[baubec_meth_plus$active_3b.cov &gt; 0]) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.000 1.000 2.000 2.861 4.000 99.000 scales::comma(sum(baubec_meth_plus$active_3b.cov &gt; 0)) ## [1] &quot;11,944,096&quot; summary(baubec_meth_minus$active_3b.cov[baubec_meth_minus$active_3b.cov &gt; 0]) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.000 1.000 2.000 2.864 4.000 101.000 scales::comma(sum(baubec_meth_minus$active_3b.cov &gt; 0)) ## [1] &quot;11,936,048&quot; baubec_meth_cov &lt;- baubec_meth_all %&gt;% filter(active_3a.cov &gt;= 10, active_3b.cov &gt;= 10) nrow(baubec_meth_cov) ## [1] 306664 baubec_meth_plus_cov &lt;- baubec_meth_plus %&gt;% filter(active_3a.cov &gt;= 10, active_3b.cov &gt;= 10) nrow(baubec_meth_plus_cov) ## [1] 93967 baubec_meth_minus_cov &lt;- baubec_meth_minus %&gt;% filter(active_3a.cov &gt;= 10, active_3b.cov &gt;= 10) nrow(baubec_meth_minus_cov) ## [1] 95747 esc_wgbs &lt;- misha.ext::gextract_meth(&quot;schuebler.wgbs.esc.sum&quot;, intervals=gintervals.all(), names=&quot;esc&quot;) %&gt;% filter(esc.cov &gt;= 7) %&gt;% select(-intervalID) %cache_df% here(&quot;data/schuebler_esc_wgbs.tsv&quot;) %&gt;% as_tibble() filter_low_esc_meth &lt;- function(df, esc_wgbs){ df %&gt;% inner_join(esc_wgbs %&gt;% select(chrom, start, end, esc) %&gt;% filter(esc &gt;= 0.05)) } 5.1 Model ES m_bau_plus &lt;- baubec_meth_plus_cov %&gt;% filter_low_esc_meth(esc_wgbs) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) m_bau_minus &lt;- baubec_meth_minus_cov %&gt;% filter_low_esc_meth(esc_wgbs) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) scales::comma(nrow(m_bau_plus)) ## [1] &quot;48,354&quot; scales::comma(nrow(m_bau_minus)) ## [1] &quot;49,215&quot; intervs_all_plus &lt;- m_bau_plus %&gt;% select(chrom, start, end) intervs_all_minus &lt;- m_bau_minus %&gt;% select(chrom, start, end) seq_df_plus &lt;- get_seq_df(intervs_all_plus, flank_bp = 5) seq_df_minus &lt;- get_seq_df(intervs_all_minus, strand = -1, flank_bp = 5) seq_df_wide_plus &lt;- seq_df_to_wide(seq_df_plus, flank_bp = 5) seq_df_wide_minus &lt;- seq_df_to_wide(seq_df_minus, flank_bp = 5) head(m_bau_plus) ## # A tibble: 6 x 11 ## chrom start end active_3a active_3b active_3a.cov active_3b.cov ## 1 chr1 3322345 3322346 0.0000000 0.0 13 10 ## 2 chr1 3574384 3574385 0.1764706 0.1 17 10 ## 3 chr1 3574389 3574390 0.2352941 0.1 17 10 ## 4 chr1 3574421 3574422 0.1904762 0.0 21 10 ## 5 chr1 3698778 3698779 0.0000000 0.0 15 11 ## 6 chr1 3708906 3708907 0.0000000 0.0 29 11 ## active_3a.meth active_3b.meth intervalID esc ## 1 0 0 1 0.5714286 ## 2 3 1 1 0.9000000 ## 3 4 1 1 0.8333333 ## 4 4 0 1 0.9285714 ## 5 0 0 1 1.0000000 ## 6 0 0 1 0.8333333 model_ab_bau_plus_A &lt;- gen_seq_model(seq_df_wide_plus, m_bau_plus, active_3a) %cache_rds% here(&quot;output/baubec_plus_a_dinuc_model_5bp.rds&quot;) model_ab_bau_plus_B &lt;- gen_seq_model(seq_df_wide_plus, m_bau_plus, active_3b) %cache_rds% here(&quot;output/baubec_plus_b_dinuc_model_5bp.rds&quot;) model_ab_bau_minus_A &lt;- gen_seq_model(seq_df_wide_minus, m_bau_minus, active_3a) %cache_rds% here(&quot;output/baubec_plus_a_dinuc_model_5bp.rds&quot;) model_ab_bau_minus_B &lt;- gen_seq_model(seq_df_wide_minus, m_bau_minus, active_3b) %cache_rds% here(&quot;output/baubec_plus_b_dinuc_model_5bp.rds&quot;) options(repr.plot.width = 12, repr.plot.height = 6) bandwidth &lt;- 0.08 point_size &lt;- 0.001 p_a &lt;- tibble(pred = model_ab_bau_plus_A$pred, y = model_ab_bau_plus_A$y) %&gt;% mutate(col = densCols(., bandwidth=0.06,colramp=colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )))) %&gt;% ggplot(aes(x=pred, y=y, col=col)) + geom_point(shape=19, size=point_size) + scale_color_identity() + xlab(&quot;Dinucleotide combined model&quot;) + ylab(&quot;Meth (3a-/-)&quot;) + theme(aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) + labs(subtitle = glue(&quot;R^2 = {cor}&quot;, cor = round(cor(model_ab_bau_plus_A$pred, model_ab_bau_plus_A$y)^2, digits=2))) + theme(plot.subtitle = ggtext::element_markdown()) p_b &lt;- tibble(pred = model_ab_bau_plus_B$pred, y = model_ab_bau_plus_B$y) %&gt;% mutate(col = densCols(., bandwidth=0.06,colramp=colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )))) %&gt;% ggplot(aes(x=pred, y=y, col=col)) + geom_point(shape=19, size=point_size) + scale_color_identity() + xlab(&quot;Dinucleotide combined model&quot;) + ylab(&quot;Meth (3b-/-)&quot;) + theme(aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) + labs(subtitle = glue(&quot;R^2 = {cor}&quot;, cor = round(cor(model_ab_bau_plus_B$pred, model_ab_bau_plus_B$y)^2, digits=2))) + theme(plot.subtitle = ggtext::element_markdown()) p_a + p_b coef_df_A &lt;- get_coef_df(model_ab_bau_plus_A) ## Loading required package: Matrix ## ## Attaching package: &#39;Matrix&#39; ## The following objects are masked from &#39;package:tidyr&#39;: ## ## expand, pack, unpack ## Loaded glmnet 4.1-4 coef_df_B &lt;- get_coef_df(model_ab_bau_plus_B) 5.1.1 Figure 5B,C options(repr.plot.width = 12, repr.plot.height = 6) p_a &lt;- coef_df_A %&gt;% ggplot(aes(x=pos, y=dinuc, fill=coefficient)) + geom_tile() + scale_fill_gradient2(low = &quot;darkblue&quot;, high = &quot;darkred&quot;, mid = &quot;white&quot;, midpoint = 0, na.value=&quot;white&quot;) + theme_minimal() + ylab(&quot;Dinucleotide&quot;) + xlab(&quot;Position&quot;) + ggtitle(&quot;A&quot;) p_b &lt;- coef_df_B %&gt;% ggplot(aes(x=pos, y=dinuc, fill=coefficient)) + geom_tile() + scale_fill_gradient2(low = &quot;darkblue&quot;, high = &quot;darkred&quot;, mid = &quot;white&quot;, midpoint = 0, na.value=&quot;white&quot;) + theme_minimal() + ylab(&quot;Dinucleotide&quot;) + xlab(&quot;Position&quot;) + ggtitle(&quot;B&quot;) p_a + p_b model_ab &lt;- readr::read_rds(here(&quot;output/ab_dinuc_model_5bp.rds&quot;)) model_a &lt;- readr::read_rds(here(&quot;output/a_dinuc_model_5bp.rds&quot;)) model_b &lt;- readr::read_rds(here(&quot;output/b_dinuc_model_5bp.rds&quot;)) all_cpgs &lt;- gintervals.load(&quot;intervs.global.seq_CG&quot;) intercept_A &lt;- coef(model_ab_bau_plus_A$fit_cv, s = &quot;lambda.min&quot;)[1, ] intercept_B &lt;- coef(model_ab_bau_plus_B$fit_cv, s = &quot;lambda.min&quot;)[1, ] coef_mat_A &lt;- coef_df_to_matrix(coef_df_A %&gt;% select(pos, dinuc, coefficient), model_ab, intercept=intercept_A) %cache_rds% here(&quot;output/coef_A_mat.rds&quot;) coef_mat_B &lt;- coef_df_to_matrix(coef_df_B %&gt;% select(pos, dinuc, coefficient), model_ab, intercept=intercept_B) %cache_rds% here(&quot;output/coef_B_mat.rds&quot;) res &lt;- compute_interval_model_mat_score_parallel(all_cpgs, model_ab, coef_mat_A, coef_mat_A, coef_mat_B) %cache_df% here(&quot;output/baubec_model_vs_ours_not_sym.tsv&quot;) %&gt;% as_tibble() 5.1.2 Figure 5D a_limits &lt;- c(-0.1,0.5) a_bins &lt;- seq(-0.1, 0.5, length.out = 30) b_limits &lt;- c(-0.05,0.2) b_bins &lt;- seq(-0.05, 0.2, length.out = 30) cols &lt;- colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot;)) options(repr.plot.width = 7, repr.plot.height = 7) smoothScatter( res$score_a_plus, res$score_a_minus, xlab=&quot;+&quot;, ylab = &quot;-&quot;, xlim = a_limits, ylim = a_limits, colramp = cols) abline(v = a_bins, h = a_bins, col=alpha(rgb(0,0,0), 0.1)) abline(a = 0, b = 1, lty=5) 5.1.3 Figure 5E options(repr.plot.width = 7, repr.plot.height = 7) smoothScatter( res$score_b_plus, res$score_b_minus, xlab=&quot;+&quot;, ylab = &quot;-&quot;, xlim = b_limits, ylim = b_limits, colramp = cols) abline(v = b_bins, h = b_bins, col=alpha(rgb(0,0,0), 0.1)) abline(a = 0, b = 1, lty=5) df &lt;- { df_wt &lt;- tracks_key %&gt;% filter(day == &quot;d5&quot;) %&gt;% filter(line == &quot;wt&quot;) df_ko3a &lt;- tracks_key %&gt;% filter(day == &quot;d5&quot;) %&gt;% filter(line == &quot;ko3a&quot;) df_ko3b &lt;- tracks_key %&gt;% filter(day == &quot;d5&quot;) %&gt;% filter(line == &quot;ko3b&quot;) df_ab_bulk &lt;- extract_meth_annot(c( df_wt$track_name, df_ko3a$track_name, df_ko3b$track_name), names = c(df_wt$name, df_ko3a$name, df_ko3b$name), d_expand = 250, extract_meth_calls = TRUE) df &lt;- df_ab_bulk %&gt;% select(chrom, start, end, d_exon:gc_cont) df$wt.meth &lt;- rowSums(df_ab_bulk[, paste0(df_wt$name, &quot;.meth&quot;)], na.rm=TRUE) df$wt.cov &lt;- rowSums(df_ab_bulk[, paste0(df_wt$name, &quot;.cov&quot;)], na.rm=TRUE) df$ko3a.meth &lt;- rowSums(df_ab_bulk[, paste0(df_ko3a$name, &quot;.meth&quot;)], na.rm=TRUE) df$ko3a.cov &lt;- rowSums(df_ab_bulk[, paste0(df_ko3a$name, &quot;.cov&quot;)], na.rm=TRUE) df$ko3b.meth &lt;- rowSums(df_ab_bulk[, paste0(df_ko3b$name, &quot;.meth&quot;)], na.rm=TRUE) df$ko3b.cov &lt;- rowSums(df_ab_bulk[, paste0(df_ko3b$name, &quot;.cov&quot;)], na.rm=TRUE) df$ko3a &lt;- df$ko3a.meth / df$ko3a.cov df$wt &lt;- df$wt.meth / df$wt.cov df$ko3b &lt;- df$ko3b.meth / df$ko3b.cov df } %cache_df% here(&quot;output/ab_diff_d5_bulk.tsv&quot;) %&gt;% as_tibble() We take only regions that are well covered and add a diff column with 3a(-/-) - 3b(-/-) min_cov &lt;- 50 df_diff &lt;- { df_diff &lt;- df %&gt;% filter(ko3a.cov &gt;= min_cov, ko3b.cov &gt;= min_cov, wt.cov &gt;= min_cov) %&gt;% mutate(diff = ko3a - ko3b) df_diff &lt;- df_diff %&gt;% gintervals.neighbors1(&quot;intervs.global.tss&quot;) %&gt;% select(chrom:diff, geneSymbol, dist) df_diff } %cache_df% here(&quot;output/ab_diff_d5_bulk_diff.tsv&quot;) %&gt;% as_tibble() head(df_diff) ## # A tibble: 6 x 23 ## chrom start end d_exon d_tss tor ab_score a_score ## 1 chr1 3137716 3137717 58268 67996 -0.807965 -0.06375566 -0.0563031 ## 2 chr1 3137749 3137750 58235 67963 -0.807965 0.35113215 0.1569280 ## 3 chr1 3137829 3137830 58155 67883 -0.807965 -0.84893745 -0.5477075 ## 4 chr1 3137834 3137835 58150 67878 -0.807965 -0.15073226 -0.1115560 ## 5 chr1 3137836 3137837 58148 67876 -0.807965 -0.32485920 -0.2463233 ## 6 chr1 3137840 3137841 58144 67872 -0.807965 -0.10740878 0.0732030 ## b_score cg_cont gc_cont wt.meth wt.cov ko3a.meth ko3a.cov ko3b.meth ## 1 -0.07885952 0.03636364 0.5036364 84 90 88 95 50 ## 2 -0.24173479 0.03636364 0.5036364 90 96 92 100 54 ## 3 0.04839351 0.03272727 0.5054545 93 100 97 105 55 ## 4 -0.05077374 0.03272727 0.5054545 93 100 97 105 55 ## 5 0.07614822 0.03272727 0.5054545 93 100 97 105 55 ## 6 -0.11832523 0.03272727 0.5054545 93 100 97 105 55 ## ko3b.cov ko3a wt ko3b diff geneSymbol dist ## 1 58 0.9263158 0.9333333 0.8620690 0.06424682 mKIAA1889 67995 ## 2 62 0.9200000 0.9375000 0.8709677 0.04903226 mKIAA1889 67962 ## 3 61 0.9238095 0.9300000 0.9016393 0.02217018 mKIAA1889 67882 ## 4 61 0.9238095 0.9300000 0.9016393 0.02217018 mKIAA1889 67877 ## 5 61 0.9238095 0.9300000 0.9016393 0.02217018 mKIAA1889 67875 ## 6 61 0.9238095 0.9300000 0.9016393 0.02217018 mKIAA1889 67871 meth_df_meeb &lt;- df_diff %&gt;% left_join(res) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) meth_df_meeb &lt;- meth_df_meeb %&gt;% rename(mA = ko3a, mB = ko3b) meth_df_meeb_f &lt;- meth_df_meeb %&gt;% filter(abs(d_tss) &gt;= 2000) %&gt;% filter_low_esc_meth(esc_wgbs) %&gt;% gintervals.neighbors1(get_all_enhancers()) %&gt;% filter(dist != 0) %&gt;% select(-(chrom1:end1)) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) dim(meth_df_meeb_f) ## [1] 947724 35 meth_df_meeb_f %&gt;% colnames() ## [1] &quot;chrom&quot; &quot;start&quot; &quot;end&quot; ## [4] &quot;d_exon&quot; &quot;d_tss&quot; &quot;tor&quot; ## [7] &quot;ab_score&quot; &quot;a_score&quot; &quot;b_score&quot; ## [10] &quot;cg_cont&quot; &quot;gc_cont&quot; &quot;wt.meth&quot; ## [13] &quot;wt.cov&quot; &quot;ko3a.meth&quot; &quot;ko3a.cov&quot; ## [16] &quot;ko3b.meth&quot; &quot;ko3b.cov&quot; &quot;mA&quot; ## [19] &quot;wt&quot; &quot;mB&quot; &quot;diff&quot; ## [22] &quot;geneSymbol&quot; &quot;dist&quot; &quot;score_plus&quot; ## [25] &quot;score_minus&quot; &quot;score_a_plus&quot; &quot;score_a_minus&quot; ## [28] &quot;score_b_plus&quot; &quot;score_b_minus&quot; &quot;score_model_plus&quot; ## [31] &quot;score_model_minus&quot; &quot;score_orig_plus&quot; &quot;score_orig_minus&quot; ## [34] &quot;esc&quot; &quot;dist1&quot; 5.1.4 Figure 5F,G meth_df_meeb_d4 &lt;- calc_eb_day0_to_day4_cpg_meth(min_cov = 10, max_na = 5) %&gt;% rename(mA = d4_3a, mB = d4_3b) %&gt;% inner_join(fread(here(&quot;output/ebd_day1_to_day4_cpg_meth_mat.tsv&quot;)) %&gt;% select(chrom, start, end)) %&gt;% left_join(res) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) df_A &lt;- meth_df_meeb_d4 %&gt;% mutate(score_plus = cut(score_a_plus, a_bins)) %&gt;% mutate(score_minus = cut(score_a_minus, a_bins)) %&gt;% group_by(score_plus, score_minus) %&gt;% summarise(mB = mean(mB, na.rm=TRUE)) %&gt;% filter(!is.na(score_plus), !is.na(score_minus)) %&gt;% tidyr::complete(fill=list(mB = NA)) %&gt;% arrange(score_plus) %&gt;% group_by(score_minus) %&gt;% mutate(mB = zoo::rollapply(mB, FUN = function(x) mean(x, na.rm=TRUE), width=4, fill=NA)) %&gt;% arrange(score_minus) %&gt;% group_by(score_plus) %&gt;% mutate(mB = zoo::rollapply(mB, FUN = function(x) mean(x, na.rm=TRUE), width=4, fill=NA)) %&gt;% na.omit() df_B &lt;- meth_df_meeb_d4 %&gt;% mutate(score_plus = cut(score_b_plus, b_bins)) %&gt;% mutate(score_minus = cut(score_b_minus, b_bins)) %&gt;% group_by(score_plus, score_minus) %&gt;% summarise(mA = mean(mA, na.rm=TRUE)) %&gt;% filter(!is.na(score_plus), !is.na(score_minus)) %&gt;% tidyr::complete(fill=list(mA = NA)) %&gt;% arrange(score_plus) %&gt;% group_by(score_minus) %&gt;% mutate(mA = zoo::rollapply(mA, FUN = function(x) mean(x, na.rm=TRUE), width=4, fill=NA)) %&gt;% arrange(score_minus) %&gt;% group_by(score_plus) %&gt;% mutate(mA = zoo::rollapply(mA, FUN = function(x) mean(x, na.rm=TRUE), width=4, fill=NA)) %&gt;% na.omit() limits &lt;- c(min(df_A$mB, df_B$mA), max(df_A$mB, df_B$mA)) limits ## [1] 0.4130196 0.9259376 options(repr.plot.width = 7, repr.plot.height = 7) colors &lt;- viridis::viridis(30, option = &quot;A&quot;) p_A &lt;- df_A %&gt;% ggplot(aes(x=score_plus, y=score_minus, fill=mB)) + geom_tile() + scale_fill_gradientn(colors=colors, limits=limits) + vertical_labs() + scale_x_discrete(drop=FALSE) + scale_y_discrete(drop=FALSE) + xlab(&quot;+ strand A model&quot;) + ylab(&quot;- strand A model&quot;) + ggtitle(&quot;MEEB 3B-/- methylation day 4&quot;) + theme(axis.ticks.x = element_blank(), axis.text.x = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank()) p_B &lt;- df_B %&gt;% ggplot(aes(x=score_plus, y=score_minus, fill=mA)) + geom_tile() + scale_fill_gradientn(colors=colors, limits=limits) + vertical_labs() + scale_x_discrete(drop=FALSE) + scale_y_discrete(drop=FALSE) + xlab(&quot;+ strand B model&quot;) + ylab(&quot;- strand B model&quot;) + ggtitle(&quot;MEEB 3A-/- methylation Day 4&quot;) + theme(axis.ticks.x = element_blank(), axis.text.x = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank()) p_A p_B 5.1.4.1 Predict MEEB using strands meth_df_meeb &lt;- fread(here(&quot;output/ebd_day1_to_day4_cpg_meth_mat.tsv&quot;)) %&gt;% left_join(res) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) feats_mat_comb_df &lt;- meth_df_meeb %&gt;% inner_join(meth_df_meeb_d4 %&gt;% select(chrom, start, end)) %&gt;% mutate(score_max_a = pmax(score_a_plus, score_a_minus)) %&gt;% mutate(score_max_b = pmax(score_b_plus, score_b_minus)) %&gt;% select(chrom, start, end, score_a_plus, score_a_minus, score_b_plus, score_b_minus, score_max_a, score_max_b, dAB) %&gt;% filter(!is.na(dAB)) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) feats_mat_comb &lt;- feats_mat_comb_df %&gt;% select(-(chrom:end)) %&gt;% as.matrix() feats_mat_comb %&gt;% dim ## [1] 80228 7 library(xgboost) ## ## Attaching package: &#39;xgboost&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## slice dtrain &lt;- xgb.DMatrix(feats_mat_comb[, -7], label=feats_mat_comb[, 7]) xgb_params &lt;- readr::read_rds(here(&quot;data/xgb_params.rds&quot;)) xgbcv &lt;- xgb.cv(params = xgb_params$params, data = dtrain, nrounds = xgb_params$nrounds, nfold = 10, prediction = TRUE) ## [1] train-rmse:0.914976+0.001127 test-rmse:0.914986+0.003794 ## [2] train-rmse:0.881840+0.001363 test-rmse:0.881918+0.003766 ## [3] train-rmse:0.851517+0.002020 test-rmse:0.851576+0.003881 ## [4] train-rmse:0.823455+0.002133 test-rmse:0.823559+0.003889 ## [5] train-rmse:0.796019+0.002401 test-rmse:0.796166+0.004076 ## [6] train-rmse:0.770361+0.002147 test-rmse:0.770520+0.003819 ## [7] train-rmse:0.746327+0.002155 test-rmse:0.746500+0.003163 ## [8] train-rmse:0.724070+0.002124 test-rmse:0.724263+0.003047 ## [9] train-rmse:0.702849+0.002098 test-rmse:0.703063+0.003522 ## [10] train-rmse:0.683496+0.002147 test-rmse:0.683757+0.003792 ## [11] train-rmse:0.665380+0.002060 test-rmse:0.665712+0.003957 ## [12] train-rmse:0.648379+0.002221 test-rmse:0.648755+0.003472 ## [13] train-rmse:0.632596+0.002191 test-rmse:0.633018+0.003580 ## [14] train-rmse:0.617532+0.001933 test-rmse:0.618003+0.003785 ## [15] train-rmse:0.603758+0.002239 test-rmse:0.604296+0.003706 ## [16] train-rmse:0.590898+0.002381 test-rmse:0.591473+0.004014 ## [17] train-rmse:0.579237+0.002366 test-rmse:0.579846+0.004148 ## [18] train-rmse:0.568065+0.002676 test-rmse:0.568709+0.004518 ## [19] train-rmse:0.557567+0.002579 test-rmse:0.558257+0.004369 ## [20] train-rmse:0.547671+0.002278 test-rmse:0.548402+0.004297 ## [21] train-rmse:0.538665+0.002351 test-rmse:0.539429+0.003962 ## [22] train-rmse:0.530119+0.002005 test-rmse:0.530909+0.003751 ## [23] train-rmse:0.522251+0.001838 test-rmse:0.523070+0.003556 ## [24] train-rmse:0.514953+0.002109 test-rmse:0.515808+0.003846 ## [25] train-rmse:0.508429+0.002010 test-rmse:0.509311+0.003520 ## [26] train-rmse:0.502401+0.002193 test-rmse:0.503307+0.003477 ## [27] train-rmse:0.496522+0.002050 test-rmse:0.497480+0.003282 ## [28] train-rmse:0.490998+0.001981 test-rmse:0.492004+0.003126 ## [29] train-rmse:0.486138+0.001793 test-rmse:0.487193+0.003178 ## [30] train-rmse:0.481687+0.001782 test-rmse:0.482773+0.003209 ## [31] train-rmse:0.477337+0.001614 test-rmse:0.478458+0.003045 ## [32] train-rmse:0.473369+0.001467 test-rmse:0.474511+0.003157 ## [33] train-rmse:0.469594+0.001314 test-rmse:0.470771+0.003266 ## [34] train-rmse:0.466374+0.001308 test-rmse:0.467602+0.003311 ## [35] train-rmse:0.463150+0.001319 test-rmse:0.464414+0.003150 ## [36] train-rmse:0.460304+0.001251 test-rmse:0.461611+0.003117 ## [37] train-rmse:0.457697+0.001240 test-rmse:0.459039+0.003059 ## [38] train-rmse:0.455382+0.001271 test-rmse:0.456758+0.003097 ## [39] train-rmse:0.453036+0.001213 test-rmse:0.454469+0.003120 ## [40] train-rmse:0.450887+0.001087 test-rmse:0.452339+0.003149 ## [41] train-rmse:0.448949+0.001209 test-rmse:0.450419+0.003057 ## [42] train-rmse:0.447170+0.001304 test-rmse:0.448663+0.002932 ## [43] train-rmse:0.445465+0.001358 test-rmse:0.446978+0.002960 ## [44] train-rmse:0.443982+0.001341 test-rmse:0.445526+0.003019 ## [45] train-rmse:0.442581+0.001324 test-rmse:0.444158+0.002924 ## [46] train-rmse:0.441093+0.001186 test-rmse:0.442705+0.002965 ## [47] train-rmse:0.439832+0.001164 test-rmse:0.441465+0.002948 ## [48] train-rmse:0.438692+0.001049 test-rmse:0.440359+0.002932 ## [49] train-rmse:0.437629+0.001122 test-rmse:0.439333+0.002960 ## [50] train-rmse:0.436573+0.001122 test-rmse:0.438302+0.003003 ## [51] train-rmse:0.435616+0.001061 test-rmse:0.437382+0.003023 ## [52] train-rmse:0.434851+0.001051 test-rmse:0.436639+0.003046 ## [53] train-rmse:0.434095+0.001005 test-rmse:0.435904+0.002975 ## [54] train-rmse:0.433337+0.000960 test-rmse:0.435178+0.002938 ## [55] train-rmse:0.432671+0.000949 test-rmse:0.434528+0.002990 ## [56] train-rmse:0.432049+0.000952 test-rmse:0.433931+0.002964 ## [57] train-rmse:0.431413+0.000852 test-rmse:0.433329+0.002994 ## [58] train-rmse:0.430844+0.000782 test-rmse:0.432774+0.003021 ## [59] train-rmse:0.430321+0.000795 test-rmse:0.432276+0.003034 ## [60] train-rmse:0.429837+0.000757 test-rmse:0.431818+0.003016 ## [61] train-rmse:0.429402+0.000702 test-rmse:0.431396+0.003049 ## [62] train-rmse:0.429007+0.000697 test-rmse:0.431017+0.003045 ## [63] train-rmse:0.428635+0.000721 test-rmse:0.430675+0.003021 ## [64] train-rmse:0.428297+0.000743 test-rmse:0.430352+0.003026 ## [65] train-rmse:0.427952+0.000754 test-rmse:0.430034+0.003034 ## [66] train-rmse:0.427665+0.000772 test-rmse:0.429774+0.003017 ## [67] train-rmse:0.427372+0.000781 test-rmse:0.429505+0.003029 ## [68] train-rmse:0.427090+0.000772 test-rmse:0.429248+0.003045 ## [69] train-rmse:0.426791+0.000724 test-rmse:0.428978+0.003049 ## [70] train-rmse:0.426540+0.000684 test-rmse:0.428745+0.003084 ## [71] train-rmse:0.426297+0.000671 test-rmse:0.428525+0.003105 ## [72] train-rmse:0.426060+0.000660 test-rmse:0.428312+0.003116 ## [73] train-rmse:0.425814+0.000614 test-rmse:0.428094+0.003154 ## [74] train-rmse:0.425589+0.000615 test-rmse:0.427899+0.003131 ## [75] train-rmse:0.425380+0.000589 test-rmse:0.427702+0.003141 ## [76] train-rmse:0.425192+0.000576 test-rmse:0.427529+0.003150 ## [77] train-rmse:0.425029+0.000558 test-rmse:0.427387+0.003159 ## [78] train-rmse:0.424866+0.000556 test-rmse:0.427239+0.003182 ## [79] train-rmse:0.424706+0.000547 test-rmse:0.427097+0.003194 ## [80] train-rmse:0.424549+0.000558 test-rmse:0.426966+0.003194 ## [81] train-rmse:0.424394+0.000564 test-rmse:0.426840+0.003205 ## [82] train-rmse:0.424261+0.000561 test-rmse:0.426725+0.003196 ## [83] train-rmse:0.424131+0.000571 test-rmse:0.426618+0.003195 ## [84] train-rmse:0.424018+0.000566 test-rmse:0.426529+0.003202 ## [85] train-rmse:0.423883+0.000541 test-rmse:0.426417+0.003201 ## [86] train-rmse:0.423770+0.000532 test-rmse:0.426325+0.003217 ## [87] train-rmse:0.423665+0.000538 test-rmse:0.426246+0.003222 ## [88] train-rmse:0.423565+0.000540 test-rmse:0.426166+0.003215 ## [89] train-rmse:0.423458+0.000537 test-rmse:0.426079+0.003214 ## [90] train-rmse:0.423352+0.000525 test-rmse:0.425999+0.003230 ## [91] train-rmse:0.423240+0.000506 test-rmse:0.425917+0.003244 ## [92] train-rmse:0.423142+0.000494 test-rmse:0.425838+0.003245 ## [93] train-rmse:0.423043+0.000475 test-rmse:0.425757+0.003257 ## [94] train-rmse:0.422962+0.000465 test-rmse:0.425702+0.003263 ## [95] train-rmse:0.422876+0.000462 test-rmse:0.425632+0.003264 ## [96] train-rmse:0.422797+0.000456 test-rmse:0.425573+0.003270 ## [97] train-rmse:0.422721+0.000459 test-rmse:0.425520+0.003267 ## [98] train-rmse:0.422648+0.000455 test-rmse:0.425473+0.003273 ## [99] train-rmse:0.422570+0.000448 test-rmse:0.425417+0.003274 ## [100] train-rmse:0.422506+0.000441 test-rmse:0.425376+0.003284 ## [101] train-rmse:0.422431+0.000435 test-rmse:0.425335+0.003281 ## [102] train-rmse:0.422362+0.000432 test-rmse:0.425290+0.003289 ## [103] train-rmse:0.422301+0.000439 test-rmse:0.425253+0.003283 ## [104] train-rmse:0.422242+0.000441 test-rmse:0.425223+0.003278 ## [105] train-rmse:0.422181+0.000436 test-rmse:0.425180+0.003283 ## [106] train-rmse:0.422124+0.000435 test-rmse:0.425147+0.003285 ## [107] train-rmse:0.422061+0.000433 test-rmse:0.425104+0.003286 ## [108] train-rmse:0.422001+0.000430 test-rmse:0.425061+0.003291 ## [109] train-rmse:0.421934+0.000432 test-rmse:0.425022+0.003294 ## [110] train-rmse:0.421874+0.000424 test-rmse:0.424978+0.003305 ## [111] train-rmse:0.421825+0.000422 test-rmse:0.424952+0.003310 ## [112] train-rmse:0.421768+0.000420 test-rmse:0.424919+0.003313 ## [113] train-rmse:0.421722+0.000416 test-rmse:0.424893+0.003323 ## [114] train-rmse:0.421680+0.000417 test-rmse:0.424867+0.003320 ## [115] train-rmse:0.421633+0.000413 test-rmse:0.424842+0.003323 ## [116] train-rmse:0.421593+0.000414 test-rmse:0.424827+0.003331 ## [117] train-rmse:0.421544+0.000409 test-rmse:0.424796+0.003332 ## [118] train-rmse:0.421490+0.000410 test-rmse:0.424773+0.003334 ## [119] train-rmse:0.421446+0.000408 test-rmse:0.424749+0.003336 ## [120] train-rmse:0.421399+0.000408 test-rmse:0.424720+0.003334 ## [121] train-rmse:0.421357+0.000407 test-rmse:0.424701+0.003339 ## [122] train-rmse:0.421311+0.000404 test-rmse:0.424677+0.003335 ## [123] train-rmse:0.421263+0.000407 test-rmse:0.424651+0.003337 ## [124] train-rmse:0.421227+0.000408 test-rmse:0.424637+0.003340 ## [125] train-rmse:0.421180+0.000406 test-rmse:0.424610+0.003341 ## [126] train-rmse:0.421140+0.000401 test-rmse:0.424591+0.003349 ## [127] train-rmse:0.421101+0.000399 test-rmse:0.424580+0.003353 ## [128] train-rmse:0.421063+0.000399 test-rmse:0.424560+0.003353 ## [129] train-rmse:0.421026+0.000399 test-rmse:0.424542+0.003354 ## [130] train-rmse:0.420985+0.000399 test-rmse:0.424525+0.003359 ## [131] train-rmse:0.420947+0.000397 test-rmse:0.424506+0.003362 ## [132] train-rmse:0.420910+0.000394 test-rmse:0.424491+0.003366 ## [133] train-rmse:0.420874+0.000393 test-rmse:0.424470+0.003371 ## [134] train-rmse:0.420840+0.000393 test-rmse:0.424459+0.003372 ## [135] train-rmse:0.420808+0.000388 test-rmse:0.424444+0.003377 ## [136] train-rmse:0.420778+0.000386 test-rmse:0.424434+0.003381 ## [137] train-rmse:0.420742+0.000383 test-rmse:0.424412+0.003387 ## [138] train-rmse:0.420710+0.000384 test-rmse:0.424401+0.003388 ## [139] train-rmse:0.420670+0.000377 test-rmse:0.424382+0.003393 ## [140] train-rmse:0.420636+0.000374 test-rmse:0.424373+0.003400 ## [141] train-rmse:0.420604+0.000378 test-rmse:0.424362+0.003397 ## [142] train-rmse:0.420571+0.000377 test-rmse:0.424352+0.003397 ## [143] train-rmse:0.420539+0.000378 test-rmse:0.424341+0.003397 ## [144] train-rmse:0.420505+0.000381 test-rmse:0.424323+0.003397 ## [145] train-rmse:0.420475+0.000380 test-rmse:0.424318+0.003398 ## [146] train-rmse:0.420446+0.000381 test-rmse:0.424311+0.003395 ## [147] train-rmse:0.420415+0.000377 test-rmse:0.424300+0.003394 ## [148] train-rmse:0.420388+0.000379 test-rmse:0.424290+0.003397 ## [149] train-rmse:0.420359+0.000377 test-rmse:0.424282+0.003403 ## [150] train-rmse:0.420333+0.000376 test-rmse:0.424275+0.003403 ## [151] train-rmse:0.420301+0.000378 test-rmse:0.424265+0.003400 ## [152] train-rmse:0.420271+0.000378 test-rmse:0.424258+0.003400 ## [153] train-rmse:0.420244+0.000375 test-rmse:0.424249+0.003407 ## [154] train-rmse:0.420216+0.000370 test-rmse:0.424238+0.003415 ## [155] train-rmse:0.420191+0.000368 test-rmse:0.424234+0.003419 ## [156] train-rmse:0.420158+0.000368 test-rmse:0.424227+0.003419 ## [157] train-rmse:0.420130+0.000368 test-rmse:0.424222+0.003424 ## [158] train-rmse:0.420101+0.000371 test-rmse:0.424212+0.003424 ## [159] train-rmse:0.420074+0.000374 test-rmse:0.424206+0.003424 ## [160] train-rmse:0.420043+0.000376 test-rmse:0.424196+0.003424 ## [161] train-rmse:0.420016+0.000377 test-rmse:0.424192+0.003422 ## [162] train-rmse:0.419993+0.000377 test-rmse:0.424189+0.003423 ## [163] train-rmse:0.419967+0.000376 test-rmse:0.424188+0.003420 ## [164] train-rmse:0.419943+0.000375 test-rmse:0.424187+0.003422 ## [165] train-rmse:0.419916+0.000374 test-rmse:0.424186+0.003425 ## [166] train-rmse:0.419893+0.000375 test-rmse:0.424180+0.003427 ## [167] train-rmse:0.419869+0.000374 test-rmse:0.424179+0.003431 ## [168] train-rmse:0.419845+0.000371 test-rmse:0.424170+0.003436 ## [169] train-rmse:0.419822+0.000369 test-rmse:0.424164+0.003442 ## [170] train-rmse:0.419801+0.000372 test-rmse:0.424159+0.003441 ## [171] train-rmse:0.419778+0.000376 test-rmse:0.424155+0.003434 ## [172] train-rmse:0.419760+0.000372 test-rmse:0.424150+0.003435 ## [173] train-rmse:0.419738+0.000370 test-rmse:0.424145+0.003437 ## [174] train-rmse:0.419718+0.000368 test-rmse:0.424142+0.003436 ## [175] train-rmse:0.419699+0.000365 test-rmse:0.424140+0.003437 ## [176] train-rmse:0.419678+0.000364 test-rmse:0.424134+0.003437 ## [177] train-rmse:0.419658+0.000367 test-rmse:0.424134+0.003438 ## [178] train-rmse:0.419633+0.000366 test-rmse:0.424131+0.003435 ## [179] train-rmse:0.419607+0.000365 test-rmse:0.424133+0.003438 ## [180] train-rmse:0.419589+0.000364 test-rmse:0.424128+0.003439 ## [181] train-rmse:0.419570+0.000362 test-rmse:0.424128+0.003440 ## [182] train-rmse:0.419549+0.000359 test-rmse:0.424127+0.003443 ## [183] train-rmse:0.419527+0.000360 test-rmse:0.424125+0.003443 ## [184] train-rmse:0.419510+0.000360 test-rmse:0.424121+0.003448 ## [185] train-rmse:0.419492+0.000360 test-rmse:0.424122+0.003450 ## [186] train-rmse:0.419472+0.000358 test-rmse:0.424118+0.003449 ## [187] train-rmse:0.419456+0.000355 test-rmse:0.424117+0.003450 ## [188] train-rmse:0.419429+0.000360 test-rmse:0.424112+0.003447 ## [189] train-rmse:0.419415+0.000359 test-rmse:0.424112+0.003448 ## [190] train-rmse:0.419394+0.000357 test-rmse:0.424108+0.003447 ## [191] train-rmse:0.419372+0.000360 test-rmse:0.424098+0.003446 ## [192] train-rmse:0.419350+0.000364 test-rmse:0.424095+0.003445 ## [193] train-rmse:0.419334+0.000368 test-rmse:0.424091+0.003444 ## [194] train-rmse:0.419312+0.000373 test-rmse:0.424091+0.003445 ## [195] train-rmse:0.419290+0.000375 test-rmse:0.424088+0.003443 ## [196] train-rmse:0.419273+0.000374 test-rmse:0.424086+0.003446 ## [197] train-rmse:0.419258+0.000378 test-rmse:0.424088+0.003445 ## [198] train-rmse:0.419239+0.000376 test-rmse:0.424082+0.003449 ## [199] train-rmse:0.419222+0.000375 test-rmse:0.424085+0.003452 ## [200] train-rmse:0.419205+0.000374 test-rmse:0.424083+0.003454 ## [201] train-rmse:0.419189+0.000371 test-rmse:0.424078+0.003454 ## [202] train-rmse:0.419165+0.000364 test-rmse:0.424073+0.003457 ## [203] train-rmse:0.419150+0.000362 test-rmse:0.424072+0.003462 ## [204] train-rmse:0.419130+0.000367 test-rmse:0.424068+0.003460 ## [205] train-rmse:0.419116+0.000364 test-rmse:0.424070+0.003459 ## [206] train-rmse:0.419096+0.000365 test-rmse:0.424071+0.003459 ## [207] train-rmse:0.419078+0.000364 test-rmse:0.424063+0.003462 ## [208] train-rmse:0.419059+0.000362 test-rmse:0.424063+0.003464 ## [209] train-rmse:0.419040+0.000366 test-rmse:0.424057+0.003467 ## [210] train-rmse:0.419022+0.000363 test-rmse:0.424054+0.003467 ## [211] train-rmse:0.419010+0.000365 test-rmse:0.424053+0.003466 ## [212] train-rmse:0.418991+0.000370 test-rmse:0.424052+0.003465 ## [213] train-rmse:0.418973+0.000370 test-rmse:0.424048+0.003466 ## [214] train-rmse:0.418954+0.000371 test-rmse:0.424044+0.003465 ## [215] train-rmse:0.418939+0.000372 test-rmse:0.424043+0.003463 ## [216] train-rmse:0.418921+0.000370 test-rmse:0.424043+0.003464 ## [217] train-rmse:0.418905+0.000364 test-rmse:0.424041+0.003465 ## [218] train-rmse:0.418891+0.000369 test-rmse:0.424042+0.003463 ## [219] train-rmse:0.418874+0.000369 test-rmse:0.424042+0.003469 ## [220] train-rmse:0.418855+0.000371 test-rmse:0.424039+0.003471 ## [221] train-rmse:0.418841+0.000371 test-rmse:0.424040+0.003471 ## [222] train-rmse:0.418824+0.000371 test-rmse:0.424039+0.003472 ## [223] train-rmse:0.418805+0.000372 test-rmse:0.424037+0.003468 ## [224] train-rmse:0.418793+0.000373 test-rmse:0.424037+0.003469 ## [225] train-rmse:0.418777+0.000375 test-rmse:0.424034+0.003471 ## [226] train-rmse:0.418764+0.000378 test-rmse:0.424038+0.003468 ## [227] train-rmse:0.418748+0.000380 test-rmse:0.424036+0.003465 ## [228] train-rmse:0.418733+0.000384 test-rmse:0.424039+0.003464 ## [229] train-rmse:0.418716+0.000386 test-rmse:0.424037+0.003463 ## [230] train-rmse:0.418702+0.000391 test-rmse:0.424036+0.003462 ## [231] train-rmse:0.418686+0.000390 test-rmse:0.424035+0.003464 ## [232] train-rmse:0.418668+0.000387 test-rmse:0.424031+0.003464 ## [233] train-rmse:0.418656+0.000385 test-rmse:0.424033+0.003466 ## [234] train-rmse:0.418640+0.000384 test-rmse:0.424026+0.003466 ## [235] train-rmse:0.418625+0.000385 test-rmse:0.424026+0.003468 ## [236] train-rmse:0.418612+0.000387 test-rmse:0.424026+0.003468 ## [237] train-rmse:0.418594+0.000384 test-rmse:0.424025+0.003468 ## [238] train-rmse:0.418579+0.000381 test-rmse:0.424020+0.003472 ## [239] train-rmse:0.418568+0.000383 test-rmse:0.424018+0.003470 ## [240] train-rmse:0.418555+0.000384 test-rmse:0.424015+0.003468 ## [241] train-rmse:0.418544+0.000384 test-rmse:0.424018+0.003471 ## [242] train-rmse:0.418531+0.000385 test-rmse:0.424019+0.003472 ## [243] train-rmse:0.418516+0.000385 test-rmse:0.424018+0.003474 ## [244] train-rmse:0.418506+0.000386 test-rmse:0.424019+0.003474 ## [245] train-rmse:0.418495+0.000387 test-rmse:0.424017+0.003475 ## [246] train-rmse:0.418480+0.000386 test-rmse:0.424012+0.003475 ## [247] train-rmse:0.418469+0.000384 test-rmse:0.424013+0.003475 ## [248] train-rmse:0.418456+0.000383 test-rmse:0.424013+0.003478 ## [249] train-rmse:0.418443+0.000382 test-rmse:0.424014+0.003481 ## [250] train-rmse:0.418429+0.000384 test-rmse:0.424015+0.003481 ## [251] train-rmse:0.418413+0.000385 test-rmse:0.424014+0.003483 ## [252] train-rmse:0.418393+0.000381 test-rmse:0.424014+0.003483 ## [253] train-rmse:0.418379+0.000380 test-rmse:0.424014+0.003485 ## [254] train-rmse:0.418362+0.000379 test-rmse:0.424018+0.003488 ## [255] train-rmse:0.418341+0.000376 test-rmse:0.424016+0.003491 ## [256] train-rmse:0.418326+0.000375 test-rmse:0.424015+0.003491 ## [257] train-rmse:0.418310+0.000380 test-rmse:0.424017+0.003491 ## [258] train-rmse:0.418299+0.000380 test-rmse:0.424019+0.003491 ## [259] train-rmse:0.418289+0.000377 test-rmse:0.424020+0.003490 ## [260] train-rmse:0.418277+0.000379 test-rmse:0.424021+0.003492 ## [261] train-rmse:0.418264+0.000379 test-rmse:0.424020+0.003494 ## [262] train-rmse:0.418248+0.000377 test-rmse:0.424023+0.003496 ## [263] train-rmse:0.418233+0.000379 test-rmse:0.424022+0.003498 ## [264] train-rmse:0.418219+0.000376 test-rmse:0.424022+0.003498 ## [265] train-rmse:0.418207+0.000378 test-rmse:0.424021+0.003499 ## [266] train-rmse:0.418191+0.000378 test-rmse:0.424022+0.003495 ## [267] train-rmse:0.418174+0.000382 test-rmse:0.424020+0.003492 ## [268] train-rmse:0.418159+0.000383 test-rmse:0.424019+0.003489 ## [269] train-rmse:0.418146+0.000381 test-rmse:0.424017+0.003492 ## [270] train-rmse:0.418133+0.000379 test-rmse:0.424016+0.003492 ## [271] train-rmse:0.418117+0.000380 test-rmse:0.424018+0.003490 ## [272] train-rmse:0.418107+0.000379 test-rmse:0.424016+0.003490 ## [273] train-rmse:0.418091+0.000380 test-rmse:0.424018+0.003493 ## [274] train-rmse:0.418078+0.000376 test-rmse:0.424018+0.003494 ## [275] train-rmse:0.418064+0.000374 test-rmse:0.424015+0.003497 ## [276] train-rmse:0.418051+0.000378 test-rmse:0.424018+0.003497 ## [277] train-rmse:0.418035+0.000375 test-rmse:0.424018+0.003499 ## [278] train-rmse:0.418020+0.000376 test-rmse:0.424015+0.003501 ## [279] train-rmse:0.418006+0.000377 test-rmse:0.424018+0.003501 ## [280] train-rmse:0.417991+0.000375 test-rmse:0.424017+0.003503 ## [281] train-rmse:0.417978+0.000372 test-rmse:0.424019+0.003503 ## [282] train-rmse:0.417963+0.000372 test-rmse:0.424020+0.003505 ## [283] train-rmse:0.417951+0.000370 test-rmse:0.424020+0.003505 ## [284] train-rmse:0.417936+0.000374 test-rmse:0.424015+0.003508 ## [285] train-rmse:0.417920+0.000374 test-rmse:0.424015+0.003509 ## [286] train-rmse:0.417905+0.000375 test-rmse:0.424013+0.003506 ## [287] train-rmse:0.417887+0.000373 test-rmse:0.424009+0.003508 ## [288] train-rmse:0.417876+0.000372 test-rmse:0.424010+0.003506 ## [289] train-rmse:0.417867+0.000372 test-rmse:0.424012+0.003506 ## [290] train-rmse:0.417852+0.000373 test-rmse:0.424013+0.003506 ## [291] train-rmse:0.417839+0.000372 test-rmse:0.424015+0.003508 ## [292] train-rmse:0.417828+0.000373 test-rmse:0.424015+0.003508 ## [293] train-rmse:0.417813+0.000374 test-rmse:0.424011+0.003508 ## [294] train-rmse:0.417803+0.000373 test-rmse:0.424010+0.003509 ## [295] train-rmse:0.417789+0.000372 test-rmse:0.424010+0.003510 ## [296] train-rmse:0.417776+0.000367 test-rmse:0.424008+0.003510 ## [297] train-rmse:0.417764+0.000368 test-rmse:0.424008+0.003510 ## [298] train-rmse:0.417753+0.000366 test-rmse:0.424011+0.003508 ## [299] train-rmse:0.417739+0.000363 test-rmse:0.424008+0.003512 ## [300] train-rmse:0.417726+0.000358 test-rmse:0.424008+0.003511 ## [301] train-rmse:0.417715+0.000360 test-rmse:0.424007+0.003513 ## [302] train-rmse:0.417699+0.000363 test-rmse:0.424009+0.003512 ## [303] train-rmse:0.417687+0.000364 test-rmse:0.424008+0.003512 ## [304] train-rmse:0.417679+0.000363 test-rmse:0.424008+0.003513 ## [305] train-rmse:0.417669+0.000364 test-rmse:0.424011+0.003515 ## [306] train-rmse:0.417661+0.000366 test-rmse:0.424011+0.003515 ## [307] train-rmse:0.417651+0.000363 test-rmse:0.424012+0.003517 ## [308] train-rmse:0.417637+0.000365 test-rmse:0.424013+0.003518 ## [309] train-rmse:0.417620+0.000366 test-rmse:0.424014+0.003515 ## [310] train-rmse:0.417609+0.000363 test-rmse:0.424018+0.003513 ## [311] train-rmse:0.417599+0.000366 test-rmse:0.424017+0.003515 ## [312] train-rmse:0.417586+0.000368 test-rmse:0.424019+0.003518 ## [313] train-rmse:0.417568+0.000372 test-rmse:0.424020+0.003515 ## [314] train-rmse:0.417558+0.000374 test-rmse:0.424022+0.003517 ## [315] train-rmse:0.417545+0.000370 test-rmse:0.424021+0.003516 ## [316] train-rmse:0.417533+0.000369 test-rmse:0.424023+0.003517 ## [317] train-rmse:0.417518+0.000374 test-rmse:0.424021+0.003515 ## [318] train-rmse:0.417503+0.000376 test-rmse:0.424023+0.003514 ## [319] train-rmse:0.417491+0.000378 test-rmse:0.424023+0.003514 ## [320] train-rmse:0.417478+0.000378 test-rmse:0.424020+0.003511 ## [321] train-rmse:0.417462+0.000380 test-rmse:0.424021+0.003511 ## [322] train-rmse:0.417448+0.000383 test-rmse:0.424020+0.003513 ## [323] train-rmse:0.417435+0.000383 test-rmse:0.424019+0.003513 ## [324] train-rmse:0.417423+0.000385 test-rmse:0.424021+0.003512 ## [325] train-rmse:0.417414+0.000387 test-rmse:0.424021+0.003516 ## [326] train-rmse:0.417402+0.000389 test-rmse:0.424018+0.003517 ## [327] train-rmse:0.417392+0.000390 test-rmse:0.424015+0.003517 ## [328] train-rmse:0.417382+0.000390 test-rmse:0.424014+0.003516 ## [329] train-rmse:0.417370+0.000392 test-rmse:0.424012+0.003514 ## [330] train-rmse:0.417357+0.000393 test-rmse:0.424012+0.003514 ## [331] train-rmse:0.417345+0.000397 test-rmse:0.424010+0.003513 ## [332] train-rmse:0.417331+0.000396 test-rmse:0.424010+0.003512 ## [333] train-rmse:0.417315+0.000396 test-rmse:0.424011+0.003513 ## [334] train-rmse:0.417303+0.000396 test-rmse:0.424011+0.003515 ## [335] train-rmse:0.417293+0.000393 test-rmse:0.424010+0.003514 ## [336] train-rmse:0.417280+0.000389 test-rmse:0.424011+0.003511 ## [337] train-rmse:0.417269+0.000383 test-rmse:0.424016+0.003510 ## [338] train-rmse:0.417256+0.000380 test-rmse:0.424017+0.003513 ## [339] train-rmse:0.417245+0.000384 test-rmse:0.424020+0.003513 ## [340] train-rmse:0.417233+0.000381 test-rmse:0.424022+0.003514 ## [341] train-rmse:0.417222+0.000384 test-rmse:0.424022+0.003517 ## [342] train-rmse:0.417209+0.000382 test-rmse:0.424020+0.003519 ## [343] train-rmse:0.417194+0.000383 test-rmse:0.424018+0.003520 ## [344] train-rmse:0.417183+0.000383 test-rmse:0.424018+0.003520 ## [345] train-rmse:0.417168+0.000377 test-rmse:0.424015+0.003523 ## [346] train-rmse:0.417156+0.000374 test-rmse:0.424017+0.003522 ## [347] train-rmse:0.417141+0.000377 test-rmse:0.424016+0.003522 ## [348] train-rmse:0.417127+0.000379 test-rmse:0.424017+0.003519 ## [349] train-rmse:0.417117+0.000380 test-rmse:0.424016+0.003518 ## [350] train-rmse:0.417107+0.000379 test-rmse:0.424016+0.003520 ## [351] train-rmse:0.417094+0.000379 test-rmse:0.424016+0.003521 ## [352] train-rmse:0.417083+0.000382 test-rmse:0.424017+0.003524 ## [353] train-rmse:0.417067+0.000379 test-rmse:0.424016+0.003521 ## [354] train-rmse:0.417058+0.000377 test-rmse:0.424017+0.003520 ## [355] train-rmse:0.417044+0.000380 test-rmse:0.424014+0.003523 ## [356] train-rmse:0.417028+0.000383 test-rmse:0.424014+0.003527 ## [357] train-rmse:0.417015+0.000378 test-rmse:0.424013+0.003530 ## [358] train-rmse:0.417003+0.000377 test-rmse:0.424014+0.003530 ## [359] train-rmse:0.416989+0.000379 test-rmse:0.424012+0.003528 ## [360] train-rmse:0.416976+0.000385 test-rmse:0.424012+0.003528 ## [361] train-rmse:0.416965+0.000386 test-rmse:0.424012+0.003529 ## [362] train-rmse:0.416951+0.000389 test-rmse:0.424011+0.003529 ## [363] train-rmse:0.416943+0.000387 test-rmse:0.424010+0.003531 ## [364] train-rmse:0.416928+0.000384 test-rmse:0.424007+0.003533 ## [365] train-rmse:0.416920+0.000380 test-rmse:0.424008+0.003536 ## [366] train-rmse:0.416909+0.000377 test-rmse:0.424006+0.003536 ## [367] train-rmse:0.416894+0.000375 test-rmse:0.424001+0.003538 ## [368] train-rmse:0.416884+0.000374 test-rmse:0.424003+0.003535 ## [369] train-rmse:0.416867+0.000373 test-rmse:0.424000+0.003538 ## [370] train-rmse:0.416855+0.000371 test-rmse:0.424001+0.003538 ## [371] train-rmse:0.416839+0.000371 test-rmse:0.424000+0.003537 ## [372] train-rmse:0.416828+0.000370 test-rmse:0.424004+0.003537 ## [373] train-rmse:0.416818+0.000368 test-rmse:0.424002+0.003536 ## [374] train-rmse:0.416809+0.000363 test-rmse:0.424001+0.003537 ## [375] train-rmse:0.416798+0.000357 test-rmse:0.424000+0.003538 ## [376] train-rmse:0.416780+0.000359 test-rmse:0.424002+0.003537 ## [377] train-rmse:0.416769+0.000361 test-rmse:0.423998+0.003538 ## [378] train-rmse:0.416758+0.000360 test-rmse:0.423997+0.003540 ## [379] train-rmse:0.416747+0.000360 test-rmse:0.423999+0.003542 ## [380] train-rmse:0.416736+0.000364 test-rmse:0.423998+0.003540 ## [381] train-rmse:0.416725+0.000367 test-rmse:0.424000+0.003539 ## [382] train-rmse:0.416715+0.000368 test-rmse:0.424000+0.003542 ## [383] train-rmse:0.416699+0.000367 test-rmse:0.423998+0.003544 ## [384] train-rmse:0.416685+0.000365 test-rmse:0.423993+0.003546 ## [385] train-rmse:0.416673+0.000365 test-rmse:0.423994+0.003546 ## [386] train-rmse:0.416662+0.000366 test-rmse:0.423994+0.003544 ## [387] train-rmse:0.416652+0.000367 test-rmse:0.423993+0.003545 ## [388] train-rmse:0.416640+0.000366 test-rmse:0.423993+0.003547 ## [389] train-rmse:0.416627+0.000362 test-rmse:0.423991+0.003550 ## [390] train-rmse:0.416613+0.000362 test-rmse:0.423995+0.003547 ## [391] train-rmse:0.416601+0.000360 test-rmse:0.423995+0.003549 ## [392] train-rmse:0.416588+0.000357 test-rmse:0.423991+0.003550 ## [393] train-rmse:0.416577+0.000356 test-rmse:0.423991+0.003552 ## [394] train-rmse:0.416564+0.000356 test-rmse:0.423991+0.003554 ## [395] train-rmse:0.416550+0.000356 test-rmse:0.423990+0.003557 ## [396] train-rmse:0.416539+0.000359 test-rmse:0.423994+0.003555 ## [397] train-rmse:0.416527+0.000357 test-rmse:0.423993+0.003557 ## [398] train-rmse:0.416512+0.000353 test-rmse:0.423994+0.003558 ## [399] train-rmse:0.416497+0.000350 test-rmse:0.423989+0.003561 ## [400] train-rmse:0.416485+0.000350 test-rmse:0.423989+0.003563 ## [401] train-rmse:0.416473+0.000349 test-rmse:0.423985+0.003566 ## [402] train-rmse:0.416460+0.000347 test-rmse:0.423987+0.003569 ## [403] train-rmse:0.416447+0.000347 test-rmse:0.423986+0.003569 ## [404] train-rmse:0.416436+0.000349 test-rmse:0.423985+0.003567 ## [405] train-rmse:0.416427+0.000349 test-rmse:0.423986+0.003567 ## [406] train-rmse:0.416416+0.000350 test-rmse:0.423987+0.003568 ## [407] train-rmse:0.416403+0.000353 test-rmse:0.423986+0.003571 ## [408] train-rmse:0.416392+0.000352 test-rmse:0.423985+0.003571 ## [409] train-rmse:0.416377+0.000348 test-rmse:0.423983+0.003573 ## [410] train-rmse:0.416366+0.000348 test-rmse:0.423984+0.003573 ## [411] train-rmse:0.416351+0.000348 test-rmse:0.423985+0.003574 ## [412] train-rmse:0.416340+0.000345 test-rmse:0.423987+0.003573 ## [413] train-rmse:0.416327+0.000341 test-rmse:0.423989+0.003573 ## [414] train-rmse:0.416314+0.000341 test-rmse:0.423992+0.003573 ## [415] train-rmse:0.416303+0.000338 test-rmse:0.423990+0.003576 ## [416] train-rmse:0.416284+0.000334 test-rmse:0.423989+0.003577 ## [417] train-rmse:0.416273+0.000332 test-rmse:0.423986+0.003579 ## [418] train-rmse:0.416261+0.000332 test-rmse:0.423985+0.003577 ## [419] train-rmse:0.416251+0.000331 test-rmse:0.423984+0.003578 ## [420] train-rmse:0.416238+0.000329 test-rmse:0.423984+0.003575 ## [421] train-rmse:0.416228+0.000334 test-rmse:0.423985+0.003576 ## [422] train-rmse:0.416215+0.000337 test-rmse:0.423986+0.003577 ## [423] train-rmse:0.416203+0.000337 test-rmse:0.423986+0.003573 ## [424] train-rmse:0.416195+0.000338 test-rmse:0.423986+0.003573 ## [425] train-rmse:0.416182+0.000341 test-rmse:0.423984+0.003572 ## [426] train-rmse:0.416168+0.000343 test-rmse:0.423984+0.003574 ## [427] train-rmse:0.416157+0.000343 test-rmse:0.423985+0.003577 ## [428] train-rmse:0.416148+0.000343 test-rmse:0.423984+0.003577 ## [429] train-rmse:0.416137+0.000346 test-rmse:0.423985+0.003577 ## [430] train-rmse:0.416121+0.000343 test-rmse:0.423985+0.003578 ## [431] train-rmse:0.416108+0.000343 test-rmse:0.423985+0.003575 ## [432] train-rmse:0.416098+0.000348 test-rmse:0.423988+0.003575 ## [433] train-rmse:0.416084+0.000351 test-rmse:0.423984+0.003569 ## [434] train-rmse:0.416071+0.000355 test-rmse:0.423984+0.003572 ## [435] train-rmse:0.416055+0.000353 test-rmse:0.423981+0.003575 ## [436] train-rmse:0.416044+0.000354 test-rmse:0.423983+0.003576 ## [437] train-rmse:0.416030+0.000350 test-rmse:0.423981+0.003577 ## [438] train-rmse:0.416020+0.000354 test-rmse:0.423984+0.003575 ## [439] train-rmse:0.416008+0.000354 test-rmse:0.423985+0.003574 ## [440] train-rmse:0.415995+0.000354 test-rmse:0.423981+0.003575 ## [441] train-rmse:0.415984+0.000352 test-rmse:0.423980+0.003576 ## [442] train-rmse:0.415974+0.000350 test-rmse:0.423981+0.003575 ## [443] train-rmse:0.415960+0.000349 test-rmse:0.423981+0.003575 ## [444] train-rmse:0.415951+0.000349 test-rmse:0.423980+0.003578 ## [445] train-rmse:0.415934+0.000353 test-rmse:0.423983+0.003579 ## [446] train-rmse:0.415926+0.000355 test-rmse:0.423984+0.003578 ## [447] train-rmse:0.415911+0.000357 test-rmse:0.423985+0.003577 ## [448] train-rmse:0.415897+0.000358 test-rmse:0.423986+0.003575 ## [449] train-rmse:0.415884+0.000360 test-rmse:0.423989+0.003573 ## [450] train-rmse:0.415870+0.000358 test-rmse:0.423989+0.003571 ## [451] train-rmse:0.415857+0.000360 test-rmse:0.423989+0.003571 ## [452] train-rmse:0.415842+0.000363 test-rmse:0.423990+0.003573 ## [453] train-rmse:0.415831+0.000363 test-rmse:0.423992+0.003574 ## [454] train-rmse:0.415817+0.000361 test-rmse:0.423992+0.003576 ## [455] train-rmse:0.415806+0.000360 test-rmse:0.423993+0.003578 ## [456] train-rmse:0.415788+0.000361 test-rmse:0.423991+0.003578 ## [457] train-rmse:0.415774+0.000362 test-rmse:0.423990+0.003578 ## [458] train-rmse:0.415764+0.000366 test-rmse:0.423990+0.003581 ## [459] train-rmse:0.415755+0.000362 test-rmse:0.423988+0.003583 ## [460] train-rmse:0.415740+0.000366 test-rmse:0.423989+0.003578 ## [461] train-rmse:0.415729+0.000362 test-rmse:0.423989+0.003579 ## [462] train-rmse:0.415714+0.000361 test-rmse:0.423988+0.003580 ## [463] train-rmse:0.415703+0.000362 test-rmse:0.423985+0.003579 ## [464] train-rmse:0.415687+0.000360 test-rmse:0.423979+0.003575 ## [465] train-rmse:0.415678+0.000361 test-rmse:0.423980+0.003572 ## [466] train-rmse:0.415666+0.000360 test-rmse:0.423978+0.003571 ## [467] train-rmse:0.415654+0.000358 test-rmse:0.423978+0.003572 ## [468] train-rmse:0.415646+0.000357 test-rmse:0.423980+0.003573 ## [469] train-rmse:0.415630+0.000359 test-rmse:0.423980+0.003574 ## [470] train-rmse:0.415618+0.000357 test-rmse:0.423979+0.003574 ## [471] train-rmse:0.415610+0.000354 test-rmse:0.423979+0.003576 ## [472] train-rmse:0.415597+0.000352 test-rmse:0.423979+0.003580 ## [473] train-rmse:0.415585+0.000350 test-rmse:0.423978+0.003580 ## [474] train-rmse:0.415574+0.000348 test-rmse:0.423979+0.003580 ## [475] train-rmse:0.415561+0.000344 test-rmse:0.423976+0.003581 ## [476] train-rmse:0.415542+0.000344 test-rmse:0.423978+0.003580 ## [477] train-rmse:0.415526+0.000343 test-rmse:0.423977+0.003583 ## [478] train-rmse:0.415515+0.000340 test-rmse:0.423978+0.003582 ## [479] train-rmse:0.415506+0.000341 test-rmse:0.423978+0.003581 ## [480] train-rmse:0.415495+0.000338 test-rmse:0.423980+0.003583 ## [481] train-rmse:0.415485+0.000339 test-rmse:0.423981+0.003581 ## [482] train-rmse:0.415471+0.000339 test-rmse:0.423980+0.003581 ## [483] train-rmse:0.415459+0.000341 test-rmse:0.423981+0.003581 ## [484] train-rmse:0.415446+0.000338 test-rmse:0.423983+0.003576 ## [485] train-rmse:0.415432+0.000339 test-rmse:0.423978+0.003576 ## [486] train-rmse:0.415420+0.000339 test-rmse:0.423979+0.003578 ## [487] train-rmse:0.415406+0.000340 test-rmse:0.423978+0.003576 ## [488] train-rmse:0.415398+0.000339 test-rmse:0.423979+0.003578 ## [489] train-rmse:0.415384+0.000338 test-rmse:0.423983+0.003580 ## [490] train-rmse:0.415375+0.000339 test-rmse:0.423985+0.003578 ## [491] train-rmse:0.415357+0.000336 test-rmse:0.423983+0.003581 ## [492] train-rmse:0.415347+0.000337 test-rmse:0.423981+0.003580 ## [493] train-rmse:0.415333+0.000338 test-rmse:0.423981+0.003578 ## [494] train-rmse:0.415321+0.000339 test-rmse:0.423978+0.003576 ## [495] train-rmse:0.415308+0.000338 test-rmse:0.423976+0.003575 ## [496] train-rmse:0.415292+0.000337 test-rmse:0.423979+0.003577 ## [497] train-rmse:0.415278+0.000338 test-rmse:0.423979+0.003577 ## [498] train-rmse:0.415269+0.000339 test-rmse:0.423978+0.003577 ## [499] train-rmse:0.415261+0.000339 test-rmse:0.423978+0.003578 ## [500] train-rmse:0.415247+0.000338 test-rmse:0.423981+0.003581 ## [501] train-rmse:0.415236+0.000341 test-rmse:0.423980+0.003583 ## [502] train-rmse:0.415223+0.000341 test-rmse:0.423983+0.003584 ## [503] train-rmse:0.415215+0.000340 test-rmse:0.423985+0.003585 ## [504] train-rmse:0.415205+0.000341 test-rmse:0.423985+0.003585 ## [505] train-rmse:0.415189+0.000341 test-rmse:0.423985+0.003585 ## [506] train-rmse:0.415175+0.000342 test-rmse:0.423984+0.003586 ## [507] train-rmse:0.415164+0.000341 test-rmse:0.423985+0.003587 ## [508] train-rmse:0.415153+0.000338 test-rmse:0.423984+0.003590 ## [509] train-rmse:0.415142+0.000337 test-rmse:0.423982+0.003588 ## [510] train-rmse:0.415129+0.000339 test-rmse:0.423984+0.003590 ## [511] train-rmse:0.415118+0.000339 test-rmse:0.423983+0.003588 ## [512] train-rmse:0.415108+0.000338 test-rmse:0.423980+0.003589 ## [513] train-rmse:0.415092+0.000342 test-rmse:0.423978+0.003585 ## [514] train-rmse:0.415079+0.000345 test-rmse:0.423978+0.003586 ## [515] train-rmse:0.415066+0.000346 test-rmse:0.423977+0.003586 ## [516] train-rmse:0.415054+0.000344 test-rmse:0.423974+0.003588 ## [517] train-rmse:0.415041+0.000344 test-rmse:0.423977+0.003587 ## [518] train-rmse:0.415029+0.000344 test-rmse:0.423980+0.003586 ## [519] train-rmse:0.415014+0.000344 test-rmse:0.423984+0.003584 ## [520] train-rmse:0.415004+0.000343 test-rmse:0.423984+0.003582 ## [521] train-rmse:0.414991+0.000344 test-rmse:0.423986+0.003580 ## [522] train-rmse:0.414978+0.000343 test-rmse:0.423983+0.003581 ## [523] train-rmse:0.414966+0.000345 test-rmse:0.423983+0.003581 ## [524] train-rmse:0.414953+0.000341 test-rmse:0.423984+0.003584 ## [525] train-rmse:0.414942+0.000337 test-rmse:0.423982+0.003585 ## [526] train-rmse:0.414927+0.000335 test-rmse:0.423980+0.003585 ## [527] train-rmse:0.414910+0.000339 test-rmse:0.423978+0.003586 ## [528] train-rmse:0.414892+0.000338 test-rmse:0.423975+0.003588 ## [529] train-rmse:0.414876+0.000338 test-rmse:0.423971+0.003587 ## [530] train-rmse:0.414867+0.000335 test-rmse:0.423971+0.003587 ## [531] train-rmse:0.414858+0.000337 test-rmse:0.423970+0.003588 ## [532] train-rmse:0.414846+0.000335 test-rmse:0.423971+0.003590 ## [533] train-rmse:0.414833+0.000333 test-rmse:0.423973+0.003592 ## [534] train-rmse:0.414819+0.000334 test-rmse:0.423974+0.003590 ## [535] train-rmse:0.414807+0.000329 test-rmse:0.423972+0.003593 ## [536] train-rmse:0.414794+0.000330 test-rmse:0.423968+0.003590 ## [537] train-rmse:0.414780+0.000333 test-rmse:0.423968+0.003591 ## [538] train-rmse:0.414769+0.000332 test-rmse:0.423970+0.003588 ## [539] train-rmse:0.414756+0.000338 test-rmse:0.423966+0.003585 ## [540] train-rmse:0.414744+0.000339 test-rmse:0.423966+0.003584 ## [541] train-rmse:0.414735+0.000343 test-rmse:0.423967+0.003586 ## [542] train-rmse:0.414724+0.000343 test-rmse:0.423970+0.003586 ## [543] train-rmse:0.414714+0.000343 test-rmse:0.423970+0.003588 ## [544] train-rmse:0.414702+0.000342 test-rmse:0.423969+0.003590 ## [545] train-rmse:0.414691+0.000342 test-rmse:0.423969+0.003591 ## [546] train-rmse:0.414680+0.000343 test-rmse:0.423969+0.003592 ## [547] train-rmse:0.414669+0.000342 test-rmse:0.423968+0.003594 ## [548] train-rmse:0.414659+0.000338 test-rmse:0.423968+0.003596 ## [549] train-rmse:0.414643+0.000335 test-rmse:0.423968+0.003596 ## [550] train-rmse:0.414630+0.000330 test-rmse:0.423968+0.003595 ## [551] train-rmse:0.414619+0.000327 test-rmse:0.423967+0.003597 ## [552] train-rmse:0.414607+0.000328 test-rmse:0.423966+0.003597 ## [553] train-rmse:0.414595+0.000330 test-rmse:0.423967+0.003595 ## [554] train-rmse:0.414582+0.000332 test-rmse:0.423967+0.003594 ## [555] train-rmse:0.414573+0.000334 test-rmse:0.423967+0.003596 ## [556] train-rmse:0.414562+0.000336 test-rmse:0.423967+0.003595 ## [557] train-rmse:0.414550+0.000339 test-rmse:0.423969+0.003598 ## [558] train-rmse:0.414536+0.000339 test-rmse:0.423972+0.003596 ## [559] train-rmse:0.414518+0.000340 test-rmse:0.423970+0.003595 ## [560] train-rmse:0.414510+0.000341 test-rmse:0.423972+0.003597 ## [561] train-rmse:0.414496+0.000339 test-rmse:0.423970+0.003596 ## [562] train-rmse:0.414483+0.000340 test-rmse:0.423970+0.003598 ## [563] train-rmse:0.414468+0.000341 test-rmse:0.423972+0.003595 ## [564] train-rmse:0.414454+0.000343 test-rmse:0.423971+0.003594 ## [565] train-rmse:0.414443+0.000343 test-rmse:0.423972+0.003594 ## [566] train-rmse:0.414431+0.000342 test-rmse:0.423971+0.003594 ## [567] train-rmse:0.414419+0.000344 test-rmse:0.423969+0.003597 ## [568] train-rmse:0.414411+0.000346 test-rmse:0.423968+0.003597 ## [569] train-rmse:0.414396+0.000349 test-rmse:0.423967+0.003595 ## [570] train-rmse:0.414383+0.000349 test-rmse:0.423964+0.003593 ## [571] train-rmse:0.414369+0.000348 test-rmse:0.423965+0.003594 ## [572] train-rmse:0.414357+0.000351 test-rmse:0.423965+0.003595 ## [573] train-rmse:0.414346+0.000350 test-rmse:0.423967+0.003598 ## [574] train-rmse:0.414333+0.000356 test-rmse:0.423967+0.003594 ## [575] train-rmse:0.414322+0.000357 test-rmse:0.423969+0.003595 ## [576] train-rmse:0.414308+0.000360 test-rmse:0.423968+0.003594 ## [577] train-rmse:0.414297+0.000358 test-rmse:0.423969+0.003597 ## [578] train-rmse:0.414282+0.000363 test-rmse:0.423966+0.003596 ## [579] train-rmse:0.414270+0.000366 test-rmse:0.423964+0.003593 ## [580] train-rmse:0.414255+0.000364 test-rmse:0.423960+0.003595 ## [581] train-rmse:0.414245+0.000364 test-rmse:0.423960+0.003595 ## [582] train-rmse:0.414231+0.000362 test-rmse:0.423954+0.003595 ## [583] train-rmse:0.414219+0.000366 test-rmse:0.423952+0.003593 ## [584] train-rmse:0.414205+0.000363 test-rmse:0.423953+0.003593 ## [585] train-rmse:0.414193+0.000358 test-rmse:0.423952+0.003599 ## [586] train-rmse:0.414177+0.000354 test-rmse:0.423951+0.003599 ## [587] train-rmse:0.414163+0.000354 test-rmse:0.423955+0.003600 ## [588] train-rmse:0.414148+0.000354 test-rmse:0.423951+0.003602 ## [589] train-rmse:0.414134+0.000353 test-rmse:0.423953+0.003601 ## [590] train-rmse:0.414122+0.000349 test-rmse:0.423952+0.003602 ## [591] train-rmse:0.414110+0.000349 test-rmse:0.423950+0.003600 ## [592] train-rmse:0.414097+0.000351 test-rmse:0.423949+0.003601 ## [593] train-rmse:0.414085+0.000350 test-rmse:0.423951+0.003600 ## [594] train-rmse:0.414073+0.000347 test-rmse:0.423953+0.003598 ## [595] train-rmse:0.414063+0.000352 test-rmse:0.423953+0.003598 ## [596] train-rmse:0.414051+0.000358 test-rmse:0.423951+0.003598 ## [597] train-rmse:0.414038+0.000357 test-rmse:0.423954+0.003601 ## [598] train-rmse:0.414026+0.000358 test-rmse:0.423955+0.003601 ## [599] train-rmse:0.414014+0.000358 test-rmse:0.423955+0.003601 ## [600] train-rmse:0.414001+0.000360 test-rmse:0.423956+0.003605 ## [601] train-rmse:0.413989+0.000367 test-rmse:0.423959+0.003609 ## [602] train-rmse:0.413973+0.000366 test-rmse:0.423960+0.003605 ## [603] train-rmse:0.413962+0.000370 test-rmse:0.423962+0.003601 ## [604] train-rmse:0.413950+0.000368 test-rmse:0.423965+0.003604 ## [605] train-rmse:0.413937+0.000366 test-rmse:0.423965+0.003603 ## [606] train-rmse:0.413924+0.000363 test-rmse:0.423963+0.003604 ## [607] train-rmse:0.413914+0.000364 test-rmse:0.423967+0.003606 ## [608] train-rmse:0.413902+0.000366 test-rmse:0.423969+0.003604 ## [609] train-rmse:0.413889+0.000369 test-rmse:0.423973+0.003606 ## [610] train-rmse:0.413880+0.000371 test-rmse:0.423973+0.003607 ## [611] train-rmse:0.413868+0.000370 test-rmse:0.423973+0.003610 ## [612] train-rmse:0.413854+0.000370 test-rmse:0.423971+0.003611 ## [613] train-rmse:0.413843+0.000370 test-rmse:0.423973+0.003609 ## [614] train-rmse:0.413832+0.000374 test-rmse:0.423971+0.003609 ## [615] train-rmse:0.413817+0.000371 test-rmse:0.423967+0.003610 ## [616] train-rmse:0.413807+0.000372 test-rmse:0.423970+0.003611 ## [617] train-rmse:0.413797+0.000374 test-rmse:0.423970+0.003610 ## [618] train-rmse:0.413789+0.000373 test-rmse:0.423970+0.003609 ## [619] train-rmse:0.413779+0.000376 test-rmse:0.423973+0.003612 ## [620] train-rmse:0.413764+0.000377 test-rmse:0.423974+0.003617 ## [621] train-rmse:0.413753+0.000378 test-rmse:0.423975+0.003616 ## [622] train-rmse:0.413741+0.000377 test-rmse:0.423976+0.003617 ## [623] train-rmse:0.413727+0.000377 test-rmse:0.423980+0.003616 ## [624] train-rmse:0.413715+0.000375 test-rmse:0.423978+0.003615 ## [625] train-rmse:0.413705+0.000374 test-rmse:0.423978+0.003617 ## [626] train-rmse:0.413692+0.000373 test-rmse:0.423979+0.003616 ## [627] train-rmse:0.413682+0.000371 test-rmse:0.423978+0.003618 ## [628] train-rmse:0.413670+0.000370 test-rmse:0.423979+0.003616 ## [629] train-rmse:0.413654+0.000369 test-rmse:0.423980+0.003617 ## [630] train-rmse:0.413639+0.000370 test-rmse:0.423981+0.003617 ## [631] train-rmse:0.413630+0.000371 test-rmse:0.423985+0.003619 ## [632] train-rmse:0.413613+0.000369 test-rmse:0.423984+0.003621 ## [633] train-rmse:0.413595+0.000369 test-rmse:0.423982+0.003618 ## [634] train-rmse:0.413583+0.000374 test-rmse:0.423983+0.003619 ## [635] train-rmse:0.413570+0.000371 test-rmse:0.423984+0.003620 ## [636] train-rmse:0.413558+0.000374 test-rmse:0.423982+0.003618 ## [637] train-rmse:0.413547+0.000371 test-rmse:0.423981+0.003622 ## [638] train-rmse:0.413533+0.000369 test-rmse:0.423981+0.003622 ## [639] train-rmse:0.413520+0.000371 test-rmse:0.423979+0.003618 ## [640] train-rmse:0.413508+0.000371 test-rmse:0.423978+0.003618 ## [641] train-rmse:0.413497+0.000373 test-rmse:0.423978+0.003618 ## [642] train-rmse:0.413483+0.000375 test-rmse:0.423976+0.003617 ## [643] train-rmse:0.413470+0.000377 test-rmse:0.423976+0.003618 ## [644] train-rmse:0.413457+0.000378 test-rmse:0.423974+0.003617 ## [645] train-rmse:0.413446+0.000377 test-rmse:0.423975+0.003619 ## [646] train-rmse:0.413434+0.000379 test-rmse:0.423974+0.003618 ## [647] train-rmse:0.413423+0.000377 test-rmse:0.423974+0.003619 ## [648] train-rmse:0.413413+0.000378 test-rmse:0.423975+0.003620 ## [649] train-rmse:0.413405+0.000377 test-rmse:0.423976+0.003616 ## [650] train-rmse:0.413393+0.000377 test-rmse:0.423977+0.003616 ## [651] train-rmse:0.413378+0.000376 test-rmse:0.423976+0.003615 ## [652] train-rmse:0.413370+0.000377 test-rmse:0.423973+0.003616 ## [653] train-rmse:0.413359+0.000375 test-rmse:0.423973+0.003616 ## [654] train-rmse:0.413347+0.000379 test-rmse:0.423973+0.003614 ## [655] train-rmse:0.413333+0.000378 test-rmse:0.423975+0.003616 ## [656] train-rmse:0.413320+0.000381 test-rmse:0.423971+0.003613 ## [657] train-rmse:0.413303+0.000379 test-rmse:0.423971+0.003613 ## [658] train-rmse:0.413294+0.000382 test-rmse:0.423971+0.003613 ## [659] train-rmse:0.413283+0.000385 test-rmse:0.423973+0.003615 ## [660] train-rmse:0.413272+0.000387 test-rmse:0.423972+0.003617 ## [661] train-rmse:0.413261+0.000386 test-rmse:0.423973+0.003618 ## [662] train-rmse:0.413251+0.000386 test-rmse:0.423973+0.003620 ## [663] train-rmse:0.413236+0.000388 test-rmse:0.423974+0.003617 ## [664] train-rmse:0.413226+0.000389 test-rmse:0.423975+0.003619 ## [665] train-rmse:0.413212+0.000388 test-rmse:0.423978+0.003618 ## [666] train-rmse:0.413201+0.000388 test-rmse:0.423979+0.003620 ## [667] train-rmse:0.413188+0.000386 test-rmse:0.423978+0.003621 ## [668] train-rmse:0.413176+0.000384 test-rmse:0.423975+0.003620 ## [669] train-rmse:0.413164+0.000385 test-rmse:0.423978+0.003621 ## [670] train-rmse:0.413155+0.000387 test-rmse:0.423978+0.003620 ## [671] train-rmse:0.413142+0.000386 test-rmse:0.423976+0.003618 ## [672] train-rmse:0.413131+0.000385 test-rmse:0.423975+0.003616 ## [673] train-rmse:0.413121+0.000389 test-rmse:0.423972+0.003614 ## [674] train-rmse:0.413109+0.000393 test-rmse:0.423971+0.003615 ## [675] train-rmse:0.413099+0.000391 test-rmse:0.423974+0.003617 ## [676] train-rmse:0.413089+0.000392 test-rmse:0.423975+0.003618 ## [677] train-rmse:0.413076+0.000394 test-rmse:0.423975+0.003618 ## [678] train-rmse:0.413064+0.000395 test-rmse:0.423972+0.003619 ## [679] train-rmse:0.413052+0.000395 test-rmse:0.423971+0.003619 ## [680] train-rmse:0.413041+0.000395 test-rmse:0.423971+0.003619 ## [681] train-rmse:0.413028+0.000396 test-rmse:0.423974+0.003618 ## [682] train-rmse:0.413016+0.000396 test-rmse:0.423976+0.003623 ## [683] train-rmse:0.413003+0.000396 test-rmse:0.423975+0.003621 ## [684] train-rmse:0.412986+0.000393 test-rmse:0.423972+0.003621 ## [685] train-rmse:0.412972+0.000396 test-rmse:0.423972+0.003620 ## [686] train-rmse:0.412959+0.000394 test-rmse:0.423968+0.003619 ## [687] train-rmse:0.412947+0.000393 test-rmse:0.423969+0.003619 ## [688] train-rmse:0.412936+0.000395 test-rmse:0.423973+0.003621 ## [689] train-rmse:0.412924+0.000392 test-rmse:0.423975+0.003622 ## [690] train-rmse:0.412912+0.000395 test-rmse:0.423976+0.003624 ## [691] train-rmse:0.412903+0.000395 test-rmse:0.423977+0.003627 ## [692] train-rmse:0.412890+0.000394 test-rmse:0.423978+0.003628 ## [693] train-rmse:0.412878+0.000393 test-rmse:0.423981+0.003629 ## [694] train-rmse:0.412867+0.000389 test-rmse:0.423984+0.003627 ## [695] train-rmse:0.412857+0.000392 test-rmse:0.423983+0.003626 ## [696] train-rmse:0.412841+0.000394 test-rmse:0.423983+0.003624 ## [697] train-rmse:0.412832+0.000396 test-rmse:0.423982+0.003625 ## [698] train-rmse:0.412820+0.000393 test-rmse:0.423981+0.003625 ## [699] train-rmse:0.412809+0.000393 test-rmse:0.423986+0.003627 ## [700] train-rmse:0.412794+0.000395 test-rmse:0.423989+0.003624 ## [701] train-rmse:0.412782+0.000399 test-rmse:0.423990+0.003626 ## [702] train-rmse:0.412771+0.000398 test-rmse:0.423991+0.003627 ## [703] train-rmse:0.412758+0.000403 test-rmse:0.423990+0.003626 ## [704] train-rmse:0.412746+0.000405 test-rmse:0.423991+0.003626 ## [705] train-rmse:0.412735+0.000409 test-rmse:0.423989+0.003624 ## [706] train-rmse:0.412724+0.000405 test-rmse:0.423991+0.003625 ## [707] train-rmse:0.412712+0.000404 test-rmse:0.423994+0.003626 ## [708] train-rmse:0.412699+0.000404 test-rmse:0.423995+0.003627 ## [709] train-rmse:0.412685+0.000401 test-rmse:0.423996+0.003626 ## [710] train-rmse:0.412674+0.000403 test-rmse:0.424000+0.003628 ## [711] train-rmse:0.412663+0.000407 test-rmse:0.423999+0.003630 ## [712] train-rmse:0.412654+0.000408 test-rmse:0.423999+0.003631 ## [713] train-rmse:0.412640+0.000408 test-rmse:0.423999+0.003631 ## [714] train-rmse:0.412629+0.000407 test-rmse:0.423998+0.003632 ## [715] train-rmse:0.412618+0.000406 test-rmse:0.424003+0.003632 ## [716] train-rmse:0.412609+0.000406 test-rmse:0.424004+0.003633 ## [717] train-rmse:0.412600+0.000406 test-rmse:0.424004+0.003633 ## [718] train-rmse:0.412590+0.000404 test-rmse:0.424006+0.003634 ## [719] train-rmse:0.412578+0.000403 test-rmse:0.424006+0.003635 ## [720] train-rmse:0.412562+0.000403 test-rmse:0.424008+0.003636 ## [721] train-rmse:0.412552+0.000403 test-rmse:0.424009+0.003638 ## [722] train-rmse:0.412538+0.000403 test-rmse:0.424010+0.003636 ## [723] train-rmse:0.412527+0.000403 test-rmse:0.424011+0.003639 ## [724] train-rmse:0.412514+0.000401 test-rmse:0.424011+0.003639 ## [725] train-rmse:0.412500+0.000400 test-rmse:0.424011+0.003636 ## [726] train-rmse:0.412489+0.000401 test-rmse:0.424008+0.003633 ## [727] train-rmse:0.412478+0.000405 test-rmse:0.424008+0.003634 ## [728] train-rmse:0.412466+0.000404 test-rmse:0.424006+0.003636 ## [729] train-rmse:0.412452+0.000404 test-rmse:0.424006+0.003642 ## [730] train-rmse:0.412437+0.000400 test-rmse:0.424008+0.003645 ## [731] train-rmse:0.412423+0.000398 test-rmse:0.424007+0.003644 ## [732] train-rmse:0.412417+0.000400 test-rmse:0.424010+0.003646 ## [733] train-rmse:0.412404+0.000399 test-rmse:0.424011+0.003649 ## [734] train-rmse:0.412390+0.000400 test-rmse:0.424011+0.003648 ## [735] train-rmse:0.412378+0.000402 test-rmse:0.424011+0.003651 ## [736] train-rmse:0.412364+0.000404 test-rmse:0.424013+0.003650 ## [737] train-rmse:0.412352+0.000401 test-rmse:0.424014+0.003650 ## [738] train-rmse:0.412340+0.000396 test-rmse:0.424014+0.003652 ## [739] train-rmse:0.412332+0.000395 test-rmse:0.424016+0.003652 ## [740] train-rmse:0.412317+0.000393 test-rmse:0.424015+0.003652 ## [741] train-rmse:0.412304+0.000390 test-rmse:0.424017+0.003654 ## [742] train-rmse:0.412290+0.000388 test-rmse:0.424019+0.003656 ## [743] train-rmse:0.412278+0.000388 test-rmse:0.424022+0.003655 ## [744] train-rmse:0.412270+0.000390 test-rmse:0.424023+0.003654 ## [745] train-rmse:0.412259+0.000389 test-rmse:0.424023+0.003655 ## [746] train-rmse:0.412242+0.000392 test-rmse:0.424021+0.003653 ## [747] train-rmse:0.412230+0.000394 test-rmse:0.424018+0.003654 ## [748] train-rmse:0.412220+0.000395 test-rmse:0.424019+0.003654 ## [749] train-rmse:0.412207+0.000394 test-rmse:0.424018+0.003655 ## [750] train-rmse:0.412195+0.000396 test-rmse:0.424021+0.003656 ## [751] train-rmse:0.412184+0.000392 test-rmse:0.424021+0.003656 ## [752] train-rmse:0.412171+0.000391 test-rmse:0.424022+0.003655 ## [753] train-rmse:0.412160+0.000392 test-rmse:0.424024+0.003658 ## [754] train-rmse:0.412147+0.000392 test-rmse:0.424027+0.003657 ## [755] train-rmse:0.412136+0.000392 test-rmse:0.424029+0.003659 ## [756] train-rmse:0.412125+0.000391 test-rmse:0.424029+0.003658 ## [757] train-rmse:0.412112+0.000390 test-rmse:0.424030+0.003659 ## [758] train-rmse:0.412099+0.000387 test-rmse:0.424028+0.003660 ## [759] train-rmse:0.412086+0.000387 test-rmse:0.424029+0.003660 ## [760] train-rmse:0.412077+0.000388 test-rmse:0.424030+0.003658 ## [761] train-rmse:0.412063+0.000384 test-rmse:0.424031+0.003657 ## [762] train-rmse:0.412051+0.000382 test-rmse:0.424030+0.003656 ## [763] train-rmse:0.412041+0.000381 test-rmse:0.424031+0.003656 ## [764] train-rmse:0.412029+0.000380 test-rmse:0.424031+0.003660 ## [765] train-rmse:0.412014+0.000378 test-rmse:0.424030+0.003659 ## [766] train-rmse:0.412000+0.000377 test-rmse:0.424028+0.003656 ## [767] train-rmse:0.411988+0.000378 test-rmse:0.424027+0.003657 ## [768] train-rmse:0.411975+0.000379 test-rmse:0.424028+0.003659 ## [769] train-rmse:0.411965+0.000380 test-rmse:0.424031+0.003657 ## [770] train-rmse:0.411952+0.000384 test-rmse:0.424033+0.003656 ## [771] train-rmse:0.411938+0.000385 test-rmse:0.424033+0.003656 ## [772] train-rmse:0.411928+0.000388 test-rmse:0.424035+0.003657 ## [773] train-rmse:0.411915+0.000389 test-rmse:0.424035+0.003658 ## [774] train-rmse:0.411903+0.000391 test-rmse:0.424038+0.003658 ## [775] train-rmse:0.411894+0.000393 test-rmse:0.424037+0.003656 ## [776] train-rmse:0.411884+0.000395 test-rmse:0.424037+0.003655 ## [777] train-rmse:0.411875+0.000396 test-rmse:0.424034+0.003653 ## [778] train-rmse:0.411865+0.000395 test-rmse:0.424036+0.003655 ## [779] train-rmse:0.411855+0.000396 test-rmse:0.424038+0.003655 ## [780] train-rmse:0.411845+0.000398 test-rmse:0.424037+0.003653 ## [781] train-rmse:0.411833+0.000399 test-rmse:0.424038+0.003654 ## [782] train-rmse:0.411827+0.000399 test-rmse:0.424037+0.003654 ## [783] train-rmse:0.411818+0.000401 test-rmse:0.424036+0.003653 ## [784] train-rmse:0.411809+0.000399 test-rmse:0.424037+0.003653 ## [785] train-rmse:0.411799+0.000400 test-rmse:0.424036+0.003654 ## [786] train-rmse:0.411788+0.000398 test-rmse:0.424039+0.003652 ## [787] train-rmse:0.411778+0.000396 test-rmse:0.424041+0.003650 ## [788] train-rmse:0.411768+0.000392 test-rmse:0.424040+0.003655 ## [789] train-rmse:0.411759+0.000388 test-rmse:0.424039+0.003655 ## [790] train-rmse:0.411744+0.000386 test-rmse:0.424038+0.003655 ## [791] train-rmse:0.411729+0.000385 test-rmse:0.424041+0.003651 ## [792] train-rmse:0.411720+0.000385 test-rmse:0.424041+0.003651 ## [793] train-rmse:0.411711+0.000387 test-rmse:0.424042+0.003652 ## [794] train-rmse:0.411698+0.000386 test-rmse:0.424041+0.003652 ## [795] train-rmse:0.411686+0.000384 test-rmse:0.424042+0.003652 ## [796] train-rmse:0.411672+0.000387 test-rmse:0.424039+0.003654 ## [797] train-rmse:0.411661+0.000385 test-rmse:0.424040+0.003654 ## [798] train-rmse:0.411649+0.000382 test-rmse:0.424040+0.003654 ## [799] train-rmse:0.411639+0.000381 test-rmse:0.424039+0.003656 ## [800] train-rmse:0.411625+0.000383 test-rmse:0.424037+0.003655 ## [801] train-rmse:0.411611+0.000385 test-rmse:0.424039+0.003655 ## [802] train-rmse:0.411599+0.000385 test-rmse:0.424040+0.003656 ## [803] train-rmse:0.411588+0.000386 test-rmse:0.424042+0.003654 ## [804] train-rmse:0.411580+0.000385 test-rmse:0.424041+0.003653 ## [805] train-rmse:0.411567+0.000385 test-rmse:0.424040+0.003655 ## [806] train-rmse:0.411558+0.000386 test-rmse:0.424042+0.003658 ## [807] train-rmse:0.411545+0.000384 test-rmse:0.424042+0.003657 ## [808] train-rmse:0.411531+0.000383 test-rmse:0.424041+0.003656 ## [809] train-rmse:0.411518+0.000382 test-rmse:0.424043+0.003657 ## [810] train-rmse:0.411508+0.000381 test-rmse:0.424045+0.003657 ## [811] train-rmse:0.411494+0.000375 test-rmse:0.424042+0.003657 ## [812] train-rmse:0.411482+0.000374 test-rmse:0.424043+0.003658 ## [813] train-rmse:0.411471+0.000377 test-rmse:0.424042+0.003658 ## [814] train-rmse:0.411456+0.000378 test-rmse:0.424044+0.003660 ## [815] train-rmse:0.411442+0.000377 test-rmse:0.424043+0.003662 ## [816] train-rmse:0.411431+0.000378 test-rmse:0.424044+0.003662 ## [817] train-rmse:0.411422+0.000379 test-rmse:0.424048+0.003660 ## [818] train-rmse:0.411414+0.000382 test-rmse:0.424049+0.003662 ## [819] train-rmse:0.411401+0.000385 test-rmse:0.424049+0.003658 ## [820] train-rmse:0.411391+0.000382 test-rmse:0.424046+0.003658 ## [821] train-rmse:0.411380+0.000384 test-rmse:0.424050+0.003656 ## [822] train-rmse:0.411367+0.000382 test-rmse:0.424047+0.003655 ## [823] train-rmse:0.411354+0.000384 test-rmse:0.424046+0.003656 ## [824] train-rmse:0.411344+0.000384 test-rmse:0.424048+0.003656 ## [825] train-rmse:0.411329+0.000385 test-rmse:0.424048+0.003652 ## [826] train-rmse:0.411315+0.000388 test-rmse:0.424049+0.003652 ## [827] train-rmse:0.411304+0.000387 test-rmse:0.424051+0.003654 ## [828] train-rmse:0.411295+0.000385 test-rmse:0.424053+0.003653 ## [829] train-rmse:0.411285+0.000383 test-rmse:0.424053+0.003651 ## [830] train-rmse:0.411274+0.000387 test-rmse:0.424053+0.003649 ## [831] train-rmse:0.411261+0.000387 test-rmse:0.424054+0.003649 ## [832] train-rmse:0.411248+0.000388 test-rmse:0.424054+0.003648 ## [833] train-rmse:0.411237+0.000389 test-rmse:0.424058+0.003647 ## [834] train-rmse:0.411226+0.000390 test-rmse:0.424060+0.003650 ## [835] train-rmse:0.411215+0.000390 test-rmse:0.424060+0.003649 ## [836] train-rmse:0.411201+0.000388 test-rmse:0.424060+0.003647 ## [837] train-rmse:0.411191+0.000392 test-rmse:0.424061+0.003648 ## [838] train-rmse:0.411178+0.000393 test-rmse:0.424059+0.003647 ## [839] train-rmse:0.411163+0.000396 test-rmse:0.424056+0.003646 ## [840] train-rmse:0.411151+0.000397 test-rmse:0.424057+0.003647 ## [841] train-rmse:0.411141+0.000394 test-rmse:0.424058+0.003646 ## [842] train-rmse:0.411130+0.000395 test-rmse:0.424059+0.003646 ## [843] train-rmse:0.411118+0.000397 test-rmse:0.424058+0.003645 ## [844] train-rmse:0.411108+0.000398 test-rmse:0.424060+0.003644 ## [845] train-rmse:0.411094+0.000399 test-rmse:0.424058+0.003641 ## [846] train-rmse:0.411081+0.000402 test-rmse:0.424058+0.003644 ## [847] train-rmse:0.411069+0.000404 test-rmse:0.424056+0.003643 ## [848] train-rmse:0.411056+0.000408 test-rmse:0.424056+0.003641 ## [849] train-rmse:0.411044+0.000404 test-rmse:0.424057+0.003641 ## [850] train-rmse:0.411033+0.000409 test-rmse:0.424058+0.003636 ## [851] train-rmse:0.411021+0.000413 test-rmse:0.424057+0.003636 ## [852] train-rmse:0.411010+0.000412 test-rmse:0.424057+0.003638 ## [853] train-rmse:0.410999+0.000411 test-rmse:0.424059+0.003638 ## [854] train-rmse:0.410989+0.000412 test-rmse:0.424060+0.003639 ## [855] train-rmse:0.410978+0.000411 test-rmse:0.424061+0.003638 ## [856] train-rmse:0.410966+0.000411 test-rmse:0.424062+0.003640 ## [857] train-rmse:0.410951+0.000408 test-rmse:0.424062+0.003642 ## [858] train-rmse:0.410941+0.000410 test-rmse:0.424063+0.003641 ## [859] train-rmse:0.410933+0.000410 test-rmse:0.424065+0.003638 ## [860] train-rmse:0.410925+0.000413 test-rmse:0.424067+0.003638 ## [861] train-rmse:0.410912+0.000413 test-rmse:0.424068+0.003638 ## [862] train-rmse:0.410903+0.000416 test-rmse:0.424069+0.003635 ## [863] train-rmse:0.410891+0.000418 test-rmse:0.424068+0.003635 ## [864] train-rmse:0.410882+0.000420 test-rmse:0.424068+0.003632 ## [865] train-rmse:0.410870+0.000421 test-rmse:0.424069+0.003633 ## [866] train-rmse:0.410861+0.000422 test-rmse:0.424067+0.003635 ## [867] train-rmse:0.410850+0.000421 test-rmse:0.424069+0.003636 ## [868] train-rmse:0.410839+0.000421 test-rmse:0.424071+0.003636 ## [869] train-rmse:0.410826+0.000422 test-rmse:0.424073+0.003637 ## [870] train-rmse:0.410817+0.000420 test-rmse:0.424075+0.003639 ## [871] train-rmse:0.410805+0.000420 test-rmse:0.424076+0.003641 ## [872] train-rmse:0.410793+0.000421 test-rmse:0.424078+0.003644 ## [873] train-rmse:0.410781+0.000422 test-rmse:0.424081+0.003647 ## [874] train-rmse:0.410772+0.000424 test-rmse:0.424082+0.003650 ## [875] train-rmse:0.410760+0.000426 test-rmse:0.424084+0.003647 ## [876] train-rmse:0.410749+0.000427 test-rmse:0.424084+0.003648 ## [877] train-rmse:0.410740+0.000430 test-rmse:0.424084+0.003651 ## [878] train-rmse:0.410726+0.000429 test-rmse:0.424088+0.003649 ## [879] train-rmse:0.410717+0.000432 test-rmse:0.424088+0.003650 ## [880] train-rmse:0.410710+0.000433 test-rmse:0.424088+0.003647 ## [881] train-rmse:0.410699+0.000434 test-rmse:0.424091+0.003647 ## [882] train-rmse:0.410690+0.000434 test-rmse:0.424094+0.003647 ## [883] train-rmse:0.410676+0.000436 test-rmse:0.424096+0.003646 ## [884] train-rmse:0.410666+0.000437 test-rmse:0.424095+0.003647 ## [885] train-rmse:0.410656+0.000438 test-rmse:0.424095+0.003647 ## [886] train-rmse:0.410649+0.000443 test-rmse:0.424098+0.003647 ## [887] train-rmse:0.410638+0.000445 test-rmse:0.424099+0.003648 ## [888] train-rmse:0.410625+0.000446 test-rmse:0.424105+0.003650 ## [889] train-rmse:0.410612+0.000449 test-rmse:0.424107+0.003651 ## [890] train-rmse:0.410602+0.000451 test-rmse:0.424107+0.003652 ## [891] train-rmse:0.410593+0.000454 test-rmse:0.424109+0.003653 ## [892] train-rmse:0.410584+0.000455 test-rmse:0.424110+0.003655 ## [893] train-rmse:0.410573+0.000455 test-rmse:0.424110+0.003653 ## [894] train-rmse:0.410559+0.000454 test-rmse:0.424113+0.003651 ## [895] train-rmse:0.410549+0.000453 test-rmse:0.424114+0.003653 ## [896] train-rmse:0.410537+0.000451 test-rmse:0.424110+0.003653 ## [897] train-rmse:0.410528+0.000452 test-rmse:0.424114+0.003657 ## [898] train-rmse:0.410517+0.000451 test-rmse:0.424116+0.003655 ## [899] train-rmse:0.410507+0.000454 test-rmse:0.424116+0.003657 ## [900] train-rmse:0.410498+0.000453 test-rmse:0.424115+0.003659 ## [901] train-rmse:0.410487+0.000453 test-rmse:0.424114+0.003658 ## [902] train-rmse:0.410475+0.000451 test-rmse:0.424114+0.003659 ## [903] train-rmse:0.410462+0.000451 test-rmse:0.424113+0.003663 ## [904] train-rmse:0.410452+0.000449 test-rmse:0.424112+0.003666 ## [905] train-rmse:0.410441+0.000452 test-rmse:0.424115+0.003667 ## [906] train-rmse:0.410432+0.000451 test-rmse:0.424115+0.003668 ## [907] train-rmse:0.410420+0.000448 test-rmse:0.424115+0.003671 ## [908] train-rmse:0.410408+0.000446 test-rmse:0.424115+0.003671 ## [909] train-rmse:0.410395+0.000446 test-rmse:0.424121+0.003672 ## [910] train-rmse:0.410382+0.000448 test-rmse:0.424120+0.003672 ## [911] train-rmse:0.410371+0.000447 test-rmse:0.424123+0.003668 ## [912] train-rmse:0.410362+0.000450 test-rmse:0.424124+0.003669 ## [913] train-rmse:0.410348+0.000449 test-rmse:0.424123+0.003671 ## [914] train-rmse:0.410335+0.000450 test-rmse:0.424125+0.003669 ## [915] train-rmse:0.410325+0.000451 test-rmse:0.424127+0.003669 ## [916] train-rmse:0.410310+0.000451 test-rmse:0.424126+0.003671 ## [917] train-rmse:0.410297+0.000455 test-rmse:0.424129+0.003672 ## [918] train-rmse:0.410285+0.000454 test-rmse:0.424130+0.003672 ## [919] train-rmse:0.410270+0.000456 test-rmse:0.424130+0.003674 ## [920] train-rmse:0.410258+0.000454 test-rmse:0.424131+0.003674 ## [921] train-rmse:0.410246+0.000455 test-rmse:0.424134+0.003669 ## [922] train-rmse:0.410235+0.000457 test-rmse:0.424135+0.003670 ## [923] train-rmse:0.410226+0.000459 test-rmse:0.424134+0.003669 ## [924] train-rmse:0.410210+0.000459 test-rmse:0.424131+0.003662 ## [925] train-rmse:0.410197+0.000459 test-rmse:0.424136+0.003663 ## [926] train-rmse:0.410185+0.000459 test-rmse:0.424136+0.003662 ## [927] train-rmse:0.410168+0.000460 test-rmse:0.424136+0.003660 ## [928] train-rmse:0.410156+0.000461 test-rmse:0.424139+0.003661 ## [929] train-rmse:0.410143+0.000459 test-rmse:0.424137+0.003662 ## [930] train-rmse:0.410132+0.000459 test-rmse:0.424135+0.003663 ## [931] train-rmse:0.410121+0.000462 test-rmse:0.424134+0.003664 ## [932] train-rmse:0.410108+0.000465 test-rmse:0.424135+0.003664 ## [933] train-rmse:0.410096+0.000464 test-rmse:0.424138+0.003663 ## [934] train-rmse:0.410083+0.000468 test-rmse:0.424140+0.003662 ## [935] train-rmse:0.410075+0.000470 test-rmse:0.424140+0.003663 ## [936] train-rmse:0.410063+0.000469 test-rmse:0.424141+0.003664 ## [937] train-rmse:0.410051+0.000469 test-rmse:0.424142+0.003666 ## [938] train-rmse:0.410039+0.000471 test-rmse:0.424144+0.003667 ## [939] train-rmse:0.410028+0.000472 test-rmse:0.424148+0.003667 ## [940] train-rmse:0.410020+0.000473 test-rmse:0.424149+0.003668 ## [941] train-rmse:0.410006+0.000472 test-rmse:0.424150+0.003668 ## [942] train-rmse:0.409995+0.000472 test-rmse:0.424150+0.003669 ## [943] train-rmse:0.409984+0.000472 test-rmse:0.424151+0.003671 ## [944] train-rmse:0.409972+0.000471 test-rmse:0.424152+0.003672 ## [945] train-rmse:0.409961+0.000469 test-rmse:0.424156+0.003669 ## [946] train-rmse:0.409950+0.000470 test-rmse:0.424154+0.003669 ## [947] train-rmse:0.409936+0.000470 test-rmse:0.424155+0.003668 ## [948] train-rmse:0.409925+0.000470 test-rmse:0.424154+0.003669 ## [949] train-rmse:0.409914+0.000472 test-rmse:0.424152+0.003668 ## [950] train-rmse:0.409905+0.000469 test-rmse:0.424154+0.003668 ## [951] train-rmse:0.409894+0.000472 test-rmse:0.424154+0.003666 ## [952] train-rmse:0.409882+0.000474 test-rmse:0.424154+0.003665 ## [953] train-rmse:0.409872+0.000472 test-rmse:0.424152+0.003666 ## [954] train-rmse:0.409860+0.000469 test-rmse:0.424150+0.003668 ## [955] train-rmse:0.409845+0.000465 test-rmse:0.424148+0.003669 ## [956] train-rmse:0.409835+0.000462 test-rmse:0.424149+0.003670 ## [957] train-rmse:0.409822+0.000462 test-rmse:0.424147+0.003673 ## [958] train-rmse:0.409814+0.000459 test-rmse:0.424144+0.003673 ## [959] train-rmse:0.409803+0.000461 test-rmse:0.424145+0.003673 ## [960] train-rmse:0.409792+0.000459 test-rmse:0.424145+0.003671 ## [961] train-rmse:0.409780+0.000460 test-rmse:0.424144+0.003671 ## [962] train-rmse:0.409771+0.000454 test-rmse:0.424144+0.003673 ## [963] train-rmse:0.409762+0.000455 test-rmse:0.424144+0.003674 ## [964] train-rmse:0.409750+0.000452 test-rmse:0.424144+0.003676 ## [965] train-rmse:0.409737+0.000449 test-rmse:0.424145+0.003676 ## [966] train-rmse:0.409727+0.000448 test-rmse:0.424146+0.003675 ## [967] train-rmse:0.409719+0.000446 test-rmse:0.424149+0.003675 ## [968] train-rmse:0.409707+0.000447 test-rmse:0.424149+0.003673 ## [969] train-rmse:0.409695+0.000448 test-rmse:0.424151+0.003676 ## [970] train-rmse:0.409684+0.000451 test-rmse:0.424151+0.003679 ## [971] train-rmse:0.409674+0.000448 test-rmse:0.424153+0.003677 ## [972] train-rmse:0.409662+0.000445 test-rmse:0.424153+0.003678 ## [973] train-rmse:0.409653+0.000443 test-rmse:0.424153+0.003679 ## [974] train-rmse:0.409641+0.000445 test-rmse:0.424153+0.003674 ## [975] train-rmse:0.409630+0.000448 test-rmse:0.424154+0.003674 ## [976] train-rmse:0.409619+0.000446 test-rmse:0.424154+0.003673 ## [977] train-rmse:0.409607+0.000447 test-rmse:0.424151+0.003670 ## [978] train-rmse:0.409595+0.000447 test-rmse:0.424151+0.003671 ## [979] train-rmse:0.409581+0.000448 test-rmse:0.424151+0.003671 ## [980] train-rmse:0.409568+0.000450 test-rmse:0.424152+0.003670 ## [981] train-rmse:0.409556+0.000453 test-rmse:0.424152+0.003669 ## [982] train-rmse:0.409546+0.000455 test-rmse:0.424152+0.003669 ## [983] train-rmse:0.409536+0.000459 test-rmse:0.424153+0.003668 ## [984] train-rmse:0.409525+0.000460 test-rmse:0.424154+0.003667 ## [985] train-rmse:0.409512+0.000464 test-rmse:0.424153+0.003665 ## [986] train-rmse:0.409499+0.000463 test-rmse:0.424156+0.003665 ## [987] train-rmse:0.409486+0.000466 test-rmse:0.424158+0.003664 ## [988] train-rmse:0.409473+0.000467 test-rmse:0.424157+0.003665 ## [989] train-rmse:0.409463+0.000466 test-rmse:0.424155+0.003669 ## [990] train-rmse:0.409453+0.000466 test-rmse:0.424158+0.003669 ## [991] train-rmse:0.409438+0.000468 test-rmse:0.424159+0.003667 ## [992] train-rmse:0.409427+0.000467 test-rmse:0.424162+0.003669 ## [993] train-rmse:0.409414+0.000467 test-rmse:0.424159+0.003668 ## [994] train-rmse:0.409401+0.000469 test-rmse:0.424158+0.003667 ## [995] train-rmse:0.409392+0.000471 test-rmse:0.424155+0.003668 ## [996] train-rmse:0.409382+0.000470 test-rmse:0.424155+0.003668 ## [997] train-rmse:0.409371+0.000470 test-rmse:0.424158+0.003668 ## [998] train-rmse:0.409362+0.000471 test-rmse:0.424158+0.003667 ## [999] train-rmse:0.409350+0.000473 test-rmse:0.424159+0.003666 ## [1000] train-rmse:0.409339+0.000472 test-rmse:0.424161+0.003664 ## [1001] train-rmse:0.409331+0.000476 test-rmse:0.424162+0.003664 ## [1002] train-rmse:0.409323+0.000474 test-rmse:0.424161+0.003665 ## [1003] train-rmse:0.409314+0.000474 test-rmse:0.424159+0.003662 ## [1004] train-rmse:0.409303+0.000473 test-rmse:0.424159+0.003662 ## [1005] train-rmse:0.409292+0.000475 test-rmse:0.424158+0.003662 ## [1006] train-rmse:0.409282+0.000475 test-rmse:0.424159+0.003660 ## [1007] train-rmse:0.409270+0.000477 test-rmse:0.424161+0.003661 ## [1008] train-rmse:0.409259+0.000474 test-rmse:0.424162+0.003660 ## [1009] train-rmse:0.409249+0.000474 test-rmse:0.424162+0.003662 ## [1010] train-rmse:0.409239+0.000475 test-rmse:0.424164+0.003663 ## [1011] train-rmse:0.409230+0.000474 test-rmse:0.424164+0.003664 ## [1012] train-rmse:0.409217+0.000475 test-rmse:0.424163+0.003666 ## [1013] train-rmse:0.409206+0.000476 test-rmse:0.424164+0.003666 ## [1014] train-rmse:0.409197+0.000474 test-rmse:0.424163+0.003668 ## [1015] train-rmse:0.409186+0.000478 test-rmse:0.424161+0.003664 ## [1016] train-rmse:0.409177+0.000482 test-rmse:0.424162+0.003666 ## [1017] train-rmse:0.409163+0.000484 test-rmse:0.424165+0.003669 ## [1018] train-rmse:0.409151+0.000484 test-rmse:0.424167+0.003670 ## [1019] train-rmse:0.409139+0.000483 test-rmse:0.424167+0.003664 ## [1020] train-rmse:0.409126+0.000483 test-rmse:0.424167+0.003662 ## [1021] train-rmse:0.409117+0.000484 test-rmse:0.424169+0.003660 ## [1022] train-rmse:0.409106+0.000488 test-rmse:0.424169+0.003659 ## [1023] train-rmse:0.409096+0.000488 test-rmse:0.424167+0.003659 ## [1024] train-rmse:0.409086+0.000488 test-rmse:0.424166+0.003657 ## [1025] train-rmse:0.409075+0.000489 test-rmse:0.424166+0.003657 ## [1026] train-rmse:0.409062+0.000488 test-rmse:0.424167+0.003659 ## [1027] train-rmse:0.409052+0.000491 test-rmse:0.424168+0.003657 ## [1028] train-rmse:0.409041+0.000491 test-rmse:0.424167+0.003659 ## [1029] train-rmse:0.409028+0.000494 test-rmse:0.424169+0.003656 ## [1030] train-rmse:0.409016+0.000496 test-rmse:0.424170+0.003657 ## [1031] train-rmse:0.409007+0.000496 test-rmse:0.424172+0.003657 ## [1032] train-rmse:0.408994+0.000494 test-rmse:0.424172+0.003655 ## [1033] train-rmse:0.408984+0.000492 test-rmse:0.424171+0.003657 ## [1034] train-rmse:0.408977+0.000491 test-rmse:0.424172+0.003657 ## [1035] train-rmse:0.408968+0.000493 test-rmse:0.424173+0.003657 ## [1036] train-rmse:0.408955+0.000491 test-rmse:0.424174+0.003657 ## [1037] train-rmse:0.408944+0.000489 test-rmse:0.424177+0.003654 ## [1038] train-rmse:0.408932+0.000489 test-rmse:0.424174+0.003657 ## [1039] train-rmse:0.408920+0.000487 test-rmse:0.424177+0.003658 ## [1040] train-rmse:0.408912+0.000488 test-rmse:0.424178+0.003658 ## [1041] train-rmse:0.408899+0.000490 test-rmse:0.424177+0.003661 ## [1042] train-rmse:0.408888+0.000488 test-rmse:0.424176+0.003662 ## [1043] train-rmse:0.408874+0.000486 test-rmse:0.424176+0.003664 ## [1044] train-rmse:0.408863+0.000486 test-rmse:0.424176+0.003665 ## [1045] train-rmse:0.408852+0.000487 test-rmse:0.424177+0.003668 ## [1046] train-rmse:0.408843+0.000488 test-rmse:0.424179+0.003669 ## [1047] train-rmse:0.408832+0.000486 test-rmse:0.424178+0.003668 ## [1048] train-rmse:0.408823+0.000488 test-rmse:0.424183+0.003668 ## [1049] train-rmse:0.408814+0.000491 test-rmse:0.424184+0.003666 ## [1050] train-rmse:0.408807+0.000489 test-rmse:0.424184+0.003666 ## [1051] train-rmse:0.408799+0.000490 test-rmse:0.424184+0.003666 ## [1052] train-rmse:0.408789+0.000486 test-rmse:0.424187+0.003664 ## [1053] train-rmse:0.408778+0.000487 test-rmse:0.424188+0.003666 ## [1054] train-rmse:0.408770+0.000483 test-rmse:0.424189+0.003668 ## [1055] train-rmse:0.408759+0.000483 test-rmse:0.424189+0.003668 ## [1056] train-rmse:0.408750+0.000482 test-rmse:0.424191+0.003668 ## [1057] train-rmse:0.408739+0.000483 test-rmse:0.424191+0.003668 ## [1058] train-rmse:0.408728+0.000482 test-rmse:0.424192+0.003669 ## [1059] train-rmse:0.408718+0.000481 test-rmse:0.424193+0.003667 ## [1060] train-rmse:0.408709+0.000479 test-rmse:0.424195+0.003668 ## [1061] train-rmse:0.408700+0.000481 test-rmse:0.424194+0.003666 ## [1062] train-rmse:0.408691+0.000481 test-rmse:0.424193+0.003666 ## [1063] train-rmse:0.408682+0.000484 test-rmse:0.424193+0.003666 ## [1064] train-rmse:0.408672+0.000484 test-rmse:0.424193+0.003665 ## [1065] train-rmse:0.408663+0.000483 test-rmse:0.424192+0.003666 ## [1066] train-rmse:0.408653+0.000482 test-rmse:0.424194+0.003665 ## [1067] train-rmse:0.408641+0.000482 test-rmse:0.424198+0.003665 ## [1068] train-rmse:0.408631+0.000481 test-rmse:0.424197+0.003667 ## [1069] train-rmse:0.408619+0.000481 test-rmse:0.424198+0.003668 ## [1070] train-rmse:0.408608+0.000478 test-rmse:0.424199+0.003669 ## [1071] train-rmse:0.408600+0.000478 test-rmse:0.424199+0.003668 ## [1072] train-rmse:0.408590+0.000478 test-rmse:0.424203+0.003668 ## [1073] train-rmse:0.408578+0.000478 test-rmse:0.424203+0.003669 ## [1074] train-rmse:0.408568+0.000477 test-rmse:0.424203+0.003667 ## [1075] train-rmse:0.408555+0.000475 test-rmse:0.424203+0.003667 ## [1076] train-rmse:0.408545+0.000476 test-rmse:0.424204+0.003668 ## [1077] train-rmse:0.408536+0.000474 test-rmse:0.424203+0.003669 ## [1078] train-rmse:0.408527+0.000473 test-rmse:0.424204+0.003669 ## [1079] train-rmse:0.408517+0.000470 test-rmse:0.424203+0.003669 ## [1080] train-rmse:0.408505+0.000471 test-rmse:0.424203+0.003668 ## [1081] train-rmse:0.408493+0.000471 test-rmse:0.424201+0.003667 ## [1082] train-rmse:0.408480+0.000470 test-rmse:0.424203+0.003665 ## [1083] train-rmse:0.408470+0.000469 test-rmse:0.424204+0.003665 ## [1084] train-rmse:0.408458+0.000470 test-rmse:0.424201+0.003666 ## [1085] train-rmse:0.408448+0.000468 test-rmse:0.424202+0.003668 ## [1086] train-rmse:0.408438+0.000468 test-rmse:0.424202+0.003665 ## [1087] train-rmse:0.408423+0.000470 test-rmse:0.424202+0.003666 ## [1088] train-rmse:0.408413+0.000466 test-rmse:0.424204+0.003668 ## [1089] train-rmse:0.408400+0.000465 test-rmse:0.424205+0.003667 ## [1090] train-rmse:0.408388+0.000466 test-rmse:0.424205+0.003669 ## [1091] train-rmse:0.408374+0.000465 test-rmse:0.424205+0.003670 ## [1092] train-rmse:0.408367+0.000465 test-rmse:0.424208+0.003671 ## [1093] train-rmse:0.408357+0.000463 test-rmse:0.424209+0.003673 ## [1094] train-rmse:0.408350+0.000466 test-rmse:0.424209+0.003673 ## [1095] train-rmse:0.408339+0.000468 test-rmse:0.424209+0.003672 ## [1096] train-rmse:0.408329+0.000467 test-rmse:0.424210+0.003671 ## [1097] train-rmse:0.408317+0.000469 test-rmse:0.424211+0.003669 ## [1098] train-rmse:0.408307+0.000472 test-rmse:0.424212+0.003669 ## [1099] train-rmse:0.408296+0.000473 test-rmse:0.424215+0.003669 ## [1100] train-rmse:0.408285+0.000475 test-rmse:0.424214+0.003663 ## [1101] train-rmse:0.408276+0.000477 test-rmse:0.424215+0.003663 ## [1102] train-rmse:0.408268+0.000481 test-rmse:0.424217+0.003665 ## [1103] train-rmse:0.408261+0.000481 test-rmse:0.424218+0.003666 ## [1104] train-rmse:0.408252+0.000483 test-rmse:0.424217+0.003665 ## [1105] train-rmse:0.408244+0.000481 test-rmse:0.424216+0.003666 ## [1106] train-rmse:0.408235+0.000485 test-rmse:0.424217+0.003664 ## [1107] train-rmse:0.408226+0.000484 test-rmse:0.424218+0.003662 ## [1108] train-rmse:0.408217+0.000488 test-rmse:0.424219+0.003662 ## [1109] train-rmse:0.408203+0.000489 test-rmse:0.424219+0.003661 ## [1110] train-rmse:0.408193+0.000490 test-rmse:0.424218+0.003660 ## [1111] train-rmse:0.408184+0.000494 test-rmse:0.424219+0.003662 ## [1112] train-rmse:0.408172+0.000494 test-rmse:0.424219+0.003661 ## [1113] train-rmse:0.408163+0.000494 test-rmse:0.424222+0.003662 ## [1114] train-rmse:0.408148+0.000496 test-rmse:0.424220+0.003662 ## [1115] train-rmse:0.408141+0.000497 test-rmse:0.424221+0.003658 ## [1116] train-rmse:0.408132+0.000500 test-rmse:0.424222+0.003659 ## [1117] train-rmse:0.408123+0.000502 test-rmse:0.424224+0.003660 ## [1118] train-rmse:0.408116+0.000504 test-rmse:0.424227+0.003661 ## [1119] train-rmse:0.408109+0.000506 test-rmse:0.424227+0.003661 ## [1120] train-rmse:0.408102+0.000508 test-rmse:0.424228+0.003661 ## [1121] train-rmse:0.408090+0.000506 test-rmse:0.424230+0.003658 ## [1122] train-rmse:0.408082+0.000506 test-rmse:0.424232+0.003659 ## [1123] train-rmse:0.408071+0.000506 test-rmse:0.424230+0.003660 ## [1124] train-rmse:0.408062+0.000508 test-rmse:0.424231+0.003657 ## [1125] train-rmse:0.408050+0.000509 test-rmse:0.424230+0.003657 ## [1126] train-rmse:0.408041+0.000510 test-rmse:0.424231+0.003657 ## [1127] train-rmse:0.408031+0.000510 test-rmse:0.424230+0.003658 ## [1128] train-rmse:0.408022+0.000512 test-rmse:0.424231+0.003658 ## [1129] train-rmse:0.408007+0.000509 test-rmse:0.424230+0.003657 ## [1130] train-rmse:0.407996+0.000509 test-rmse:0.424230+0.003657 ## [1131] train-rmse:0.407987+0.000507 test-rmse:0.424230+0.003658 ## [1132] train-rmse:0.407977+0.000507 test-rmse:0.424234+0.003658 ## [1133] train-rmse:0.407965+0.000504 test-rmse:0.424233+0.003659 ## [1134] train-rmse:0.407955+0.000502 test-rmse:0.424233+0.003660 ## [1135] train-rmse:0.407949+0.000502 test-rmse:0.424234+0.003659 ## [1136] train-rmse:0.407941+0.000499 test-rmse:0.424233+0.003658 ## [1137] train-rmse:0.407932+0.000500 test-rmse:0.424234+0.003660 ## [1138] train-rmse:0.407924+0.000504 test-rmse:0.424234+0.003660 ## [1139] train-rmse:0.407914+0.000504 test-rmse:0.424237+0.003661 ## [1140] train-rmse:0.407905+0.000504 test-rmse:0.424238+0.003662 ## [1141] train-rmse:0.407896+0.000505 test-rmse:0.424240+0.003661 ## [1142] train-rmse:0.407887+0.000504 test-rmse:0.424239+0.003663 ## [1143] train-rmse:0.407878+0.000505 test-rmse:0.424238+0.003661 ## [1144] train-rmse:0.407870+0.000505 test-rmse:0.424238+0.003662 ## [1145] train-rmse:0.407864+0.000504 test-rmse:0.424237+0.003663 ## [1146] train-rmse:0.407853+0.000504 test-rmse:0.424241+0.003660 ## [1147] train-rmse:0.407842+0.000504 test-rmse:0.424241+0.003661 ## [1148] train-rmse:0.407832+0.000505 test-rmse:0.424239+0.003662 ## [1149] train-rmse:0.407821+0.000502 test-rmse:0.424240+0.003663 ## [1150] train-rmse:0.407810+0.000504 test-rmse:0.424242+0.003662 ## [1151] train-rmse:0.407805+0.000506 test-rmse:0.424240+0.003661 ## [1152] train-rmse:0.407793+0.000504 test-rmse:0.424236+0.003663 ## [1153] train-rmse:0.407783+0.000504 test-rmse:0.424239+0.003662 ## [1154] train-rmse:0.407775+0.000505 test-rmse:0.424239+0.003661 ## [1155] train-rmse:0.407758+0.000506 test-rmse:0.424241+0.003663 ## [1156] train-rmse:0.407746+0.000509 test-rmse:0.424240+0.003663 ## [1157] train-rmse:0.407733+0.000508 test-rmse:0.424243+0.003664 ## [1158] train-rmse:0.407724+0.000510 test-rmse:0.424245+0.003666 ## [1159] train-rmse:0.407717+0.000510 test-rmse:0.424246+0.003667 ## [1160] train-rmse:0.407706+0.000510 test-rmse:0.424246+0.003665 ## [1161] train-rmse:0.407694+0.000512 test-rmse:0.424244+0.003662 ## [1162] train-rmse:0.407684+0.000512 test-rmse:0.424245+0.003661 ## [1163] train-rmse:0.407673+0.000514 test-rmse:0.424245+0.003661 ## [1164] train-rmse:0.407662+0.000514 test-rmse:0.424243+0.003661 ## [1165] train-rmse:0.407652+0.000515 test-rmse:0.424244+0.003661 ## [1166] train-rmse:0.407639+0.000516 test-rmse:0.424244+0.003662 ## [1167] train-rmse:0.407626+0.000518 test-rmse:0.424243+0.003663 ## [1168] train-rmse:0.407611+0.000521 test-rmse:0.424243+0.003661 ## [1169] train-rmse:0.407600+0.000522 test-rmse:0.424242+0.003662 ## [1170] train-rmse:0.407590+0.000519 test-rmse:0.424241+0.003663 ## [1171] train-rmse:0.407579+0.000520 test-rmse:0.424243+0.003662 ## [1172] train-rmse:0.407564+0.000521 test-rmse:0.424241+0.003659 ## [1173] train-rmse:0.407554+0.000524 test-rmse:0.424242+0.003657 ## [1174] train-rmse:0.407542+0.000525 test-rmse:0.424238+0.003660 ## [1175] train-rmse:0.407533+0.000523 test-rmse:0.424236+0.003662 ## [1176] train-rmse:0.407521+0.000521 test-rmse:0.424233+0.003663 ## [1177] train-rmse:0.407513+0.000519 test-rmse:0.424235+0.003664 ## [1178] train-rmse:0.407500+0.000518 test-rmse:0.424237+0.003663 ## [1179] train-rmse:0.407490+0.000516 test-rmse:0.424240+0.003664 ## [1180] train-rmse:0.407478+0.000518 test-rmse:0.424240+0.003664 ## [1181] train-rmse:0.407466+0.000517 test-rmse:0.424242+0.003667 ## [1182] train-rmse:0.407457+0.000518 test-rmse:0.424241+0.003666 ## [1183] train-rmse:0.407445+0.000515 test-rmse:0.424239+0.003667 ## [1184] train-rmse:0.407433+0.000515 test-rmse:0.424238+0.003667 ## [1185] train-rmse:0.407425+0.000519 test-rmse:0.424236+0.003669 ## [1186] train-rmse:0.407416+0.000521 test-rmse:0.424235+0.003669 ## [1187] train-rmse:0.407403+0.000522 test-rmse:0.424236+0.003667 ## [1188] train-rmse:0.407389+0.000520 test-rmse:0.424238+0.003667 ## [1189] train-rmse:0.407378+0.000524 test-rmse:0.424240+0.003669 ## [1190] train-rmse:0.407365+0.000526 test-rmse:0.424240+0.003670 ## [1191] train-rmse:0.407355+0.000529 test-rmse:0.424242+0.003669 ## [1192] train-rmse:0.407344+0.000531 test-rmse:0.424242+0.003667 ## [1193] train-rmse:0.407333+0.000533 test-rmse:0.424240+0.003669 ## [1194] train-rmse:0.407322+0.000533 test-rmse:0.424243+0.003665 ## [1195] train-rmse:0.407312+0.000536 test-rmse:0.424243+0.003665 ## [1196] train-rmse:0.407301+0.000540 test-rmse:0.424245+0.003665 ## [1197] train-rmse:0.407290+0.000540 test-rmse:0.424244+0.003667 ## [1198] train-rmse:0.407278+0.000541 test-rmse:0.424241+0.003669 ## [1199] train-rmse:0.407263+0.000539 test-rmse:0.424247+0.003667 ## [1200] train-rmse:0.407251+0.000539 test-rmse:0.424245+0.003665 ## [1201] train-rmse:0.407240+0.000537 test-rmse:0.424243+0.003664 ## [1202] train-rmse:0.407229+0.000539 test-rmse:0.424245+0.003667 ## [1203] train-rmse:0.407220+0.000543 test-rmse:0.424245+0.003667 ## [1204] train-rmse:0.407209+0.000540 test-rmse:0.424246+0.003667 ## [1205] train-rmse:0.407198+0.000544 test-rmse:0.424243+0.003665 ## [1206] train-rmse:0.407186+0.000543 test-rmse:0.424243+0.003663 ## [1207] train-rmse:0.407176+0.000544 test-rmse:0.424245+0.003665 ## [1208] train-rmse:0.407166+0.000543 test-rmse:0.424245+0.003665 ## [1209] train-rmse:0.407156+0.000547 test-rmse:0.424247+0.003666 ## [1210] train-rmse:0.407145+0.000547 test-rmse:0.424246+0.003665 ## [1211] train-rmse:0.407137+0.000551 test-rmse:0.424245+0.003663 ## [1212] train-rmse:0.407128+0.000553 test-rmse:0.424244+0.003664 ## [1213] train-rmse:0.407115+0.000553 test-rmse:0.424242+0.003667 ## [1214] train-rmse:0.407106+0.000552 test-rmse:0.424244+0.003668 ## [1215] train-rmse:0.407094+0.000553 test-rmse:0.424244+0.003672 ## [1216] train-rmse:0.407082+0.000554 test-rmse:0.424245+0.003672 ## [1217] train-rmse:0.407072+0.000558 test-rmse:0.424243+0.003670 ## [1218] train-rmse:0.407061+0.000560 test-rmse:0.424242+0.003672 ## [1219] train-rmse:0.407051+0.000564 test-rmse:0.424241+0.003670 ## [1220] train-rmse:0.407041+0.000564 test-rmse:0.424242+0.003669 ## [1221] train-rmse:0.407031+0.000565 test-rmse:0.424243+0.003669 ## [1222] train-rmse:0.407021+0.000565 test-rmse:0.424243+0.003669 ## [1223] train-rmse:0.407009+0.000568 test-rmse:0.424242+0.003669 ## [1224] train-rmse:0.407000+0.000569 test-rmse:0.424242+0.003669 ## [1225] train-rmse:0.406990+0.000570 test-rmse:0.424242+0.003671 ## [1226] train-rmse:0.406980+0.000570 test-rmse:0.424241+0.003668 ## [1227] train-rmse:0.406970+0.000569 test-rmse:0.424242+0.003669 ## [1228] train-rmse:0.406957+0.000570 test-rmse:0.424246+0.003672 ## [1229] train-rmse:0.406948+0.000567 test-rmse:0.424248+0.003674 ## [1230] train-rmse:0.406939+0.000565 test-rmse:0.424247+0.003676 ## [1231] train-rmse:0.406928+0.000562 test-rmse:0.424245+0.003676 ## [1232] train-rmse:0.406920+0.000560 test-rmse:0.424246+0.003676 ## [1233] train-rmse:0.406906+0.000563 test-rmse:0.424249+0.003673 ## [1234] train-rmse:0.406897+0.000563 test-rmse:0.424252+0.003679 ## [1235] train-rmse:0.406888+0.000565 test-rmse:0.424254+0.003680 ## [1236] train-rmse:0.406878+0.000565 test-rmse:0.424255+0.003679 ## [1237] train-rmse:0.406867+0.000567 test-rmse:0.424254+0.003680 ## [1238] train-rmse:0.406856+0.000567 test-rmse:0.424256+0.003681 ## [1239] train-rmse:0.406842+0.000564 test-rmse:0.424255+0.003679 ## [1240] train-rmse:0.406832+0.000564 test-rmse:0.424256+0.003678 ## [1241] train-rmse:0.406822+0.000559 test-rmse:0.424252+0.003682 ## [1242] train-rmse:0.406815+0.000561 test-rmse:0.424254+0.003682 ## [1243] train-rmse:0.406806+0.000560 test-rmse:0.424256+0.003682 ## [1244] train-rmse:0.406796+0.000561 test-rmse:0.424256+0.003682 ## [1245] train-rmse:0.406785+0.000561 test-rmse:0.424256+0.003684 ## [1246] train-rmse:0.406778+0.000563 test-rmse:0.424257+0.003685 ## [1247] train-rmse:0.406770+0.000564 test-rmse:0.424260+0.003684 ## [1248] train-rmse:0.406760+0.000565 test-rmse:0.424258+0.003682 ## [1249] train-rmse:0.406749+0.000568 test-rmse:0.424258+0.003682 ## [1250] train-rmse:0.406741+0.000570 test-rmse:0.424259+0.003681 ## [1251] train-rmse:0.406731+0.000569 test-rmse:0.424259+0.003681 ## [1252] train-rmse:0.406720+0.000569 test-rmse:0.424260+0.003685 ## [1253] train-rmse:0.406707+0.000568 test-rmse:0.424261+0.003682 ## [1254] train-rmse:0.406697+0.000567 test-rmse:0.424262+0.003681 ## [1255] train-rmse:0.406685+0.000567 test-rmse:0.424261+0.003679 ## [1256] train-rmse:0.406677+0.000568 test-rmse:0.424263+0.003682 ## [1257] train-rmse:0.406666+0.000568 test-rmse:0.424262+0.003683 ## [1258] train-rmse:0.406657+0.000570 test-rmse:0.424264+0.003683 ## [1259] train-rmse:0.406647+0.000570 test-rmse:0.424265+0.003683 ## [1260] train-rmse:0.406634+0.000571 test-rmse:0.424268+0.003683 ## [1261] train-rmse:0.406621+0.000573 test-rmse:0.424270+0.003684 ## [1262] train-rmse:0.406610+0.000573 test-rmse:0.424267+0.003691 ## [1263] train-rmse:0.406603+0.000573 test-rmse:0.424267+0.003689 ## [1264] train-rmse:0.406593+0.000574 test-rmse:0.424267+0.003687 ## [1265] train-rmse:0.406585+0.000575 test-rmse:0.424268+0.003689 ## [1266] train-rmse:0.406571+0.000577 test-rmse:0.424268+0.003688 ## [1267] train-rmse:0.406561+0.000578 test-rmse:0.424269+0.003688 ## [1268] train-rmse:0.406552+0.000579 test-rmse:0.424271+0.003690 ## [1269] train-rmse:0.406544+0.000580 test-rmse:0.424273+0.003692 ## [1270] train-rmse:0.406532+0.000581 test-rmse:0.424275+0.003696 ## [1271] train-rmse:0.406526+0.000579 test-rmse:0.424273+0.003697 ## [1272] train-rmse:0.406514+0.000578 test-rmse:0.424273+0.003696 ## [1273] train-rmse:0.406503+0.000579 test-rmse:0.424272+0.003695 ## [1274] train-rmse:0.406494+0.000577 test-rmse:0.424272+0.003697 ## [1275] train-rmse:0.406485+0.000578 test-rmse:0.424275+0.003697 ## [1276] train-rmse:0.406473+0.000575 test-rmse:0.424278+0.003696 ## [1277] train-rmse:0.406463+0.000573 test-rmse:0.424281+0.003695 ## [1278] train-rmse:0.406453+0.000576 test-rmse:0.424279+0.003694 ## [1279] train-rmse:0.406442+0.000579 test-rmse:0.424281+0.003696 ## [1280] train-rmse:0.406430+0.000579 test-rmse:0.424278+0.003692 ## [1281] train-rmse:0.406419+0.000581 test-rmse:0.424281+0.003693 ## [1282] train-rmse:0.406409+0.000581 test-rmse:0.424283+0.003693 ## [1283] train-rmse:0.406396+0.000580 test-rmse:0.424285+0.003692 ## [1284] train-rmse:0.406384+0.000577 test-rmse:0.424284+0.003695 ## [1285] train-rmse:0.406372+0.000579 test-rmse:0.424283+0.003695 ## [1286] train-rmse:0.406362+0.000582 test-rmse:0.424286+0.003697 ## [1287] train-rmse:0.406351+0.000580 test-rmse:0.424287+0.003694 ## [1288] train-rmse:0.406341+0.000584 test-rmse:0.424286+0.003693 ## [1289] train-rmse:0.406330+0.000583 test-rmse:0.424286+0.003690 ## [1290] train-rmse:0.406320+0.000589 test-rmse:0.424287+0.003688 ## [1291] train-rmse:0.406310+0.000591 test-rmse:0.424289+0.003690 ## [1292] train-rmse:0.406302+0.000591 test-rmse:0.424289+0.003692 ## [1293] train-rmse:0.406291+0.000593 test-rmse:0.424288+0.003692 ## [1294] train-rmse:0.406280+0.000592 test-rmse:0.424287+0.003688 ## [1295] train-rmse:0.406267+0.000590 test-rmse:0.424285+0.003689 ## [1296] train-rmse:0.406258+0.000588 test-rmse:0.424285+0.003689 ## [1297] train-rmse:0.406249+0.000588 test-rmse:0.424287+0.003689 ## [1298] train-rmse:0.406238+0.000586 test-rmse:0.424289+0.003687 ## [1299] train-rmse:0.406225+0.000587 test-rmse:0.424286+0.003690 ## [1300] train-rmse:0.406211+0.000588 test-rmse:0.424287+0.003689 ## [1301] train-rmse:0.406202+0.000588 test-rmse:0.424286+0.003689 ## [1302] train-rmse:0.406191+0.000588 test-rmse:0.424288+0.003689 ## [1303] train-rmse:0.406182+0.000592 test-rmse:0.424290+0.003690 ## [1304] train-rmse:0.406174+0.000591 test-rmse:0.424290+0.003691 ## [1305] train-rmse:0.406166+0.000595 test-rmse:0.424288+0.003691 ## [1306] train-rmse:0.406158+0.000595 test-rmse:0.424286+0.003690 ## [1307] train-rmse:0.406149+0.000598 test-rmse:0.424288+0.003691 ## [1308] train-rmse:0.406140+0.000600 test-rmse:0.424287+0.003692 ## [1309] train-rmse:0.406131+0.000598 test-rmse:0.424289+0.003691 ## [1310] train-rmse:0.406122+0.000597 test-rmse:0.424288+0.003692 ## [1311] train-rmse:0.406112+0.000599 test-rmse:0.424288+0.003692 ## [1312] train-rmse:0.406103+0.000602 test-rmse:0.424287+0.003692 ## [1313] train-rmse:0.406091+0.000602 test-rmse:0.424287+0.003690 ## [1314] train-rmse:0.406078+0.000604 test-rmse:0.424287+0.003688 ## [1315] train-rmse:0.406073+0.000604 test-rmse:0.424288+0.003688 ## [1316] train-rmse:0.406062+0.000606 test-rmse:0.424287+0.003688 ## [1317] train-rmse:0.406052+0.000606 test-rmse:0.424289+0.003685 ## [1318] train-rmse:0.406046+0.000609 test-rmse:0.424289+0.003685 ## [1319] train-rmse:0.406040+0.000611 test-rmse:0.424288+0.003686 ## [1320] train-rmse:0.406033+0.000612 test-rmse:0.424289+0.003687 ## [1321] train-rmse:0.406025+0.000613 test-rmse:0.424291+0.003684 ## [1322] train-rmse:0.406018+0.000615 test-rmse:0.424291+0.003684 ## [1323] train-rmse:0.406010+0.000616 test-rmse:0.424293+0.003687 ## [1324] train-rmse:0.406001+0.000621 test-rmse:0.424291+0.003687 ## [1325] train-rmse:0.405993+0.000622 test-rmse:0.424292+0.003685 ## [1326] train-rmse:0.405985+0.000628 test-rmse:0.424291+0.003685 ## [1327] train-rmse:0.405977+0.000628 test-rmse:0.424289+0.003683 ## [1328] train-rmse:0.405970+0.000631 test-rmse:0.424291+0.003684 ## [1329] train-rmse:0.405959+0.000633 test-rmse:0.424292+0.003686 ## [1330] train-rmse:0.405953+0.000634 test-rmse:0.424294+0.003688 ## [1331] train-rmse:0.405942+0.000633 test-rmse:0.424296+0.003688 ## [1332] train-rmse:0.405931+0.000633 test-rmse:0.424296+0.003683 ## [1333] train-rmse:0.405923+0.000635 test-rmse:0.424298+0.003684 ## [1334] train-rmse:0.405913+0.000636 test-rmse:0.424298+0.003683 ## [1335] train-rmse:0.405904+0.000637 test-rmse:0.424299+0.003680 ## [1336] train-rmse:0.405895+0.000636 test-rmse:0.424299+0.003678 ## [1337] train-rmse:0.405884+0.000640 test-rmse:0.424300+0.003677 ## [1338] train-rmse:0.405872+0.000642 test-rmse:0.424303+0.003678 ## [1339] train-rmse:0.405861+0.000643 test-rmse:0.424303+0.003678 ## [1340] train-rmse:0.405850+0.000643 test-rmse:0.424305+0.003681 ## [1341] train-rmse:0.405839+0.000644 test-rmse:0.424309+0.003681 ## [1342] train-rmse:0.405830+0.000647 test-rmse:0.424310+0.003681 ## [1343] train-rmse:0.405819+0.000648 test-rmse:0.424312+0.003678 ## [1344] train-rmse:0.405811+0.000649 test-rmse:0.424309+0.003675 ## [1345] train-rmse:0.405798+0.000648 test-rmse:0.424308+0.003676 ## [1346] train-rmse:0.405785+0.000648 test-rmse:0.424309+0.003673 ## [1347] train-rmse:0.405774+0.000651 test-rmse:0.424310+0.003671 ## [1348] train-rmse:0.405761+0.000652 test-rmse:0.424309+0.003673 ## [1349] train-rmse:0.405754+0.000654 test-rmse:0.424309+0.003673 ## [1350] train-rmse:0.405744+0.000653 test-rmse:0.424310+0.003673 ## [1351] train-rmse:0.405736+0.000652 test-rmse:0.424310+0.003673 ## [1352] train-rmse:0.405727+0.000655 test-rmse:0.424310+0.003671 ## [1353] train-rmse:0.405720+0.000655 test-rmse:0.424312+0.003669 ## [1354] train-rmse:0.405712+0.000657 test-rmse:0.424312+0.003668 ## [1355] train-rmse:0.405704+0.000657 test-rmse:0.424314+0.003669 ## [1356] train-rmse:0.405701+0.000657 test-rmse:0.424316+0.003667 ## [1357] train-rmse:0.405691+0.000658 test-rmse:0.424317+0.003666 ## [1358] train-rmse:0.405683+0.000662 test-rmse:0.424317+0.003670 ## [1359] train-rmse:0.405673+0.000663 test-rmse:0.424320+0.003673 ## [1360] train-rmse:0.405662+0.000665 test-rmse:0.424319+0.003672 ## [1361] train-rmse:0.405651+0.000665 test-rmse:0.424321+0.003673 ## [1362] train-rmse:0.405643+0.000668 test-rmse:0.424321+0.003672 ## [1363] train-rmse:0.405633+0.000672 test-rmse:0.424322+0.003671 ## [1364] train-rmse:0.405625+0.000673 test-rmse:0.424322+0.003673 ## [1365] train-rmse:0.405614+0.000676 test-rmse:0.424326+0.003673 ## [1366] train-rmse:0.405603+0.000676 test-rmse:0.424328+0.003672 ## [1367] train-rmse:0.405592+0.000678 test-rmse:0.424331+0.003674 ## [1368] train-rmse:0.405584+0.000678 test-rmse:0.424332+0.003673 ## [1369] train-rmse:0.405574+0.000681 test-rmse:0.424335+0.003674 ## [1370] train-rmse:0.405564+0.000684 test-rmse:0.424336+0.003676 ## [1371] train-rmse:0.405552+0.000680 test-rmse:0.424338+0.003677 ## [1372] train-rmse:0.405539+0.000680 test-rmse:0.424338+0.003677 ## [1373] train-rmse:0.405529+0.000683 test-rmse:0.424336+0.003676 ## [1374] train-rmse:0.405518+0.000685 test-rmse:0.424337+0.003675 ## [1375] train-rmse:0.405510+0.000686 test-rmse:0.424339+0.003676 ## [1376] train-rmse:0.405499+0.000684 test-rmse:0.424340+0.003676 ## [1377] train-rmse:0.405486+0.000687 test-rmse:0.424339+0.003675 ## [1378] train-rmse:0.405476+0.000685 test-rmse:0.424342+0.003677 ## [1379] train-rmse:0.405465+0.000686 test-rmse:0.424341+0.003677 ## [1380] train-rmse:0.405458+0.000686 test-rmse:0.424341+0.003678 ## [1381] train-rmse:0.405451+0.000686 test-rmse:0.424344+0.003677 ## [1382] train-rmse:0.405444+0.000690 test-rmse:0.424347+0.003677 ## [1383] train-rmse:0.405433+0.000690 test-rmse:0.424346+0.003677 ## [1384] train-rmse:0.405422+0.000689 test-rmse:0.424349+0.003678 ## [1385] train-rmse:0.405413+0.000691 test-rmse:0.424348+0.003677 ## [1386] train-rmse:0.405401+0.000692 test-rmse:0.424346+0.003676 ## [1387] train-rmse:0.405392+0.000690 test-rmse:0.424351+0.003675 ## [1388] train-rmse:0.405382+0.000690 test-rmse:0.424352+0.003673 ## [1389] train-rmse:0.405371+0.000690 test-rmse:0.424349+0.003671 ## [1390] train-rmse:0.405362+0.000689 test-rmse:0.424351+0.003671 ## [1391] train-rmse:0.405353+0.000691 test-rmse:0.424352+0.003673 ## [1392] train-rmse:0.405341+0.000689 test-rmse:0.424353+0.003669 ## [1393] train-rmse:0.405331+0.000688 test-rmse:0.424353+0.003666 ## [1394] train-rmse:0.405320+0.000687 test-rmse:0.424354+0.003668 ## [1395] train-rmse:0.405311+0.000690 test-rmse:0.424354+0.003667 ## [1396] train-rmse:0.405303+0.000690 test-rmse:0.424352+0.003666 ## [1397] train-rmse:0.405293+0.000693 test-rmse:0.424352+0.003667 ## [1398] train-rmse:0.405283+0.000696 test-rmse:0.424351+0.003666 ## [1399] train-rmse:0.405274+0.000698 test-rmse:0.424349+0.003664 ## [1400] train-rmse:0.405267+0.000700 test-rmse:0.424349+0.003665 ## [1401] train-rmse:0.405260+0.000701 test-rmse:0.424350+0.003665 ## [1402] train-rmse:0.405252+0.000701 test-rmse:0.424351+0.003663 ## [1403] train-rmse:0.405243+0.000699 test-rmse:0.424352+0.003662 ## [1404] train-rmse:0.405234+0.000703 test-rmse:0.424356+0.003661 ## [1405] train-rmse:0.405224+0.000706 test-rmse:0.424355+0.003658 ## [1406] train-rmse:0.405215+0.000706 test-rmse:0.424355+0.003655 ## [1407] train-rmse:0.405206+0.000708 test-rmse:0.424356+0.003657 ## [1408] train-rmse:0.405197+0.000709 test-rmse:0.424356+0.003657 ## [1409] train-rmse:0.405192+0.000711 test-rmse:0.424357+0.003654 ## [1410] train-rmse:0.405186+0.000712 test-rmse:0.424357+0.003653 ## [1411] train-rmse:0.405175+0.000712 test-rmse:0.424358+0.003653 ## [1412] train-rmse:0.405168+0.000713 test-rmse:0.424356+0.003652 ## [1413] train-rmse:0.405157+0.000717 test-rmse:0.424356+0.003654 ## [1414] train-rmse:0.405149+0.000716 test-rmse:0.424357+0.003656 ## [1415] train-rmse:0.405141+0.000718 test-rmse:0.424358+0.003656 ## [1416] train-rmse:0.405135+0.000719 test-rmse:0.424358+0.003655 ## [1417] train-rmse:0.405125+0.000717 test-rmse:0.424361+0.003657 ## [1418] train-rmse:0.405115+0.000715 test-rmse:0.424362+0.003657 ## [1419] train-rmse:0.405107+0.000719 test-rmse:0.424363+0.003658 ## [1420] train-rmse:0.405098+0.000721 test-rmse:0.424363+0.003656 ## [1421] train-rmse:0.405086+0.000724 test-rmse:0.424365+0.003657 ## [1422] train-rmse:0.405074+0.000727 test-rmse:0.424366+0.003653 ## [1423] train-rmse:0.405064+0.000729 test-rmse:0.424365+0.003654 ## [1424] train-rmse:0.405054+0.000729 test-rmse:0.424367+0.003657 ## [1425] train-rmse:0.405045+0.000728 test-rmse:0.424368+0.003658 ## [1426] train-rmse:0.405035+0.000730 test-rmse:0.424370+0.003659 ## [1427] train-rmse:0.405027+0.000732 test-rmse:0.424371+0.003657 ## [1428] train-rmse:0.405019+0.000736 test-rmse:0.424372+0.003658 ## [1429] train-rmse:0.405008+0.000736 test-rmse:0.424372+0.003660 ## [1430] train-rmse:0.404998+0.000737 test-rmse:0.424372+0.003660 ## [1431] train-rmse:0.404989+0.000737 test-rmse:0.424373+0.003660 ## [1432] train-rmse:0.404977+0.000735 test-rmse:0.424372+0.003661 ## [1433] train-rmse:0.404968+0.000733 test-rmse:0.424373+0.003660 ## [1434] train-rmse:0.404960+0.000736 test-rmse:0.424373+0.003660 ## [1435] train-rmse:0.404950+0.000737 test-rmse:0.424373+0.003660 ## [1436] train-rmse:0.404938+0.000736 test-rmse:0.424372+0.003661 ## [1437] train-rmse:0.404932+0.000740 test-rmse:0.424374+0.003661 ## [1438] train-rmse:0.404923+0.000741 test-rmse:0.424374+0.003661 ## [1439] train-rmse:0.404916+0.000741 test-rmse:0.424377+0.003663 ## [1440] train-rmse:0.404907+0.000742 test-rmse:0.424377+0.003665 ## [1441] train-rmse:0.404898+0.000747 test-rmse:0.424378+0.003664 ## [1442] train-rmse:0.404890+0.000746 test-rmse:0.424378+0.003664 ## [1443] train-rmse:0.404881+0.000746 test-rmse:0.424380+0.003663 ## [1444] train-rmse:0.404871+0.000746 test-rmse:0.424382+0.003664 ## [1445] train-rmse:0.404864+0.000746 test-rmse:0.424384+0.003663 ## [1446] train-rmse:0.404853+0.000747 test-rmse:0.424387+0.003664 ## [1447] train-rmse:0.404845+0.000746 test-rmse:0.424388+0.003664 ## [1448] train-rmse:0.404836+0.000744 test-rmse:0.424388+0.003665 ## [1449] train-rmse:0.404823+0.000746 test-rmse:0.424390+0.003668 ## [1450] train-rmse:0.404815+0.000747 test-rmse:0.424391+0.003670 ## [1451] train-rmse:0.404806+0.000748 test-rmse:0.424392+0.003670 ## [1452] train-rmse:0.404797+0.000749 test-rmse:0.424391+0.003667 ## [1453] train-rmse:0.404789+0.000750 test-rmse:0.424389+0.003667 ## [1454] train-rmse:0.404779+0.000753 test-rmse:0.424390+0.003667 ## [1455] train-rmse:0.404771+0.000757 test-rmse:0.424391+0.003669 ## [1456] train-rmse:0.404762+0.000758 test-rmse:0.424392+0.003670 ## [1457] train-rmse:0.404753+0.000759 test-rmse:0.424393+0.003668 ## [1458] train-rmse:0.404744+0.000758 test-rmse:0.424395+0.003666 ## [1459] train-rmse:0.404735+0.000760 test-rmse:0.424395+0.003667 ## [1460] train-rmse:0.404725+0.000758 test-rmse:0.424393+0.003669 ## [1461] train-rmse:0.404717+0.000759 test-rmse:0.424395+0.003670 ## [1462] train-rmse:0.404707+0.000764 test-rmse:0.424396+0.003671 ## [1463] train-rmse:0.404701+0.000765 test-rmse:0.424395+0.003672 ## [1464] train-rmse:0.404691+0.000763 test-rmse:0.424398+0.003668 ## [1465] train-rmse:0.404681+0.000764 test-rmse:0.424398+0.003669 ## [1466] train-rmse:0.404672+0.000767 test-rmse:0.424399+0.003669 ## [1467] train-rmse:0.404661+0.000767 test-rmse:0.424400+0.003670 ## [1468] train-rmse:0.404655+0.000768 test-rmse:0.424399+0.003667 ## [1469] train-rmse:0.404646+0.000768 test-rmse:0.424399+0.003666 ## [1470] train-rmse:0.404636+0.000770 test-rmse:0.424400+0.003667 ## [1471] train-rmse:0.404629+0.000772 test-rmse:0.424400+0.003668 ## [1472] train-rmse:0.404618+0.000773 test-rmse:0.424399+0.003669 ## [1473] train-rmse:0.404607+0.000775 test-rmse:0.424400+0.003668 ## [1474] train-rmse:0.404598+0.000775 test-rmse:0.424400+0.003667 ## [1475] train-rmse:0.404588+0.000774 test-rmse:0.424399+0.003666 ## [1476] train-rmse:0.404579+0.000774 test-rmse:0.424401+0.003667 ## [1477] train-rmse:0.404568+0.000776 test-rmse:0.424402+0.003668 ## [1478] train-rmse:0.404561+0.000778 test-rmse:0.424403+0.003668 ## [1479] train-rmse:0.404551+0.000779 test-rmse:0.424403+0.003670 ## [1480] train-rmse:0.404542+0.000782 test-rmse:0.424405+0.003669 ## [1481] train-rmse:0.404532+0.000782 test-rmse:0.424406+0.003669 ## [1482] train-rmse:0.404524+0.000779 test-rmse:0.424406+0.003670 ## [1483] train-rmse:0.404517+0.000778 test-rmse:0.424406+0.003670 ## [1484] train-rmse:0.404510+0.000778 test-rmse:0.424405+0.003671 ## [1485] train-rmse:0.404498+0.000778 test-rmse:0.424406+0.003668 ## [1486] train-rmse:0.404489+0.000781 test-rmse:0.424407+0.003670 ## [1487] train-rmse:0.404480+0.000779 test-rmse:0.424408+0.003670 ## [1488] train-rmse:0.404472+0.000778 test-rmse:0.424407+0.003670 ## [1489] train-rmse:0.404463+0.000779 test-rmse:0.424407+0.003669 ## [1490] train-rmse:0.404454+0.000781 test-rmse:0.424405+0.003667 ## [1491] train-rmse:0.404445+0.000781 test-rmse:0.424406+0.003667 ## [1492] train-rmse:0.404436+0.000781 test-rmse:0.424408+0.003667 ## [1493] train-rmse:0.404426+0.000780 test-rmse:0.424408+0.003668 ## [1494] train-rmse:0.404415+0.000782 test-rmse:0.424411+0.003667 ## [1495] train-rmse:0.404409+0.000783 test-rmse:0.424410+0.003667 ## [1496] train-rmse:0.404401+0.000786 test-rmse:0.424411+0.003667 ## [1497] train-rmse:0.404388+0.000785 test-rmse:0.424410+0.003665 ## [1498] train-rmse:0.404379+0.000783 test-rmse:0.424411+0.003665 ## [1499] train-rmse:0.404371+0.000784 test-rmse:0.424412+0.003664 ## [1500] train-rmse:0.404359+0.000782 test-rmse:0.424413+0.003665 ## [1501] train-rmse:0.404350+0.000786 test-rmse:0.424415+0.003665 ## [1502] train-rmse:0.404338+0.000787 test-rmse:0.424416+0.003664 ## [1503] train-rmse:0.404326+0.000788 test-rmse:0.424416+0.003662 ## [1504] train-rmse:0.404313+0.000790 test-rmse:0.424419+0.003662 ## [1505] train-rmse:0.404301+0.000790 test-rmse:0.424421+0.003661 ## [1506] train-rmse:0.404294+0.000792 test-rmse:0.424421+0.003661 ## [1507] train-rmse:0.404286+0.000791 test-rmse:0.424418+0.003663 ## [1508] train-rmse:0.404277+0.000789 test-rmse:0.424419+0.003662 ## [1509] train-rmse:0.404268+0.000789 test-rmse:0.424414+0.003665 ## [1510] train-rmse:0.404258+0.000792 test-rmse:0.424415+0.003666 ## [1511] train-rmse:0.404250+0.000792 test-rmse:0.424417+0.003666 ## [1512] train-rmse:0.404240+0.000794 test-rmse:0.424415+0.003664 ## [1513] train-rmse:0.404231+0.000794 test-rmse:0.424416+0.003665 ## [1514] train-rmse:0.404221+0.000792 test-rmse:0.424420+0.003661 ## [1515] train-rmse:0.404212+0.000793 test-rmse:0.424423+0.003664 ## [1516] train-rmse:0.404204+0.000796 test-rmse:0.424423+0.003665 ## [1517] train-rmse:0.404196+0.000793 test-rmse:0.424424+0.003664 ## [1518] train-rmse:0.404187+0.000796 test-rmse:0.424424+0.003665 ## [1519] train-rmse:0.404178+0.000797 test-rmse:0.424424+0.003666 ## [1520] train-rmse:0.404170+0.000800 test-rmse:0.424424+0.003665 ## [1521] train-rmse:0.404163+0.000802 test-rmse:0.424423+0.003665 ## [1522] train-rmse:0.404150+0.000806 test-rmse:0.424423+0.003665 ## [1523] train-rmse:0.404141+0.000809 test-rmse:0.424424+0.003664 ## [1524] train-rmse:0.404133+0.000811 test-rmse:0.424425+0.003660 ## [1525] train-rmse:0.404126+0.000812 test-rmse:0.424426+0.003661 ## [1526] train-rmse:0.404119+0.000813 test-rmse:0.424426+0.003661 ## [1527] train-rmse:0.404109+0.000815 test-rmse:0.424424+0.003662 ## [1528] train-rmse:0.404098+0.000817 test-rmse:0.424426+0.003660 ## [1529] train-rmse:0.404090+0.000817 test-rmse:0.424427+0.003660 ## [1530] train-rmse:0.404082+0.000818 test-rmse:0.424426+0.003659 ## [1531] train-rmse:0.404074+0.000821 test-rmse:0.424428+0.003662 ## [1532] train-rmse:0.404065+0.000822 test-rmse:0.424428+0.003663 ## [1533] train-rmse:0.404058+0.000824 test-rmse:0.424428+0.003663 ## [1534] train-rmse:0.404048+0.000823 test-rmse:0.424426+0.003665 ## [1535] train-rmse:0.404038+0.000826 test-rmse:0.424430+0.003663 ## [1536] train-rmse:0.404027+0.000826 test-rmse:0.424433+0.003661 ## [1537] train-rmse:0.404015+0.000823 test-rmse:0.424433+0.003663 ## [1538] train-rmse:0.404004+0.000823 test-rmse:0.424431+0.003664 ## [1539] train-rmse:0.403994+0.000821 test-rmse:0.424430+0.003664 ## [1540] train-rmse:0.403985+0.000826 test-rmse:0.424429+0.003666 ## [1541] train-rmse:0.403973+0.000824 test-rmse:0.424430+0.003666 ## [1542] train-rmse:0.403960+0.000821 test-rmse:0.424429+0.003664 ## [1543] train-rmse:0.403951+0.000821 test-rmse:0.424431+0.003663 ## [1544] train-rmse:0.403938+0.000819 test-rmse:0.424431+0.003662 ## [1545] train-rmse:0.403930+0.000821 test-rmse:0.424430+0.003660 ## [1546] train-rmse:0.403917+0.000823 test-rmse:0.424429+0.003659 ## [1547] train-rmse:0.403910+0.000823 test-rmse:0.424429+0.003659 ## [1548] train-rmse:0.403898+0.000821 test-rmse:0.424430+0.003657 ## [1549] train-rmse:0.403886+0.000822 test-rmse:0.424432+0.003658 ## [1550] train-rmse:0.403878+0.000825 test-rmse:0.424432+0.003659 ## [1551] train-rmse:0.403865+0.000826 test-rmse:0.424433+0.003653 ## [1552] train-rmse:0.403857+0.000825 test-rmse:0.424434+0.003654 ## [1553] train-rmse:0.403849+0.000826 test-rmse:0.424434+0.003654 ## [1554] train-rmse:0.403839+0.000829 test-rmse:0.424437+0.003654 ## [1555] train-rmse:0.403829+0.000829 test-rmse:0.424440+0.003652 ## [1556] train-rmse:0.403819+0.000830 test-rmse:0.424440+0.003650 ## [1557] train-rmse:0.403810+0.000833 test-rmse:0.424441+0.003648 ## [1558] train-rmse:0.403800+0.000837 test-rmse:0.424441+0.003649 ## [1559] train-rmse:0.403787+0.000839 test-rmse:0.424441+0.003650 ## [1560] train-rmse:0.403774+0.000840 test-rmse:0.424442+0.003648 ## [1561] train-rmse:0.403768+0.000843 test-rmse:0.424443+0.003648 ## [1562] train-rmse:0.403760+0.000842 test-rmse:0.424446+0.003647 ## [1563] train-rmse:0.403752+0.000847 test-rmse:0.424446+0.003649 ## [1564] train-rmse:0.403740+0.000844 test-rmse:0.424447+0.003647 ## [1565] train-rmse:0.403732+0.000845 test-rmse:0.424447+0.003646 ## [1566] train-rmse:0.403723+0.000847 test-rmse:0.424448+0.003645 ## [1567] train-rmse:0.403713+0.000851 test-rmse:0.424448+0.003642 ## [1568] train-rmse:0.403705+0.000851 test-rmse:0.424449+0.003642 ## [1569] train-rmse:0.403694+0.000851 test-rmse:0.424448+0.003639 ## [1570] train-rmse:0.403686+0.000854 test-rmse:0.424451+0.003641 ## [1571] train-rmse:0.403676+0.000856 test-rmse:0.424451+0.003640 ## [1572] train-rmse:0.403669+0.000857 test-rmse:0.424450+0.003641 ## [1573] train-rmse:0.403659+0.000853 test-rmse:0.424446+0.003641 ## [1574] train-rmse:0.403652+0.000856 test-rmse:0.424446+0.003641 ## [1575] train-rmse:0.403642+0.000859 test-rmse:0.424446+0.003640 ## [1576] train-rmse:0.403632+0.000863 test-rmse:0.424448+0.003639 ## [1577] train-rmse:0.403622+0.000866 test-rmse:0.424446+0.003639 ## [1578] train-rmse:0.403611+0.000869 test-rmse:0.424448+0.003641 ## [1579] train-rmse:0.403601+0.000873 test-rmse:0.424448+0.003643 ## [1580] train-rmse:0.403590+0.000872 test-rmse:0.424449+0.003641 ## [1581] train-rmse:0.403582+0.000874 test-rmse:0.424449+0.003642 ## [1582] train-rmse:0.403572+0.000879 test-rmse:0.424449+0.003641 ## [1583] train-rmse:0.403561+0.000878 test-rmse:0.424451+0.003641 ## [1584] train-rmse:0.403555+0.000882 test-rmse:0.424450+0.003640 ## [1585] train-rmse:0.403547+0.000885 test-rmse:0.424451+0.003639 ## [1586] train-rmse:0.403539+0.000889 test-rmse:0.424451+0.003640 ## [1587] train-rmse:0.403532+0.000892 test-rmse:0.424453+0.003642 ## [1588] train-rmse:0.403522+0.000895 test-rmse:0.424454+0.003642 ## [1589] train-rmse:0.403512+0.000898 test-rmse:0.424455+0.003642 ## [1590] train-rmse:0.403504+0.000899 test-rmse:0.424456+0.003643 ## [1591] train-rmse:0.403496+0.000902 test-rmse:0.424453+0.003639 ## [1592] train-rmse:0.403488+0.000903 test-rmse:0.424455+0.003640 ## [1593] train-rmse:0.403480+0.000906 test-rmse:0.424455+0.003638 ## [1594] train-rmse:0.403474+0.000907 test-rmse:0.424456+0.003639 ## [1595] train-rmse:0.403466+0.000907 test-rmse:0.424460+0.003639 ## [1596] train-rmse:0.403454+0.000912 test-rmse:0.424458+0.003639 ## [1597] train-rmse:0.403447+0.000914 test-rmse:0.424458+0.003638 ## [1598] train-rmse:0.403438+0.000917 test-rmse:0.424460+0.003637 ## [1599] train-rmse:0.403429+0.000920 test-rmse:0.424460+0.003635 ## [1600] train-rmse:0.403420+0.000920 test-rmse:0.424459+0.003634 ## [1601] train-rmse:0.403412+0.000924 test-rmse:0.424461+0.003636 ## [1602] train-rmse:0.403406+0.000926 test-rmse:0.424462+0.003637 ## [1603] train-rmse:0.403396+0.000930 test-rmse:0.424462+0.003637 ## [1604] train-rmse:0.403391+0.000932 test-rmse:0.424465+0.003637 ## [1605] train-rmse:0.403383+0.000933 test-rmse:0.424463+0.003636 ## [1606] train-rmse:0.403375+0.000935 test-rmse:0.424465+0.003635 ## [1607] train-rmse:0.403363+0.000934 test-rmse:0.424468+0.003635 ## [1608] train-rmse:0.403357+0.000937 test-rmse:0.424468+0.003636 ## [1609] train-rmse:0.403347+0.000939 test-rmse:0.424475+0.003636 ## [1610] train-rmse:0.403339+0.000942 test-rmse:0.424477+0.003636 ## [1611] train-rmse:0.403328+0.000944 test-rmse:0.424476+0.003635 ## [1612] train-rmse:0.403322+0.000947 test-rmse:0.424476+0.003636 ## [1613] train-rmse:0.403316+0.000950 test-rmse:0.424480+0.003637 ## [1614] train-rmse:0.403307+0.000953 test-rmse:0.424479+0.003637 ## [1615] train-rmse:0.403298+0.000954 test-rmse:0.424479+0.003636 ## [1616] train-rmse:0.403290+0.000959 test-rmse:0.424480+0.003637 ## [1617] train-rmse:0.403283+0.000962 test-rmse:0.424481+0.003638 ## [1618] train-rmse:0.403276+0.000964 test-rmse:0.424479+0.003637 ## [1619] train-rmse:0.403269+0.000969 test-rmse:0.424479+0.003637 ## [1620] train-rmse:0.403260+0.000971 test-rmse:0.424481+0.003637 ## [1621] train-rmse:0.403254+0.000973 test-rmse:0.424481+0.003637 ## [1622] train-rmse:0.403247+0.000977 test-rmse:0.424485+0.003638 ## [1623] train-rmse:0.403240+0.000978 test-rmse:0.424487+0.003641 ## [1624] train-rmse:0.403233+0.000980 test-rmse:0.424488+0.003641 ## [1625] train-rmse:0.403228+0.000982 test-rmse:0.424491+0.003645 ## [1626] train-rmse:0.403220+0.000982 test-rmse:0.424492+0.003644 ## [1627] train-rmse:0.403213+0.000986 test-rmse:0.424490+0.003644 ## [1628] train-rmse:0.403206+0.000988 test-rmse:0.424491+0.003646 ## [1629] train-rmse:0.403201+0.000990 test-rmse:0.424489+0.003645 ## [1630] train-rmse:0.403195+0.000993 test-rmse:0.424488+0.003647 ## [1631] train-rmse:0.403186+0.000993 test-rmse:0.424490+0.003646 ## [1632] train-rmse:0.403181+0.000993 test-rmse:0.424491+0.003643 ## [1633] train-rmse:0.403170+0.000996 test-rmse:0.424488+0.003644 ## [1634] train-rmse:0.403161+0.000998 test-rmse:0.424492+0.003647 ## [1635] train-rmse:0.403153+0.000998 test-rmse:0.424494+0.003653 ## [1636] train-rmse:0.403145+0.000999 test-rmse:0.424497+0.003653 ## [1637] train-rmse:0.403134+0.001001 test-rmse:0.424495+0.003652 ## [1638] train-rmse:0.403127+0.001001 test-rmse:0.424499+0.003652 ## [1639] train-rmse:0.403120+0.001004 test-rmse:0.424501+0.003653 ## [1640] train-rmse:0.403114+0.001007 test-rmse:0.424500+0.003653 ## [1641] train-rmse:0.403106+0.001007 test-rmse:0.424500+0.003652 ## [1642] train-rmse:0.403100+0.001009 test-rmse:0.424502+0.003652 ## [1643] train-rmse:0.403091+0.001010 test-rmse:0.424505+0.003653 ## [1644] train-rmse:0.403083+0.001014 test-rmse:0.424507+0.003654 ## [1645] train-rmse:0.403076+0.001016 test-rmse:0.424506+0.003654 ## [1646] train-rmse:0.403070+0.001017 test-rmse:0.424506+0.003653 ## [1647] train-rmse:0.403064+0.001020 test-rmse:0.424508+0.003654 ## [1648] train-rmse:0.403054+0.001023 test-rmse:0.424508+0.003652 ## [1649] train-rmse:0.403047+0.001025 test-rmse:0.424507+0.003652 ## [1650] train-rmse:0.403038+0.001028 test-rmse:0.424509+0.003652 ## [1651] train-rmse:0.403027+0.001030 test-rmse:0.424510+0.003652 ## [1652] train-rmse:0.403019+0.001032 test-rmse:0.424510+0.003654 ## [1653] train-rmse:0.403013+0.001032 test-rmse:0.424513+0.003652 ## [1654] train-rmse:0.403006+0.001033 test-rmse:0.424513+0.003651 ## [1655] train-rmse:0.402996+0.001036 test-rmse:0.424515+0.003652 ## [1656] train-rmse:0.402987+0.001037 test-rmse:0.424519+0.003652 ## [1657] train-rmse:0.402979+0.001038 test-rmse:0.424520+0.003652 ## [1658] train-rmse:0.402969+0.001039 test-rmse:0.424521+0.003654 ## [1659] train-rmse:0.402961+0.001041 test-rmse:0.424522+0.003656 ## [1660] train-rmse:0.402953+0.001042 test-rmse:0.424523+0.003654 ## [1661] train-rmse:0.402948+0.001045 test-rmse:0.424524+0.003651 ## [1662] train-rmse:0.402941+0.001045 test-rmse:0.424524+0.003651 ## [1663] train-rmse:0.402936+0.001047 test-rmse:0.424525+0.003649 ## [1664] train-rmse:0.402925+0.001050 test-rmse:0.424524+0.003651 ## [1665] train-rmse:0.402916+0.001052 test-rmse:0.424524+0.003650 ## [1666] train-rmse:0.402911+0.001055 test-rmse:0.424525+0.003650 ## [1667] train-rmse:0.402901+0.001056 test-rmse:0.424526+0.003650 ## [1668] train-rmse:0.402892+0.001058 test-rmse:0.424524+0.003650 ## [1669] train-rmse:0.402884+0.001062 test-rmse:0.424528+0.003650 ## [1670] train-rmse:0.402878+0.001065 test-rmse:0.424529+0.003652 ## [1671] train-rmse:0.402871+0.001065 test-rmse:0.424529+0.003651 ## [1672] train-rmse:0.402863+0.001066 test-rmse:0.424532+0.003651 ## [1673] train-rmse:0.402857+0.001067 test-rmse:0.424531+0.003650 ## [1674] train-rmse:0.402847+0.001068 test-rmse:0.424533+0.003650 ## [1675] train-rmse:0.402838+0.001070 test-rmse:0.424534+0.003648 ## [1676] train-rmse:0.402830+0.001070 test-rmse:0.424538+0.003646 ## [1677] train-rmse:0.402821+0.001071 test-rmse:0.424539+0.003647 ## [1678] train-rmse:0.402814+0.001071 test-rmse:0.424542+0.003646 ## [1679] train-rmse:0.402803+0.001072 test-rmse:0.424544+0.003646 ## [1680] train-rmse:0.402794+0.001075 test-rmse:0.424545+0.003648 ## [1681] train-rmse:0.402784+0.001077 test-rmse:0.424544+0.003647 ## [1682] train-rmse:0.402778+0.001079 test-rmse:0.424545+0.003647 ## [1683] train-rmse:0.402769+0.001079 test-rmse:0.424545+0.003645 ## [1684] train-rmse:0.402762+0.001077 test-rmse:0.424545+0.003646 ## [1685] train-rmse:0.402754+0.001078 test-rmse:0.424546+0.003644 ## [1686] train-rmse:0.402747+0.001081 test-rmse:0.424548+0.003642 ## [1687] train-rmse:0.402738+0.001082 test-rmse:0.424549+0.003644 ## [1688] train-rmse:0.402729+0.001082 test-rmse:0.424550+0.003644 ## [1689] train-rmse:0.402723+0.001082 test-rmse:0.424552+0.003644 ## [1690] train-rmse:0.402714+0.001083 test-rmse:0.424550+0.003647 ## [1691] train-rmse:0.402704+0.001086 test-rmse:0.424550+0.003647 ## [1692] train-rmse:0.402696+0.001088 test-rmse:0.424553+0.003647 ## [1693] train-rmse:0.402689+0.001091 test-rmse:0.424554+0.003647 ## [1694] train-rmse:0.402675+0.001090 test-rmse:0.424554+0.003646 ## [1695] train-rmse:0.402670+0.001094 test-rmse:0.424556+0.003646 ## [1696] train-rmse:0.402662+0.001096 test-rmse:0.424556+0.003647 ## [1697] train-rmse:0.402657+0.001098 test-rmse:0.424557+0.003647 ## [1698] train-rmse:0.402649+0.001097 test-rmse:0.424554+0.003648 ## [1699] train-rmse:0.402641+0.001097 test-rmse:0.424553+0.003647 ## [1700] train-rmse:0.402634+0.001099 test-rmse:0.424554+0.003647 ## [1701] train-rmse:0.402624+0.001101 test-rmse:0.424553+0.003646 ## [1702] train-rmse:0.402615+0.001104 test-rmse:0.424555+0.003646 ## [1703] train-rmse:0.402602+0.001104 test-rmse:0.424553+0.003646 ## [1704] train-rmse:0.402592+0.001101 test-rmse:0.424554+0.003648 ## [1705] train-rmse:0.402582+0.001101 test-rmse:0.424555+0.003646 ## [1706] train-rmse:0.402578+0.001103 test-rmse:0.424556+0.003646 ## [1707] train-rmse:0.402575+0.001103 test-rmse:0.424556+0.003645 ## [1708] train-rmse:0.402565+0.001106 test-rmse:0.424559+0.003643 ## [1709] train-rmse:0.402551+0.001107 test-rmse:0.424558+0.003641 ## [1710] train-rmse:0.402540+0.001111 test-rmse:0.424560+0.003641 ## [1711] train-rmse:0.402531+0.001115 test-rmse:0.424560+0.003642 ## [1712] train-rmse:0.402524+0.001114 test-rmse:0.424561+0.003642 ## [1713] train-rmse:0.402517+0.001118 test-rmse:0.424565+0.003644 ## [1714] train-rmse:0.402507+0.001114 test-rmse:0.424564+0.003645 ## [1715] train-rmse:0.402496+0.001114 test-rmse:0.424567+0.003647 ## [1716] train-rmse:0.402487+0.001113 test-rmse:0.424568+0.003647 ## [1717] train-rmse:0.402478+0.001116 test-rmse:0.424572+0.003647 ## [1718] train-rmse:0.402471+0.001119 test-rmse:0.424571+0.003648 ## [1719] train-rmse:0.402461+0.001119 test-rmse:0.424570+0.003645 ## [1720] train-rmse:0.402452+0.001121 test-rmse:0.424571+0.003644 ## [1721] train-rmse:0.402441+0.001121 test-rmse:0.424573+0.003642 ## [1722] train-rmse:0.402435+0.001122 test-rmse:0.424575+0.003641 ## [1723] train-rmse:0.402425+0.001126 test-rmse:0.424575+0.003642 ## [1724] train-rmse:0.402412+0.001127 test-rmse:0.424579+0.003642 ## [1725] train-rmse:0.402402+0.001128 test-rmse:0.424580+0.003640 ## [1726] train-rmse:0.402392+0.001130 test-rmse:0.424580+0.003640 ## [1727] train-rmse:0.402383+0.001130 test-rmse:0.424581+0.003639 ## [1728] train-rmse:0.402375+0.001130 test-rmse:0.424584+0.003640 ## [1729] train-rmse:0.402369+0.001133 test-rmse:0.424585+0.003641 ## [1730] train-rmse:0.402360+0.001132 test-rmse:0.424589+0.003642 ## [1731] train-rmse:0.402352+0.001135 test-rmse:0.424590+0.003641 ## [1732] train-rmse:0.402343+0.001137 test-rmse:0.424589+0.003644 ## [1733] train-rmse:0.402330+0.001135 test-rmse:0.424592+0.003645 ## [1734] train-rmse:0.402320+0.001135 test-rmse:0.424596+0.003646 ## [1735] train-rmse:0.402311+0.001137 test-rmse:0.424596+0.003647 ## [1736] train-rmse:0.402305+0.001139 test-rmse:0.424597+0.003645 ## [1737] train-rmse:0.402296+0.001141 test-rmse:0.424595+0.003644 ## [1738] train-rmse:0.402287+0.001144 test-rmse:0.424598+0.003645 ## [1739] train-rmse:0.402277+0.001147 test-rmse:0.424605+0.003646 ## [1740] train-rmse:0.402267+0.001148 test-rmse:0.424605+0.003645 ## [1741] train-rmse:0.402259+0.001148 test-rmse:0.424606+0.003645 ## [1742] train-rmse:0.402253+0.001149 test-rmse:0.424606+0.003647 ## [1743] train-rmse:0.402242+0.001148 test-rmse:0.424606+0.003648 ## [1744] train-rmse:0.402233+0.001146 test-rmse:0.424608+0.003647 ## [1745] train-rmse:0.402223+0.001150 test-rmse:0.424604+0.003645 ## [1746] train-rmse:0.402213+0.001152 test-rmse:0.424603+0.003644 ## [1747] train-rmse:0.402206+0.001151 test-rmse:0.424604+0.003644 ## [1748] train-rmse:0.402201+0.001150 test-rmse:0.424606+0.003644 ## [1749] train-rmse:0.402192+0.001146 test-rmse:0.424607+0.003646 ## [1750] train-rmse:0.402183+0.001145 test-rmse:0.424607+0.003645 xgbtrain &lt;- xgb.train(params = xgb_params$params, data = dtrain, nrounds = xgb_params$nrounds) feats_mat_comb_df &lt;- feats_mat_comb_df %&gt;% mutate(pred = xgbcv$pred) Predict all CpGs: d_all &lt;- xgb.DMatrix(res %&gt;% mutate(score_max_a = pmax(score_a_plus, score_a_minus)) %&gt;% mutate(score_max_b = pmax(score_b_plus, score_b_minus)) %&gt;% select(score_a_plus, score_a_minus, score_b_plus, score_b_minus, score_max_a, score_max_b) %&gt;% as.matrix()) res &lt;- res %&gt;% mutate(comb_score = predict(xgbtrain, d_all)) shap_contrib &lt;- predict(xgbtrain, dtrain, predcontrib=TRUE, approxcontrib=TRUE) shap_contrib %&gt;% head() ## score_a_plus score_a_minus score_b_plus score_b_minus score_max_a ## [1,] 0.03257944 0.00662072 0.13034897 -0.08361857 0.07228424 ## [2,] 0.03127447 -0.07440750 -0.05122968 -0.06406826 -0.08237033 ## [3,] -0.17793657 0.04980103 -0.08292633 0.03964013 -0.11479261 ## [4,] -0.04900409 0.02451609 -0.07236253 -0.02743806 -0.01833785 ## [5,] -0.14197846 0.01013156 -0.02193703 -0.04253504 -0.18508732 ## [6,] 0.07941829 -0.02812006 -0.04589148 0.15377595 -0.04417774 ## score_max_b BIAS ## [1,] 0.2976556 -0.2581046 ## [2,] -0.3153226 -0.2581046 ## [3,] 0.0373612 -0.2581046 ## [4,] -0.2095805 -0.2581046 ## [5,] -0.1496402 -0.2581046 ## [6,] 0.2954025 -0.2581046 colMeans(abs(shap_contrib)) ## score_a_plus score_a_minus score_b_plus score_b_minus score_max_a ## 0.05898015 0.05601591 0.06136920 0.07151962 0.10136252 ## score_max_b BIAS ## 0.16868949 0.25810462 5.1.5 Figure 5H p_shap &lt;- colMeans(abs(shap_contrib)) %&gt;% set_names(c(&quot;A+&quot;, &quot;A-&quot;, &quot;B+&quot;, &quot;B-&quot;, &quot;max(A)&quot;, &quot;max(B)&quot;, &quot;BIAS&quot;)) %&gt;% enframe() %&gt;% arrange(value) %&gt;% filter(name != &quot;BIAS&quot;) %&gt;% ggplot(aes(x=reorder(name, value), y=value)) + geom_col() + coord_flip() + ylab(&quot;Mean Shapley Value&quot;) + xlab(&quot;Feature&quot;) p_shap p_comb_score &lt;- tibble(pred = feats_mat_comb_df$pred, y = feats_mat_comb_df$dAB) %&gt;% mutate(col = densCols(., bandwidth=0.06,colramp=colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )))) %&gt;% ggplot(aes(x=pred, y=y, col=col)) + geom_point(shape=19, size=point_size) + scale_color_identity() + coord_cartesian(xlim = c(-1.1, 0.6), ylim = c(-1.8, 1.2)) + xlab(&quot;Combined model&quot;) + ylab(&quot;Meth (3a-/-) - (3b-/-)&quot;) + theme(aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) + labs(subtitle = glue(&quot;R^2 = {cor}&quot;, cor = round(cor(feats_mat_comb_df$pred, feats_mat_comb_df$dAB)^2, digits=2))) + theme(plot.subtitle = ggtext::element_markdown()) p_comb_score cor(feats_mat_comb_df$dAB, feats_mat_comb_df$pred)^2 ## [1] 0.4487908 df &lt;- gextract.left_join(&quot;DNMT.ab_score_xgb_plus&quot;, intervals=feats_mat_comb_df, iterator=feats_mat_comb_df) %&gt;% select(comb_score = pred, dinuc_score = DNMT.ab_score_xgb_plus, dAB) %&gt;% as_tibble() df %&gt;% filter(abs(dAB) &lt;= 0.05 ) %&gt;% ggplot(aes(x=comb_score, y=dinuc_score)) + scattermore::geom_scattermore() + geom_abline(linetype=&quot;dashed&quot;) + theme(aspect.ratio=1) p_comb_vs_dinuc &lt;- df %&gt;% mutate(col = densCols(., bandwidth=0.06,colramp=colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )))) %&gt;% ggplot(aes(x=comb_score, y=dinuc_score, col=col)) + geom_point(shape=19, size=point_size) + scale_color_identity() + coord_cartesian(xlim = c(-1, 1), ylim = c(-1, 1)) + xlab(&quot;Combined model&quot;) + ylab(&quot;Dinuc score&quot;) + theme(aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) + labs(subtitle = glue(&quot;R^2 = {cor}&quot;, cor = round(cor(df$comb_score, df$dinuc_score)^2, digits=2))) + theme(plot.subtitle = ggtext::element_markdown()) p_comb_vs_dinuc cor(df$comb_score, df$dinuc_score)^2 ## [1] 0.8948897 Extract sequence from model flank_bp &lt;- 5 seq_df_wide &lt;- get_seq_df(feats_mat_comb_df %&gt;% select(chrom, start, end), flank_bp = flank_bp) %&gt;% seq_df_to_wide(flank_bp = flank_bp) model_glm_comb &lt;- gen_seq_model(seq_df_wide, feats_mat_comb_df, pred) coef_df_comb &lt;- get_coef_df(model_glm_comb) options(repr.plot.width = 5, repr.plot.height = 6) p &lt;- coef_df_comb %&gt;% ggplot(aes(x=pos, y=dinuc, fill=coefficient)) + geom_tile() + scale_fill_gradient2(low = &quot;darkblue&quot;, high = &quot;darkred&quot;, mid = &quot;white&quot;, midpoint = 0, na.value=&quot;white&quot;) + theme_minimal() + ylab(&quot;Dinucleotide&quot;) + xlab(&quot;Position&quot;) p 5.1.6 Figure 5I model_ab &lt;- readr::read_rds(here(&quot;output/ab_dinuc_model_5bp.rds&quot;)) coef_df_ab &lt;- get_coef_df(model_ab) options(repr.plot.width = 5, repr.plot.height = 6) df &lt;- coef_df_comb %&gt;% select(pos, dinuc, coef_comb = coefficient) %&gt;% left_join(coef_df_ab %&gt;% rename(coef = coefficient)) %&gt;% replace_na(replace = list(coef = 0, coef_comb = 0)) %&gt;% mutate(label = paste0(pos, &quot;,&quot;, dinuc)) ## Joining, by = c(&quot;pos&quot;, &quot;dinuc&quot;) df_scale &lt;- df %&gt;% mutate_at(vars(coef, coef_comb), function(x) x - mean(x) ) %&gt;% mutate_at(vars(coef, coef_comb), function(x) x / sd(x) ) p &lt;- df %&gt;% ggplot(aes(x=coef, y=coef_comb, label=label)) + geom_point() + geom_abline(linetype=&quot;dashed&quot;) + theme_bw() + theme(aspect.ratio=1) p_scale &lt;- df_scale %&gt;% ggplot(aes(x=coef, y=coef_comb, label=label)) + geom_point(size=0.01) + geom_abline(linetype=&quot;dashed&quot;) + xlab(&quot;Dinuc model&quot;) + ylab(&quot;Combined model&quot;) + theme(aspect.ratio=1) cor.test(df$coef, df$coef_comb, method=&quot;spearman&quot;) ## Warning in cor.test.default(df$coef, df$coef_comb, method = &quot;spearman&quot;): Cannot ## compute exact p-value with ties ## ## Spearman&#39;s rank correlation rho ## ## data: df$coef and df$coef_comb ## S = 38921, p-value &lt; 2.2e-16 ## alternative hypothesis: true rho is not equal to 0 ## sample estimates: ## rho ## 0.9217878 p p_scale p_scale + ggrepel::geom_text_repel() ## Warning: ggrepel: 131 unlabeled data points (too many overlaps). Consider ## increasing max.overlaps 5.1.7 Figure 5J epi6 &lt;- fread(here(&quot;output/meissner_epi_cpg_meth_sum.tsv&quot;)) %&gt;% mutate(dAB_epi6 = ko3a - ko3b, dA_epi6 = ko3a - wt, dB_epi6 = ko3b - wt) %&gt;% filter(!is.na(dAB_epi6)) %&gt;% select(chrom, start, end, wt, ko3a, ko3b, dAB_epi6, dA_epi6, dB_epi6) %&gt;% as_tibble() nrow(epi6) ## [1] 13388 epi6_scores &lt;- gextract.left_join(c(&quot;DNMT.ab_score_comb&quot;, &quot;DNMT.ab_score_xgb_plus&quot;), intervals=epi6, iterator=epi6, colnames=c(&quot;comb_model&quot;, &quot;eb_model&quot;)) %&gt;% select(-(chrom1:end1)) %&gt;% as_tibble() p_epi6_score &lt;- epi6_scores %&gt;% select(eb_model, dAB_epi6) %&gt;% mutate(col = densCols(., bandwidth=bandwidth,colramp=colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )))) %&gt;% ggplot(aes(x=eb_model, y=dAB_epi6, col=col)) + geom_point(shape=19, size=point_size) + scale_color_identity() + coord_cartesian(xlim = c(-1, 0.6), ylim = c(-0.4, 0.6)) + xlab(&quot;EB model&quot;) + ylab(&quot;Epi (3a-/-) â (3b-/-)&quot;) + theme(aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) + labs(subtitle = glue(&quot;r = {cor}&quot;, cor = round(cor(epi6_scores$dAB_epi6, epi6_scores$eb_model), digits=2))) cor(epi6_scores$dAB_epi6, epi6_scores$eb_model) ## [1] 0.6284416 p_epi6_score p_epi6_score_comb &lt;- epi6_scores %&gt;% select(comb_model, dAB_epi6) %&gt;% mutate(col = densCols(., bandwidth=bandwidth,colramp=colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )))) %&gt;% ggplot(aes(x=comb_model, y=dAB_epi6, col=col)) + geom_point(shape=19, size=point_size) + scale_color_identity() + # coord_cartesian(xlim = c(-1, 0.6), ylim = c(-0.4, 0.6)) + xlab(&quot;Comb model&quot;) + ylab(&quot;Epi (3a-/-) â (3b-/-)&quot;) + theme(aspect.ratio=1, panel.grid.major=element_blank(), panel.grid.minor=element_blank()) + labs(subtitle = glue(&quot;r = {cor}&quot;, cor = round(cor(epi6_scores$dAB_epi6, epi6_scores$comb_model), digits=2))) cor(epi6_scores$dAB_epi6, epi6_scores$comb_model) ## [1] 0.6040253 p_epi6_score_comb "],["yagi-et-al..html", "6 Yagi et al.Â ", " 6 Yagi et al.Â  Identification of distinct loci for de novo DNA methylation by DNMT3A and DNMT3B during mammalian development 6.0.1 initialize definitions suppressMessages(suppressWarnings(source(here::here(&quot;code/init.R&quot;)))) 6.0.2 DMRs yagi_dmrs &lt;- fread(here(&quot;data/yagi_dmrs.tsv&quot;)) %&gt;% filter(chrom %in% gintervals.all()$chrom) %&gt;% as_tibble() yagi_dmrs &lt;- yagi_dmrs %&gt;% mutate( Yagi_3a = ifelse(type == &quot;proA&quot;, meanMethy2, meanMethy1), Yagi_3b = ifelse(type == &quot;proB&quot;, meanMethy2, meanMethy1) ) yagi_dmrs &lt;- yagi_dmrs %&gt;% select(chrom, start, end, type, Yagi_3a, Yagi_3b) head(yagi_dmrs) ## # A tibble: 6 x 6 ## chrom start end type Yagi_3a Yagi_3b ## 1 chr6 48387929 48389217 proA 0.05732420 0.6731291 ## 2 chr3 55584536 55588340 proA 0.02412445 0.4470477 ## 3 chr1 186549516 186554917 proA 0.02829836 0.5260327 ## 4 chr4 135845931 135846972 proA 0.10997219 0.6153078 ## 5 chr11 118941147 118943355 proA 0.04548308 0.6741248 ## 6 chr7 77491664 77494580 proA 0.02552988 0.6597258 nrow(yagi_dmrs) ## [1] 764 6.0.3 Get Meissner data md &lt;- tribble(~track_name, ~sort, ~num, &quot;Meissner_Nature_2017.Epi_Dnmt3a_1&quot;, &quot;ko3a&quot;, 1, &quot;Meissner_Nature_2017.Epi_Dnmt3a_2&quot;, &quot;ko3a&quot;, 2, &quot;Meissner_Nature_2017.Epi_Dnmt3a_4&quot;, &quot;ko3a&quot;, 4, &quot;Meissner_Nature_2017.Epi_Dnmt3a_5&quot;, &quot;ko3a&quot;, 5, &quot;Meissner_Nature_2017.Epi_Dnmt3a_6&quot;, &quot;ko3a&quot;, 6, &quot;Meissner_Nature_2017.Epi_Dnmt3b_1&quot;, &quot;ko3b&quot;, 1, &quot;Meissner_Nature_2017.Epi_Dnmt3b_2&quot;, &quot;ko3b&quot;, 2, &quot;Meissner_Nature_2017.Epi_Dnmt3b_3&quot;, &quot;ko3b&quot;, 3, &quot;Meissner_Nature_2017.Epi_Dnmt3b_4&quot;, &quot;ko3b&quot;, 4, &quot;Meissner_Nature_2017.Epi_Dnmt3b_5&quot;, &quot;ko3b&quot;, 5, &quot;Meissner_Nature_2017.Epi_Dnmt3b_6&quot;, &quot;ko3b&quot;, 6, &quot;Meissner_Nature_2017.Epi_WT_4&quot;, &quot;wt&quot;, 4, &quot;Meissner_Nature_2017.Epi_WT_5&quot;, &quot;wt&quot;, 5, &quot;Meissner_Nature_2017.Epi_WT_6&quot;, &quot;wt&quot;, 6, &quot;Meissner_Nature_2017.Epi_WT_7&quot;, &quot;wt&quot;, 7) %&gt;% mutate(name = paste0(sort, &quot;_&quot;, num)) m_all_epi6 &lt;- gextract_meth(tracks = md$track_name, names=md$name, intervals=yagi_dmrs %&gt;% select(chrom, start, end), extract_meth_calls = TRUE, iterator = yagi_dmrs %&gt;% select(chrom, start, end)) %cache_df% here(&quot;output/meissner_epi_yagi_meth.tsv&quot;) %&gt;% as_tibble() min_cov &lt;- 10 m_epi6 &lt;- m_all_epi6 %&gt;% select(chrom, start, end) for (g in unique(md$sort)){ nms &lt;- md %&gt;% filter(sort == g) %&gt;% pull(name) cov_col &lt;- paste0(g, &quot;.cov&quot;) meth_col &lt;- paste0(g, &quot;.meth&quot;) m_epi6[[cov_col]] &lt;- rowSums(m_all_epi6[, paste0(nms, &quot;.cov&quot;)], na.rm=TRUE) m_epi6[[meth_col]] &lt;- rowSums(m_all_epi6[, paste0(nms, &quot;.meth&quot;)], na.rm=TRUE) m_epi6[[g]] &lt;- ifelse(m_epi6[[cov_col]] &gt;= min_cov, m_epi6[[meth_col]] / m_epi6[[cov_col]], NA) } m_epi6 &lt;- m_epi6 %&gt;% select(-ends_with(&quot;.meth&quot;), -ends_with(&quot;.cov&quot;)) %cache_df% here(&quot;output/meissner_epi_yagi_meth_sum.tsv&quot;) 6.0.4 Get MEEB data m_meeb &lt;- calc_eb_day0_to_day6_cpg_meth(intervals = yagi_dmrs %&gt;% select(chrom, start, end), iterator = yagi_dmrs %&gt;% select(chrom, start, end), cache_fn = here(&quot;output/meeb_day0_to_day6_yagi_meth.tsv&quot;), use_sort = FALSE, max_na = 100) %&gt;% select(-ends_with(&quot;cov&quot;), -ends_with(&quot;meth&quot;)) %&gt;% select(-contains(&quot;_ko1&quot;), -contains(&quot;_tko&quot;), -starts_with(&quot;d0_&quot;)) head(m_meeb) ## # A tibble: 6 x 30 ## chrom start end d3_d13ako d4_d13ako d3_d13bko d4_d13bko d5_dko ## 1 chr1 14497410 14498475 NA NA NA 0.38461538 NA ## 2 chr1 21070410 21070719 NA NA NA NA NA ## 3 chr1 34163709 34164326 NA NA NA NA NA ## 4 chr1 38266943 38267649 0.1076265 0.09757137 0.1166078 0.07476636 0.01094891 ## 5 chr1 38685382 38686284 NA NA NA NA NA ## 6 chr1 57032568 57032760 0.0000000 0.00000000 0.0000000 NA NA ## d6_dko d0S_3a d1_3a d2_3a d3_3a d4_3a d5_3a ## 1 NA 0.66346154 NA NA NA 0.55855856 0.4925373 ## 2 NA 0.31428571 NA NA NA 0.29113924 0.3614458 ## 3 NA 0.05769231 NA NA NA 0.08333333 0.1320755 ## 4 0.009803922 0.29095853 0.1721992 0.1582915 0.2002882 0.25531915 0.5327103 ## 5 NA 0.41111111 NA NA NA 0.22222222 0.4615385 ## 6 NA 0.06779661 NA NA 0.0000000 0.00000000 0.0000000 ## d6_3a d0S_3b d1_3b d2_3b d3_3b d4_3b d5_3b ## 1 0.50000000 0.8068182 NA NA NA 0.80373832 0.80000000 ## 2 0.43801653 0.5918367 NA NA NA 0.61538462 0.64406780 ## 3 0.17283951 0.0000000 NA NA NA 0.13513514 0.22580645 ## 4 0.67054908 0.3020355 0.1372951 0.2084993 0.2549451 0.25453654 0.29600000 ## 5 0.44520548 0.5306122 NA NA NA 0.48913043 0.64444444 ## 6 0.04635762 0.1538462 NA NA NA 0.04395604 0.01923077 ## d6_3b d0S_wt d1_wt d2_wt d3_wt d4_wt d5_wt ## 1 0.81250000 NA NA NA 0.8571429 0.8000000 0.79569892 ## 2 0.67832168 NA NA NA NA 0.9523810 0.59183673 ## 3 0.22602740 NA NA NA NA 0.1600000 0.46913580 ## 4 0.33012628 0.3144775 0.1382979 0.1384615 0.2685560 0.3562982 0.77044610 ## 5 0.58235294 NA NA NA NA 0.5666667 0.66666667 ## 6 0.05128205 NA NA NA NA 0.2666667 0.03921569 ## d6_wt ## 1 0.82173913 ## 2 0.84771574 ## 3 0.36200000 ## 4 0.74321230 ## 5 0.61437908 ## 6 0.05809129 dim(m_meeb) ## [1] 764 30 yagi_meth &lt;- yagi_dmrs %&gt;% left_join(m_epi6) %&gt;% left_join(m_meeb) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) head(yagi_meth) ## # A tibble: 6 x 36 ## chrom start end type Yagi_3a Yagi_3b ko3a ko3b ## 1 chr6 48387929 48389217 proA 0.05732420 0.6731291 0.03305727 0.01935100 ## 2 chr3 55584536 55588340 proA 0.02412445 0.4470477 0.03345408 0.02190160 ## 3 chr1 186549516 186554917 proA 0.02829836 0.5260327 0.03760639 0.02147777 ## 4 chr4 135845931 135846972 proA 0.10997219 0.6153078 0.11737341 0.04451465 ## 5 chr11 118941147 118943355 proA 0.04548308 0.6741248 0.07684360 0.03943182 ## 6 chr7 77491664 77494580 proA 0.02552988 0.6597258 0.00000000 0.04000000 ## wt d3_d13ako d4_d13ako d3_d13bko d4_d13bko d5_dko d6_dko ## 1 0.03128703 NA 0.05000000 NA 0.00000000 NA 0.00000000 ## 2 0.05538695 NA 0.00000000 0.0000000 0.00000000 NA NA ## 3 0.07845847 0.09322034 0.09478407 0.1114696 0.04453912 0.007029877 0.01030928 ## 4 0.21266968 0.03361345 0.06903766 0.0311804 0.02857143 0.000000000 0.01162791 ## 5 0.14754879 0.15384615 0.09090909 0.0000000 0.03571429 NA 0.00000000 ## 6 NA NA 0.00000000 NA NA NA NA ## d0S_3a d1_3a d2_3a d3_3a d4_3a d5_3a d6_3a ## 1 0.05240642 0.00000000 0.0000000 0.03378378 0.03199269 0.0715859 0.1162437 ## 2 0.22588832 0.31034483 0.1200000 0.08333333 0.24896836 0.2323718 0.2582781 ## 3 0.46839605 0.33613445 0.3232462 0.38888889 0.43388339 0.2618705 0.3223706 ## 4 0.12714157 0.06666667 0.0505618 0.10747664 0.10019084 0.1414427 0.4215470 ## 5 0.18901660 0.07692308 0.2500000 0.14893617 0.19910847 0.2071713 0.2143895 ## 6 0.36474164 0.25000000 0.1153846 0.34482759 0.34335840 0.2874251 0.3011665 ## d0S_3b d1_3b d2_3b d3_3b d4_3b d5_3b d6_3b ## 1 0.09992194 0.01086957 0.02816901 0.00781250 0.03423237 0.05020921 0.03491379 ## 2 0.22635659 0.19148936 0.12500000 0.14893617 0.21798030 0.21082621 0.25292056 ## 3 0.51350450 0.40802213 0.51413428 0.60601504 0.54364798 0.23013245 0.35954601 ## 4 0.11684518 0.03960396 0.05479452 0.09459459 0.10903427 0.08480000 0.08768536 ## 5 0.19321149 0.23255814 0.14285714 0.22580645 0.18750000 0.17412141 0.18470021 ## 6 0.66250000 0.15384615 0.88235294 0.77777778 0.72745098 0.64102564 0.62837163 ## d0S_wt d1_wt d2_wt d3_wt d4_wt d5_wt d6_wt ## 1 0.0733945 0.00000000 0.01075269 0.04411765 0.05958132 0.07562278 0.08210877 ## 2 0.1935484 0.11363636 0.18918919 0.22857143 0.27392739 0.31428571 0.33866951 ## 3 0.6337895 0.39802336 0.44246032 0.56379101 0.67888716 0.59645937 0.38639532 ## 4 0.1174785 0.05925926 0.05384615 0.12921348 0.19919786 0.27834179 0.32883390 ## 5 0.1296296 0.06000000 0.07317073 0.15789474 0.28443114 0.22222222 0.24428214 ## 6 0.7187500 0.48275862 0.66666667 0.56410256 0.82432432 0.73489933 0.66535433 yagi_meth %&gt;% count(type) ## # A tibble: 2 x 2 ## type n ## 1 proA 427 ## 2 proB 343 6.0.5 Extended Data Figure 8I options(repr.plot.width = 14, repr.plot.height = 7) line_colors &lt;- c(&quot;wt&quot; = &quot;darkblue&quot;, &quot;3a&quot; = &quot;purple&quot;, &quot;3b&quot; = &quot;orange&quot;) p_yagi &lt;- yagi_meth %&gt;% select(chrom:end, type, Yagi_3a, Yagi_3b, epi_ko3a = ko3a, epi_ko3b = ko3b, epi_wt = wt, everything()) %&gt;% gather(&quot;samp&quot;, &quot;meth&quot;, -(chrom:type)) %&gt;% mutate(samp = gsub(&quot;_all&quot;, &quot;&quot;, samp)) %&gt;% mutate(line = case_when( grepl(&quot;3a&quot;, samp) ~ &quot;3a&quot;, grepl(&quot;3b&quot;, samp) ~ &quot;3b&quot;, grepl(&quot;wt&quot;, samp) ~ &quot;wt&quot; )) %&gt;% mutate(line = factor(line, levels = names(line_colors))) %&gt;% ggplot(aes(x=samp, y=meth, fill=line)) + geom_boxplot(outlier.size = 0, lwd = 0.1) + xlab(&quot;&quot;) + ylab(&quot;Methylation&quot;) + scale_fill_manual(&quot;&quot;, values=line_colors) + vertical_labs() + theme(axis.text.x=element_text(size=4)) + facet_wrap(~type) p_yagi ## Warning: Removed 8158 rows containing non-finite values (stat_boxplot). "],["single-cell-methylation.html", "7 Single cell methylation 7.1 Generate cell-cycle ordering 7.2 Plot in-vivo cell-cycle 7.3 Plot EBs cell cycle 7.4 Plot other EB batches", " 7 Single cell methylation 7.0.1 initialize definitions suppressMessages(suppressWarnings(source(here::here(&quot;code/init.R&quot;)))) suppressMessages(suppressWarnings(load_cgdb())) suppressMessages(suppressWarnings(load_plpdb())) db ## cgdb object ## 21,342,746 CpGs X 24,179 cells ## --- root (@db_root): /net/mraid14/export/tgdata/users/aviezerl/proj/ebdnmt/Dnmt3ab_EB/methylation/data/cgdb db_f &lt;- db_f %&gt;% fill_sort_column() db_plp_f &lt;- db_plp %&gt;% inner_join_cells(db_f@cells %&gt;% select(cell_id)) ## Joining, by = &quot;cell_id&quot; 7.1 Generate cell-cycle ordering Extract coverage in early and late regions per single cell: tor_covs &lt;- db_plp_f %&gt;% mutate_cpgs(tor_grp = case_when(tor &lt;= 0 ~ &quot;late&quot;, tor &gt;= 0 ~ &quot;early&quot;)) %&gt;% filter_cpgs(chrom != &quot;chrX&quot;, chrom != &quot;chrY&quot;, !is.na(tor_grp)) %&gt;% group_by_cpgs(tor_grp) %&gt;% summarise() %&gt;% select(-meth) %&gt;% spread(tor_grp, cov) %cache_df% here(&quot;output/tor_cov_per_cell.tsv&quot;) %&gt;% as_tibble() Extract the same stratified by CpG content: tor_cgc_meth &lt;- db_f %&gt;% mutate_cpgs(cg_cont = cut(cg500, c(0,0.02,0.08,0.2)), tor_grp = case_when(tor &lt;= 0 ~ &quot;late&quot;, tor &gt;= 0 ~ &quot;early&quot;)) %&gt;% filter_cpgs(chrom != &quot;chrX&quot;, chrom != &quot;chrY&quot;, !is.na(tor_grp), !is.na(cg_cont)) %&gt;% group_by_cpgs(cg_cont, tor_grp) %&gt;% summarise() %&gt;% mutate(avg = meth / cov) %&gt;% pivot_wider(c(cell_id, cg_cont), names_from=tor_grp, values_from=cov:avg) %cache_df% here(&quot;output/tor_meth_cgc_per_cell.tsv&quot;) %&gt;% as_tibble() Extract the same stratified by CpG content and AB score: tor_ab_meth &lt;- calc_cgc_ab_score_sc(db_f, ab_score) %&gt;% rename(ab_score = score) %cache_df% here(&quot;output/tor_meth_cgc_ab_score_per_cell.tsv&quot;) %&gt;% as_tibble() tor_a_meth &lt;- calc_cgc_ab_score_sc(db_f, a_score) %&gt;% rename(a_score = score) %cache_df% here(&quot;output/tor_meth_cgc_a_score_per_cell.tsv&quot;) %&gt;% as_tibble() tor_b_meth &lt;- calc_cgc_ab_score_sc(db_f, b_score) %&gt;% rename(b_score = score) %cache_df% here(&quot;output/tor_meth_cgc_b_score_per_cell.tsv&quot;) %&gt;% as_tibble() Generate for each cell the ratio between early and late coverage (early_late_cov) and the difference in methylation between early and late regions (meth_late_early_diff). Requirments: - CpG content &lt;= 2% - Early coverage &gt; 2000 and Late coverage &gt; 2000 - Total coverage of early + late higher than 20000 min_cov &lt;- 2e3 min_cov_both &lt;- 2e4 df_cell_cycle_annot &lt;- tor_cgc_meth %&gt;% filter(cg_cont == &quot;(0,0.02]&quot;) %&gt;% select(-cg_cont) %&gt;% filter(cov_early &gt;= min_cov, cov_late &gt;= min_cov) %&gt;% left_join(tor_covs %&gt;% filter(early &gt;= min_cov, late &gt;= min_cov)) %&gt;% left_join(db_f@cells) %&gt;% filter(!is.na(early)) %&gt;% mutate(early_late_cov = log2(early / late), meth_late_early_diff = avg_late - avg_early) %&gt;% filter(early + late &gt;= min_cov_both) %cache_df% here(&quot;output/sc_cell_cycle_annot.tsv&quot;) %&gt;% as_tibble() 7.1.1 In-vivo Merge with germ layer annotations (FACS): invivo_sort &lt;- fread(here(&quot;data/cells_germ_layer_invivo.tsv&quot;)) %&gt;% as_tibble() df_cell_cycle_invivo &lt;- df_cell_cycle_annot %&gt;% inner_join(invivo_sort) %&gt;% filter(germ_layer != &quot;ExE&quot;) %&gt;% select(cell_id, day, germ_layer, avg_late, avg_early, early, late, early_late_cov, early_late_diff = meth_late_early_diff) ## Joining, by = &quot;cell_id&quot; Calculate cell-cycle ordering for each day and germ layer using prinicipal curve on the coverage ratio and methylation difference: calc_cell_cycle_ord function: Divides log2(early/late) coverage ratio by its standard deviation. Divides late - early methylation difference by its standard deviation. Calculates principal curve using: pc &lt;- princurve::principal_curve(x=mat_norm, start=princurve:::start_circle(mat_norm), stretch=2, smoother = &quot;periodic_lowess&quot;) We then: define highest early/late coverage ratio as start smooth early/late coverage (rolling mean, k=20) define the middle of cell cycle as the minimum of smoothed trend reorder cells l_invivo &lt;- df_cell_cycle_invivo %&gt;% mutate(day = ifelse(day == &quot;e8&quot;, &quot;e8.5&quot;, day)) %&gt;% add_count(day, germ_layer) %&gt;% filter(n &gt;= 50, germ_layer %in% c(&quot;epi&quot;, &quot;ecto&quot;, &quot;endo&quot;, &quot;meso&quot;)) %&gt;% as.data.frame() %&gt;% plyr::dlply(c(&quot;day&quot;, &quot;germ_layer&quot;), function(x) calc_cell_cycle_ord(as_tibble(x))) ## Joining, by = &quot;cell_id&quot; ## Joining, by = &quot;cell_id&quot; ## Joining, by = &quot;cell_id&quot; ## Joining, by = &quot;cell_id&quot; ## Joining, by = &quot;cell_id&quot; ## Joining, by = &quot;cell_id&quot; ## Joining, by = &quot;cell_id&quot; Anchor ordering for in-vivo samples: dir.create(here(&quot;output/cell_cycle&quot;), showWarnings = FALSE) df_ord_invivo &lt;- l_invivo %&gt;% map_dfr(~ .$df) %&gt;% as_tibble() %&gt;% unite(&quot;type&quot;, day:germ_layer, remove=FALSE) %&gt;% group_by(day, germ_layer) %&gt;% arrange(day, germ_layer, desc(early_late_cov) ) %&gt;% mutate( new_ord = ord - ord[1] + 1, new_ord = ifelse(new_ord &gt;= 0, new_ord, max(new_ord) + abs(min(new_ord)) - abs(new_ord)), ord1 = new_ord / max(new_ord) ) %&gt;% mutate( trend = zoo::rollmean(early_late_cov[order(ord1)], 20, na.pad = TRUE), i_mid = zoo::rollmean(ord1[order(ord1)],20)[which.min(trend)], ord2 = i_mid - ord1, ord2 = ord2 - floor(ord2) ) %cache_df% here(&quot;output/cell_cycle/invivo.tsv&quot;) Add ordering to CpG content and ab-score objects: df_ord_cgc_invivo &lt;- tor_cgc_meth %&gt;% inner_join(df_ord_invivo %&gt;% select(cell_id, day, germ_layer, ord2, early_late_cov)) %fcache_df% here(&quot;output/cell_cycle/invivo_cgc.tsv&quot;) ## Joining, by = &quot;cell_id&quot; df_ord_ab_score_invivo &lt;- tor_ab_meth %&gt;% inner_join(df_ord_invivo %&gt;% select(cell_id, day, germ_layer, ord2, early_late_cov)) %fcache_df% here(&quot;output/cell_cycle/invivo_ab_score.tsv&quot;) ## Joining, by = &quot;cell_id&quot; 7.1.2 EB df_cell_cycle_annot %&gt;% filter(line != &quot;mouse&quot;, day %in% c(&quot;d5&quot;, &quot;d6&quot;)) %&gt;% count(day, experiment) ## # A tibble: 7 x 3 ## day experiment n ## 1 d5 experiment3 659 ## 2 d5 experiment4 1672 ## 3 d5 experiment6 1021 ## 4 d5 experiment8 362 ## 5 d6 experiment2 746 ## 6 d6 experiment3 645 ## # ... with 1 more rows Experiments 5,6 and 8 had a strong batch effect and therefore they are processed separatley below. We remove cells with extremly low methylation (less than 0.7) df_cell_cycle_eb &lt;- df_cell_cycle_annot %&gt;% filter(line != &quot;mouse&quot;, day %in% c(&quot;d5&quot;, &quot;d6&quot;), !(experiment %in% paste0(&quot;experiment&quot;, c(5,6,8))), avg_early &gt;= 0.7, avg_late &gt;= 0.7) %&gt;% select(cell_id, day, line, sort, experiment, avg_late, avg_early, early, late, early_late_cov, early_late_diff = meth_late_early_diff) l_ebs &lt;- df_cell_cycle_eb %&gt;% add_count(day, line) %&gt;% filter(n &gt;= 50) %&gt;% as.data.frame() %&gt;% plyr::dlply(c(&quot;day&quot;, &quot;line&quot;), function(x) calc_cell_cycle_ord(as_tibble(x))) ## Joining, by = &quot;cell_id&quot; ## Joining, by = &quot;cell_id&quot; ## Joining, by = &quot;cell_id&quot; ## Joining, by = &quot;cell_id&quot; df_ord_ebs &lt;- l_ebs %&gt;% map_dfr(~ .$df) %&gt;% as_tibble() %&gt;% unite(&quot;type&quot;, day:line, remove=FALSE) %&gt;% group_by(day, line) %&gt;% arrange(day, line, desc(early_late_cov) ) %&gt;% mutate( new_ord = ord - ord[1] + 1, new_ord = ifelse(new_ord &gt;= 0, new_ord, max(new_ord) + abs(min(new_ord)) - abs(new_ord)), ord1 = new_ord / max(new_ord) ) %&gt;% mutate( trend = zoo::rollmean(early_late_cov[order(ord1)], 20, na.pad = TRUE), i_mid = zoo::rollmean(ord1[order(ord1)],20)[which.min(trend)], ord2 = i_mid - ord1, ord2 = ord2 - floor(ord2) ) %&gt;% mutate(type = factor(type, levels = c(&quot;d6_wt&quot;, &quot;d5_wt&quot;, &quot;d5_ko3a&quot;, &quot;d5_ko3b&quot;, &quot;d6_ko3a&quot;, &quot;d6_ko3b&quot;))) %fcache_df% here(&quot;output/cell_cycle/ebs.tsv&quot;) df_ord_cgc_ebs &lt;- tor_cgc_meth %&gt;% inner_join(df_ord_ebs %&gt;% select(cell_id, day, line, type, ord2, early_late_cov)) ## Joining, by = &quot;cell_id&quot; df_ord_ab_score_ebs &lt;- tor_ab_meth %&gt;% inner_join(df_ord_ebs %&gt;% select(cell_id, day, line, type, ord2, early_late_cov)) ## Joining, by = &quot;cell_id&quot; Merge in-vivo and ebs data df_ord_all &lt;- bind_rows( df_ord_invivo %&gt;% filter(day == &quot;e7.5&quot;) %&gt;% mutate(line = germ_layer) %&gt;% select(-germ_layer), df_ord_ebs %&gt;% filter(day %in% c(&quot;d5&quot;, &quot;d6&quot;)) ) Homogenize cell-cycle options(repr.plot.width = 8, repr.plot.height = 5) segmented &lt;- df_ord_all %&gt;% plyr::ddply(&quot;type&quot;, function(x) x %&gt;% get_cc_segments(n_breaks=2, psi=c(0.2, 0.5), labels=c(&quot;S-start&quot;, &quot;S-mid&quot;, &quot;S-end&quot;))) %fcache_df% here(&quot;output/cell_cycle/segmented.tsv&quot;) %&gt;% as_tibble() ## `geom_smooth()` using formula &#39;y ~ x&#39; ## `geom_smooth()` using formula &#39;y ~ x&#39; ## `geom_smooth()` using formula &#39;y ~ x&#39; ## `geom_smooth()` using formula &#39;y ~ x&#39; ## `geom_smooth()` using formula &#39;y ~ x&#39; ## `geom_smooth()` using formula &#39;y ~ x&#39; ## `geom_smooth()` using formula &#39;y ~ x&#39; 7.2 Plot in-vivo cell-cycle get_cc_early_late_meth_trend(df_ord_invivo %&gt;% filter(germ_layer == &quot;ecto&quot;) %&gt;% rename(avg = avg_early)) %&gt;% skimr::skim(.fitted) Table 7.1: Data summary Name Piped data Number of rows 595 Number of columns 19 _______________________ Column type frequency: numeric 1 ________________________ Group variables None Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist .fitted 0 1 0.88 0.02 0.85 0.86 0.89 0.91 0.91 âââââ get_cc_early_late_meth_trend(df_ord_invivo %&gt;% filter(germ_layer == &quot;ecto&quot;) %&gt;% rename(avg = avg_late)) %&gt;% skimr::skim(.fitted) Table 7.1: Data summary Name Piped data Number of rows 595 Number of columns 19 _______________________ Column type frequency: numeric 1 ________________________ Group variables None Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist .fitted 0 1 0.92 0.02 0.88 0.9 0.92 0.93 0.93 âââââ 7.2.1 Figure 6B options(repr.plot.width = 10, repr.plot.height = 7) p_el_invivo_7.5 &lt;- map(c(&quot;ecto&quot;, &quot;meso&quot;, &quot;endo&quot;), ~ df_ord_invivo %&gt;% filter(germ_layer == .x) %&gt;% plot_cc_early_late_meth(point_size=0.1, add_trend_lines = TRUE, y_lim = c(0.7, 1), plot_phase_lines = FALSE, trend_ylim = c(0,1.2))) p_el_invivo_7.5 ## [[1]] ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 63 rows containing non-finite values (stat_smooth). ## Warning: Removed 63 rows containing missing values (geom_point). ## `geom_smooth()` using formula &#39;y ~ x&#39; ## ## [[2]] ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 588 rows containing non-finite values (stat_smooth). ## Warning: Removed 588 rows containing missing values (geom_point). ## `geom_smooth()` using formula &#39;y ~ x&#39; ## ## [[3]] ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 3 rows containing non-finite values (stat_smooth). ## Warning: Removed 3 rows containing missing values (geom_point). ## `geom_smooth()` using formula &#39;y ~ x&#39; 7.2.2 Figure 6A options(repr.plot.width = 10, repr.plot.height = 15) p_el_invivo_7.5_circle &lt;- df_ord_invivo %&gt;% filter(day == &quot;e7.5&quot;) %&gt;% mutate(germ_layer = factor(germ_layer, levels=c(&quot;ecto&quot;, &quot;meso&quot;, &quot;endo&quot;))) %&gt;% plot_cc_circle(point_size=0.4) + facet_grid(germ_layer~.) + scale_x_continuous(breaks=c(-0.1, 0.15)) + coord_cartesian(ylim = c(-0.15, 1.9), xlim=c(-0.12, 0.14)) p_el_invivo_7.5_circle + theme_bw() + theme(aspect.ratio=1) options(repr.plot.width = 8, repr.plot.height = 8) germ_layer_colors &lt;- c(&quot;ecto&quot; = &quot;#5A9E30&quot;, &quot;meso&quot; = &quot;#BE89B7&quot;, &quot;endo&quot; = &quot;#ED4F93&quot;) df &lt;- df_ord_ab_score_invivo %&gt;% filter(cg_cont == &#39;(0,0.02]&#39;) %&gt;% group_by(germ_layer) %&gt;% do({calc_cc_early_late_ab_diff(., low = &quot;(-1.46,-0.734]&quot;, high = &quot;(0.281,1.63]&quot;)}) %&gt;% ungroup() %&gt;% mutate(germ_layer = factor(germ_layer, levels = names(germ_layer_colors))) %&gt;% filter(!is.na(germ_layer)) df &lt;- df %&gt;% pivot_longer(names_sep=&quot;_&quot;, names_prefix=&quot;avg_&quot;, cols=starts_with(&quot;avg&quot;), names_to=c(&quot;tor&quot;, &quot;ab_score&quot;, &quot;dummy&quot;), values_to=&quot;avg&quot;) %&gt;% mutate(ab_score = forcats::fct_recode(factor(ab_score), &quot;A-phil&quot; = &quot;l&quot;, &quot;B-phil&quot; = &quot;h&quot;)) %&gt;% mutate(germ_layer = factor(germ_layer, levels = names(germ_layer_colors))) %&gt;% filter(!is.na(line)) %&gt;% filter(cg_cont == &quot;(0,0.02]&quot;) ## Warning in is.na(line): is.na() applied to non-(list or vector) of type ## &#39;closure&#39; # show ecto trends on endo and meso df_ecto &lt;- df %&gt;% filter(germ_layer == &quot;ecto&quot;) df_ecto &lt;- bind_rows(df_ecto %&gt;% mutate(germ_layer = &quot;meso&quot;), df_ecto %&gt;% mutate(germ_layer = &quot;endo&quot;)) %&gt;% mutate(germ_layer = factor(germ_layer, levels = names(germ_layer_colors))) df_max_repli &lt;- df %&gt;% group_by(germ_layer, tor) %&gt;% filter(ord2 &lt;= 2, ord2 &gt;= 1) %&gt;% summarise(s = ord2[which.max(early_late_cov)]) df_max_repli ## # A tibble: 6 x 3 ## # groups: germ_layer ## germ_layer tor s ## 1 ecto early 1.651786 ## 2 ecto late 1.651786 ## 3 meso early 1.661822 ## 4 meso late 1.661822 ## 5 endo early 1.570423 ## 6 endo late 1.570423 7.2.3 Figure 6C p_ab_trend_invivo &lt;- df %&gt;% mutate(germ_layer = factor(germ_layer, levels = names(germ_layer_colors))) %&gt;% ggplot(aes(x=ord2, y=avg, color=ab_score)) + geom_smooth(method=&quot;loess&quot;, span=0.2, se=FALSE, size=0.5) + geom_smooth(data = df_ecto %&gt;% filter(ab_score == &quot;A-phil&quot;), method=&quot;loess&quot;, span=0.2, se=FALSE, size=0.5, linetype=&quot;dashed&quot;, color=&quot;gray&quot;) + geom_smooth(data = df_ecto %&gt;% filter(ab_score == &quot;B-phil&quot;), method=&quot;loess&quot;, span=0.2, se=FALSE, size=0.5, linetype=&quot;dotted&quot;, color=&quot;gray&quot;) + coord_cartesian(xlim=c(1,2), expand=0) + ggsci::scale_color_lancet(name = &quot;CpGs&quot;) + geom_vline(aes(xintercept = s), data = df_max_repli, color = &quot;darkblue&quot;, linetype = &quot;dashed&quot;) + facet_grid(germ_layer~tor) + xlab(&quot;&quot;) + ylab(&quot;Methylation&quot;) + theme( axis.text.x = element_blank(), axis.ticks.x = element_blank() ) p_ab_trend_invivo ## `geom_smooth()` using formula &#39;y ~ x&#39; ## `geom_smooth()` using formula &#39;y ~ x&#39; ## `geom_smooth()` using formula &#39;y ~ x&#39; 7.2.4 Extended Data Figure 9G germ_layer_colors &lt;- c(&quot;ecto&quot; = &quot;#5A9E30&quot;, &quot;meso&quot; = &quot;#BE89B7&quot;, &quot;endo&quot; = &quot;#ED4F93&quot;) df_diff &lt;- df %&gt;% distinct(cell_id, cg_cont, day, germ_layer, ord2, tor, ab_score, avg) %&gt;% spread(ab_score, avg) %&gt;% mutate(diff = `B-phil` - `A-phil`) %&gt;% filter(ord2 &gt;= 1, ord2 &lt;= 2) %&gt;% mutate(ord_grp = cut(ord2, 3, include.lowest=TRUE, labels=c(&quot;S-start&quot;, &quot;S-mid&quot;, &quot;S-end&quot;))) p_ab_diff &lt;- df_diff %&gt;% ggplot(aes(x=ord_grp, y=diff, fill=germ_layer)) + geom_boxplot(outlier.shape=NA) + facet_grid(.~tor) + scale_fill_manual(name=&quot;&quot;, values=germ_layer_colors) + ylab(&quot;B-phil - A-phil&quot;) + xlab(&quot;&quot;) + ggforce::geom_sina(size=0.01, alpha=0.1) + vertical_labs() + coord_cartesian(ylim = c(-0.04, 0.06)) p_ab_diff df_diff %&gt;% count(tor, ord_grp, germ_layer) %&gt;% arrange(germ_layer) ## # A tibble: 18 x 4 ## tor ord_grp germ_layer n ## 1 early S-start ecto 198 ## 2 early S-mid ecto 199 ## 3 early S-end ecto 198 ## 4 late S-start ecto 198 ## 5 late S-mid ecto 199 ## 6 late S-end ecto 198 ## # ... with 12 more rows df_diff %&gt;% group_by(tor, ord_grp) %&gt;% do({broom::tidy(ks.test(.$diff[.$germ_layer == &quot;ecto&quot;], .$diff[.$germ_layer == &quot;meso&quot;]))}) %&gt;% mutate(type = &quot;ecto vs meso&quot;) %&gt;% mutate(stars = case_when(p.value &lt;= 0.0001 ~ &quot;****&quot;, p.value &lt;= 0.001 ~ &quot;***&quot;, p.value &lt;= 0.01 ~ &quot;**&quot;, p.value &lt;= 0.05 ~ &quot;*&quot;)) ## # A tibble: 6 x 8 ## # groups: tor, ord_grp ## tor ord_grp statistic p.value ## 1 early S-start 0.3774929 4.440892e-16 ## 2 early S-mid 0.3640675 3.996803e-15 ## 3 early S-end 0.3658460 3.663736e-15 ## 4 late S-start 0.2272727 4.183555e-06 ## 5 late S-mid 0.2105753 2.425034e-05 ## 6 late S-end 0.3532197 3.708145e-14 ## method alternative type stars ## 1 Asymptotic two-sample Kolmogorov-Smirnov test two-sided ecto vs meso **** ## 2 Asymptotic two-sample Kolmogorov-Smirnov test two-sided ecto vs meso **** ## 3 Asymptotic two-sample Kolmogorov-Smirnov test two-sided ecto vs meso **** ## 4 Asymptotic two-sample Kolmogorov-Smirnov test two-sided ecto vs meso **** ## 5 Asymptotic two-sample Kolmogorov-Smirnov test two-sided ecto vs meso **** ## 6 Asymptotic two-sample Kolmogorov-Smirnov test two-sided ecto vs meso **** df_diff %&gt;% group_by(tor, ord_grp) %&gt;% do({broom::tidy(ks.test(.$diff[.$germ_layer == &quot;endo&quot;], .$diff[.$germ_layer == &quot;meso&quot;]))}) %&gt;% mutate(type = &quot;endo vs meso&quot;) %&gt;% mutate(stars = case_when(p.value &lt;= 0.0001 ~ &quot;****&quot;, p.value &lt;= 0.001 ~ &quot;***&quot;, p.value &lt;= 0.01 ~ &quot;**&quot;, p.value &lt;= 0.05 ~ &quot;*&quot;)) ## # A tibble: 6 x 8 ## # groups: tor, ord_grp ## tor ord_grp statistic p.value ## 1 early S-start 0.4212963 0.00040083315 ## 2 early S-mid 0.3951311 0.00113293441 ## 3 early S-end 0.4107955 0.00044987569 ## 4 late S-start 0.3201567 0.01508288017 ## 5 late S-mid 0.2827715 0.04390086425 ## 6 late S-end 0.4809091 0.00001812592 ## method alternative type stars ## 1 Exact two-sample Kolmogorov-Smirnov test two-sided endo vs meso *** ## 2 Exact two-sample Kolmogorov-Smirnov test two-sided endo vs meso ** ## 3 Exact two-sample Kolmogorov-Smirnov test two-sided endo vs meso *** ## 4 Exact two-sample Kolmogorov-Smirnov test two-sided endo vs meso * ## 5 Exact two-sample Kolmogorov-Smirnov test two-sided endo vs meso * ## 6 Exact two-sample Kolmogorov-Smirnov test two-sided endo vs meso **** df_diff %&gt;% group_by(tor, ord_grp) %&gt;% do({broom::tidy(ks.test(.$diff[.$germ_layer == &quot;ecto&quot;], .$diff[.$germ_layer == &quot;endo&quot;]))}) %&gt;% mutate(type = &quot;ecto vs endo&quot;) %&gt;% mutate(stars = case_when(p.value &lt;= 0.0001 ~ &quot;****&quot;, p.value &lt;= 0.001 ~ &quot;***&quot;, p.value &lt;= 0.01 ~ &quot;**&quot;, p.value &lt;= 0.05 ~ &quot;*&quot;)) ## # A tibble: 6 x 8 ## # groups: tor, ord_grp ## tor ord_grp statistic p.value method ## 1 early S-start 0.10732323 0.94277838 Exact two-sample Kolmogorov-Smirnov test ## 2 early S-mid 0.08856784 0.98966542 Exact two-sample Kolmogorov-Smirnov test ## 3 early S-end 0.16767677 0.50363651 Exact two-sample Kolmogorov-Smirnov test ## 4 late S-start 0.17171717 0.49845073 Exact two-sample Kolmogorov-Smirnov test ## 5 late S-mid 0.13086265 0.80670065 Exact two-sample Kolmogorov-Smirnov test ## 6 late S-end 0.29272727 0.03484286 Exact two-sample Kolmogorov-Smirnov test ## alternative type stars ## 1 two-sided ecto vs endo &lt;NA&gt; ## 2 two-sided ecto vs endo &lt;NA&gt; ## 3 two-sided ecto vs endo &lt;NA&gt; ## 4 two-sided ecto vs endo &lt;NA&gt; ## 5 two-sided ecto vs endo &lt;NA&gt; ## 6 two-sided ecto vs endo * 7.3 Plot EBs cell cycle df_ord_ebs &lt;- df_ord_ebs %&gt;% filter(day %in% c(&quot;d5&quot;, &quot;d6&quot;)) 7.3.1 Figure 6D,E options(repr.plot.width = 10, repr.plot.height = 7) p_el_ebs_circle_wt &lt;- df_ord_ebs %&gt;% filter(line == &quot;wt&quot;) %&gt;% plot_cc_circle(point_size=0.4) + facet_grid(type~.) + scale_x_continuous(breaks=c(-0.1, 0.15)) + coord_cartesian(ylim = c(-0.15, 1.9), xlim=c(-0.12, 0.14)) p_el_ebs_circle_ko &lt;- df_ord_ebs %&gt;% filter(line != &quot;wt&quot;) %&gt;% plot_cc_circle(point_size=0.4) + facet_grid(type~.) + scale_x_continuous(breaks=c(-0.1, 0.15)) + coord_cartesian(ylim = c(-0.15, 1.9), xlim=c(-0.12, 0.14)) p_el_ebs_circle_wt + theme_bw() + theme(aspect.ratio=1) p_el_ebs_circle_ko + theme_bw() + theme(aspect.ratio=1) options(repr.plot.width = 10, repr.plot.height = 7) dff &lt;- df_ord_ebs %&gt;% filter(line == &quot;wt&quot;) p_el_ebs_wt &lt;- map(c(&quot;d6&quot;, &quot;d5&quot;), ~ dff %&gt;% filter(day == .x) %&gt;% plot_cc_early_late_meth(point_size=0.1, add_trend_lines = TRUE, y_lim = c(0.7, 1), plot_phase_lines = FALSE, trend_ylim = c(0,1.2))) p_el_ebs_wt ## [[1]] ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 39 rows containing non-finite values (stat_smooth). ## Warning: Removed 39 rows containing missing values (geom_point). ## `geom_smooth()` using formula &#39;y ~ x&#39; ## ## [[2]] ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 12 rows containing non-finite values (stat_smooth). ## Warning: Removed 12 rows containing missing values (geom_point). ## `geom_smooth()` using formula &#39;y ~ x&#39; options(repr.plot.width = 10, repr.plot.height = 7) dff &lt;- df_ord_ebs %&gt;% filter(line != &quot;wt&quot;) p_el_ebs_ko &lt;- map(c(&quot;ko3a&quot;, &quot;ko3b&quot;), ~ dff %&gt;% filter(line == .x) %&gt;% plot_cc_early_late_meth(point_size=0.1, add_trend_lines = TRUE, y_lim = c(0.7, 1), plot_phase_lines = FALSE, trend_ylim = c(0,1.2))) p_el_ebs_ko[[1]] ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 9 rows containing non-finite values (stat_smooth). ## Warning: Removed 9 rows containing missing values (geom_point). ## `geom_smooth()` using formula &#39;y ~ x&#39; 7.3.1.1 Explanation ab_score = mA - mB = mA(ko) - mB(ko) = B - A a_score = mA - mWT = mA(ko) - mWT = B - (A + B) = -A b_score = mB - mWT = mB(ko) - mWT = A - (A + B) = -B (m prefix indicates methylation. Without prefix - activity.) Therefore: Low ab_score =&gt; A &gt; B, high ab_score =&gt; B &gt; A Low a_score =&gt; high activity of A Low b_score =&gt; high activity of B We will show: Methylation of wt stratified by the activity of A and B (ab_score) Methylation of 3A-/- stratified by the activity of B (b_score) Methylation of 3B-/- stratified by the activity of A (a_score) line_colors &lt;- c(&quot;wt&quot; = &quot;darkblue&quot;, &quot;ko3a&quot; = &quot;purple&quot;, &quot;ko3b&quot; = &quot;orange&quot;) df_ebs &lt;- df_ord_ab_score_ebs %&gt;% filter(day == &quot;d5&quot;, cg_cont == &#39;(0,0.02]&#39;) %&gt;% distinct(cell_id, ord2, early_late_cov, day, line) df_ebs_wt &lt;- tor_ab_meth %&gt;% inner_join(df_ebs) %&gt;% filter(line == &quot;wt&quot;) %&gt;% do({calc_cc_early_late_ab_diff(., low = &quot;(-1.46,-0.734]&quot;, high = &quot;(0.281,1.63]&quot;)}) ## Joining, by = &quot;cell_id&quot; # methylation of 3B-/- stratified by activity of A (a_score) df_ebs_ko3b &lt;- tor_a_meth %&gt;% inner_join(df_ebs) %&gt;% filter(line == &quot;ko3b&quot;) %&gt;% rename(ab_score = a_score) %&gt;% do({calc_cc_early_late_ab_diff(., low = &quot;(-1.21,-0.638]&quot;, high = &quot;(0.125,0.678]&quot;)}) ## Joining, by = &quot;cell_id&quot; # methylation of 3A-/- stratified by activity of B (b_score) df_ebs_ko3a &lt;- tor_b_meth %&gt;% inner_join(df_ebs) %&gt;% filter(line == &quot;ko3a&quot;) %&gt;% rename(ab_score = b_score) %&gt;% do({calc_cc_early_late_ab_diff(., low = &quot;(-1,-0.17]&quot;, high = &quot;(0.123,0.396]&quot;)}) ## Joining, by = &quot;cell_id&quot; df_ebs &lt;- bind_rows( df_ebs_wt, df_ebs_ko3a, df_ebs_ko3b ) df_ebs &lt;- df_ebs %&gt;% pivot_longer(names_sep=&quot;_&quot;, names_prefix=&quot;avg_&quot;, cols=starts_with(&quot;avg&quot;), names_to=c(&quot;tor&quot;, &quot;ab_score&quot;, &quot;dummy&quot;), values_to=&quot;avg&quot;) %&gt;% mutate(ab_score = forcats::fct_recode(factor(ab_score), &quot;Favoring&quot; = &quot;l&quot;, &quot;Opposing&quot; = &quot;h&quot;)) %&gt;% mutate(line = factor(line, levels = c(&quot;wt&quot;, &quot;ko3b&quot;, &quot;ko3a&quot;))) %&gt;% filter(!is.na(line)) %&gt;% filter(cg_cont == &quot;(0,0.02]&quot;) df_ebs &lt;- df_ebs %&gt;% group_by(line, tor, ab_score) %&gt;% mutate(trend = loess(avg~ord2, span=0.2)$fitted) %&gt;% group_by(line, tor, ab_score) %&gt;% mutate(max_ab = max(trend[ord2 &lt;= 2 &amp; ord2 &gt;= 1], na.rm=TRUE)) %&gt;% mutate(trend_norm = (trend - max_ab) / (max_ab / 2)) df_max_repli_ebs &lt;- df_ebs %&gt;% group_by(line, tor) %&gt;% filter(ord2 &lt;= 2, ord2 &gt;= 1) %&gt;% summarise(s = ord2[which.max(early_late_cov)]) df_max_repli_ebs ## # A tibble: 6 x 3 ## # groups: line ## line tor s ## 1 wt early 1.604009 ## 2 wt late 1.604009 ## 3 ko3b early 1.463781 ## 4 ko3b late 1.463781 ## 5 ko3a early 1.441504 ## 6 ko3a late 1.441504 7.3.2 Figure 6F,G, Extended Data Figure 9I p_ab_trend_ebs1 &lt;- df_ebs %&gt;% ggplot(aes(x=ord2, y=trend, color=ab_score)) + geom_line(size=0.5) + coord_cartesian(xlim=c(1,2), expand=0) + ggsci::scale_color_jama(name = &quot;CpGs&quot;) + geom_vline(aes(xintercept = s), data = df_max_repli_ebs, color = &quot;darkblue&quot;, linetype = &quot;dashed&quot;) + facet_grid(line~tor) + xlab(&quot;&quot;) + ylab(&quot;Methylation&quot;) + theme( axis.text.x = element_blank(), axis.ticks.x = element_blank() ) p_ab_trend_ebs_norm &lt;- df_ebs %&gt;% ggplot(aes(x=ord2, y=trend_norm, color=ab_score)) + geom_line(size=0.5) + coord_cartesian(xlim=c(1,2), expand=0) + ggsci::scale_color_jama(name = &quot;CpGs&quot;) + geom_vline(aes(xintercept = s), data = df_max_repli_ebs, color = &quot;darkblue&quot;, linetype = &quot;dashed&quot;) + facet_grid(line~tor) + xlab(&quot;&quot;) + ylab(&quot;Normalized methylation trend&quot;) + theme( axis.text.x = element_blank(), axis.ticks.x = element_blank() ) options(repr.plot.width = 14, repr.plot.height = 8) p_ab_trend_ebs1 + p_ab_trend_ebs_norm Using the ab-score line_colors &lt;- c(&quot;wt&quot; = &quot;darkblue&quot;, &quot;ko3a&quot; = &quot;purple&quot;, &quot;ko3b&quot; = &quot;orange&quot;) df_ebs &lt;- df_ord_ab_score_ebs %&gt;% filter(day == &quot;d5&quot;, cg_cont == &#39;(0,0.02]&#39;) %&gt;% group_by(line) %&gt;% do({calc_cc_early_late_ab_diff(., low = &quot;(-1.46,-0.734]&quot;, high = &quot;(0.281,1.63]&quot;)}) %&gt;% ungroup() %&gt;% mutate(line = factor(line, levels = names(line_colors))) %&gt;% filter(!is.na(line)) df_ebs &lt;- df_ebs %&gt;% pivot_longer(names_sep=&quot;_&quot;, names_prefix=&quot;avg_&quot;, cols=starts_with(&quot;avg&quot;), names_to=c(&quot;tor&quot;, &quot;ab_score&quot;, &quot;dummy&quot;), values_to=&quot;avg&quot;) %&gt;% mutate(ab_score = forcats::fct_recode(factor(ab_score), &quot;A-phil&quot; = &quot;l&quot;, &quot;B-phil&quot; = &quot;h&quot;)) %&gt;% mutate(line = factor(line, levels = names(line_colors))) %&gt;% filter(!is.na(line)) %&gt;% filter(cg_cont == &quot;(0,0.02]&quot;) df_max_repli_ebs &lt;- df_ebs %&gt;% group_by(line, tor) %&gt;% filter(ord2 &lt;= 2, ord2 &gt;= 1) %&gt;% summarise(s = ord2[which.max(early_late_cov)]) df_max_repli_ebs ## # A tibble: 6 x 3 ## # groups: line ## line tor s ## 1 wt early 1.604009 ## 2 wt late 1.604009 ## 3 ko3a early 1.441504 ## 4 ko3a late 1.441504 ## 5 ko3b early 1.463781 ## 6 ko3b late 1.463781 7.3.3 Figure 6D p_ab_trend_ebs &lt;- df_ebs %&gt;% ggplot(aes(x=ord2, y=avg, color=ab_score)) + geom_smooth(method=&quot;loess&quot;, span=0.2, se=FALSE, size=0.5) + coord_cartesian(xlim=c(1,2), expand=0) + ggsci::scale_color_lancet(name = &quot;CpGs&quot;) + geom_vline(aes(xintercept = s), data = df_max_repli_ebs, color = &quot;darkblue&quot;, linetype = &quot;dashed&quot;) + facet_grid(line~tor) + xlab(&quot;&quot;) + ylab(&quot;Methylation&quot;) + theme( axis.text.x = element_blank(), axis.ticks.x = element_blank() ) p_ab_trend_ebs ## `geom_smooth()` using formula &#39;y ~ x&#39; options(repr.plot.width = 5, repr.plot.height = 5) line_colors &lt;- c(&quot;wt&quot; = &quot;darkblue&quot;, &quot;ko3a&quot; = &quot;purple&quot;, &quot;ko3b&quot; = &quot;orange&quot;) df_diff &lt;- df_ebs %&gt;% distinct(cell_id, cg_cont, day, line, ord2, tor, ab_score, avg) %&gt;% spread(ab_score, avg) %&gt;% mutate(diff = `B-phil` - `A-phil`) %&gt;% filter(ord2 &gt;= 1, ord2 &lt;= 2) p_diff &lt;- df_diff %&gt;% mutate(line = factor(line, levels = names(line_colors))) %&gt;% unite(&quot;type&quot;, line, tor, sep=&quot; &quot;, remove=FALSE) %&gt;% group_by(type) %&gt;% mutate(mean_diff = mean(diff)) %&gt;% ungroup() %&gt;% mutate(type = gsub(&quot;ko3a&quot;, &quot;3a-/-&quot;, type), type = gsub(&quot;ko3b&quot;, &quot;3b-/-&quot;, type) ) %&gt;% mutate(type = forcats::fct_reorder(type, -mean_diff)) %&gt;% ggplot(aes(x=type, y=diff, fill=line)) + geom_boxplot(outlier.shape=NA) + scale_fill_manual(name=&quot;&quot;, values=line_colors) + ylab(&quot;B-phil - A-phil&quot;) + xlab(&quot;&quot;) + ggforce::geom_sina(size=0.01, alpha=0.05) + vertical_labs() p_diff 7.4 Plot other EB batches df_cell_cycle_eb_other &lt;- df_cell_cycle_annot %&gt;% filter(line != &quot;mouse&quot;, day %in% c(&quot;d5&quot;, &quot;d6&quot;), (experiment %in% paste0(&quot;experiment&quot;, c(5,6,8))), avg_early &gt;= 0.7, avg_late &gt;= 0.7) %&gt;% select(cell_id, day, line, sort, experiment, avg_late, avg_early, early, late, early_late_cov, early_late_diff = meth_late_early_diff) l_ebs_other &lt;- df_cell_cycle_eb_other %&gt;% add_count(day, line) %&gt;% filter(n &gt;= 50) %&gt;% as.data.frame() %&gt;% plyr::dlply(c(&quot;day&quot;, &quot;line&quot;), function(x) calc_cell_cycle_ord(as_tibble(x))) ## Joining, by = &quot;cell_id&quot; ## Joining, by = &quot;cell_id&quot; ## Joining, by = &quot;cell_id&quot; ## Joining, by = &quot;cell_id&quot; ## Joining, by = &quot;cell_id&quot; ## Joining, by = &quot;cell_id&quot; df_ord_ebs_other &lt;- l_ebs_other %&gt;% map_dfr(~ .$df) %&gt;% as_tibble() %&gt;% unite(&quot;type&quot;, day:line, remove=FALSE) %&gt;% group_by(day, line) %&gt;% arrange(day, line, desc(early_late_cov) ) %&gt;% mutate( new_ord = ord - ord[1] + 1, new_ord = ifelse(new_ord &gt;= 0, new_ord, max(new_ord) + abs(min(new_ord)) - abs(new_ord)), ord1 = new_ord / max(new_ord) ) %&gt;% mutate( trend = zoo::rollmean(early_late_cov[order(ord1)], 20, na.pad = TRUE), i_mid = zoo::rollmean(ord1[order(ord1)],20)[which.min(trend)], ord2 = i_mid - ord1, ord2 = ord2 - floor(ord2) ) %&gt;% mutate(type = factor(type, levels = c(&quot;d6_wt&quot;, &quot;d5_wt&quot;, &quot;d5_ko3a&quot;, &quot;d5_ko3b&quot;, &quot;d6_ko3a&quot;, &quot;d6_ko3b&quot;))) %fcache_df% here(&quot;output/cell_cycle/ebs_other.tsv&quot;) df_ord_cgc_ebs_other &lt;- tor_cgc_meth %&gt;% inner_join(df_ord_ebs_other %&gt;% select(cell_id, day, line, type, ord2, early_late_cov)) ## Joining, by = &quot;cell_id&quot; df_ord_ab_score_ebs_other &lt;- tor_ab_meth %&gt;% inner_join(df_ord_ebs_other %&gt;% select(cell_id, day, line, type, ord2, early_late_cov)) ## Joining, by = &quot;cell_id&quot; df_ord_ebs_other &lt;- df_ord_ebs_other %&gt;% filter(day == &quot;d5&quot;) 7.4.1 Extended Data Figure 9H options(repr.plot.width = 10, repr.plot.height = 7) p_el_ebs_circle_wt_other &lt;- df_ord_ebs_other %&gt;% filter(line == &quot;wt&quot;) %&gt;% plot_cc_circle(point_size=0.4) + facet_grid(type~.) + scale_x_continuous(breaks=c(-0.1, 0.15)) + coord_cartesian(ylim = c(-0.15, 1.9), xlim=c(-0.12, 0.14)) p_el_ebs_circle_ko_other &lt;- df_ord_ebs_other %&gt;% filter(line != &quot;wt&quot;) %&gt;% plot_cc_circle(point_size=0.4) + facet_grid(type~.) + scale_x_continuous(breaks=c(-0.1, 0.15)) + coord_cartesian(ylim = c(-0.15, 1.9), xlim=c(-0.12, 0.14)) p_el_ebs_circle_wt_other + theme_bw() + theme(aspect.ratio=1) p_el_ebs_circle_ko_other + theme_bw() + theme(aspect.ratio=1) "],["differential-methylation-in-eb-day-6.html", "8 Differential methylation in EB day 6 8.1 initialize definitions 8.2 Extract data 8.3 Plot global differences 8.4 Extract DNMT3A targets 8.5 Plot distribution of AB score on the differential regions 8.6 Plot examples 8.7 Test regions enrichment vs gene expression", " 8 Differential methylation in EB day 6 8.1 initialize definitions suppressMessages(suppressWarnings(source(here::here(&quot;code/init.R&quot;)))) 8.2 Extract data df &lt;- { df_wt &lt;- tracks_key %&gt;% filter(day == &quot;d6&quot;) %&gt;% filter(line == &quot;wt&quot;) df_ko3a &lt;- tracks_key %&gt;% filter(day == &quot;d6&quot;) %&gt;% filter(line == &quot;ko3a&quot;) df_ko3b &lt;- tracks_key %&gt;% filter(day == &quot;d6&quot;) %&gt;% filter(line == &quot;ko3b&quot;) df_ab_bulk &lt;- extract_meth_annot(c( df_wt$track_name, df_ko3a$track_name, df_ko3b$track_name, &quot;Zhang_Nature_Genetics_2017.Ect_mCG&quot;, &quot;Zhang_Nature_Genetics_2017.Mes_mCG&quot;, &quot;Zhang_Nature_Genetics_2017.End_mCG&quot;), names = c(df_wt$name, df_ko3a$name, df_ko3b$name, &quot;ecto&quot;, &quot;meso&quot;, &quot;endo&quot;), d_expand = 250, extract_meth_calls = TRUE) df &lt;- df_ab_bulk %&gt;% select(chrom, start, end, d_exon:gc_cont, ecto, ecto.cov, meso, meso.cov, endo, endo.cov) df$wt.meth &lt;- rowSums(df_ab_bulk[, paste0(df_wt$name, &quot;.meth&quot;)], na.rm=TRUE) df$wt.cov &lt;- rowSums(df_ab_bulk[, paste0(df_wt$name, &quot;.cov&quot;)], na.rm=TRUE) df$ko3a.meth &lt;- rowSums(df_ab_bulk[, paste0(df_ko3a$name, &quot;.meth&quot;)], na.rm=TRUE) df$ko3a.cov &lt;- rowSums(df_ab_bulk[, paste0(df_ko3a$name, &quot;.cov&quot;)], na.rm=TRUE) df$ko3b.meth &lt;- rowSums(df_ab_bulk[, paste0(df_ko3b$name, &quot;.meth&quot;)], na.rm=TRUE) df$ko3b.cov &lt;- rowSums(df_ab_bulk[, paste0(df_ko3b$name, &quot;.cov&quot;)], na.rm=TRUE) df$ko3a &lt;- df$ko3a.meth / df$ko3a.cov df$wt &lt;- df$wt.meth / df$wt.cov df$ko3b &lt;- df$ko3b.meth / df$ko3b.cov df } %cache_df% here(&quot;output/ab_diff_d6_bulk.tsv&quot;) %&gt;% as_tibble() We take only regions that are well covered and add a diff column with 3a(-/-) - 3b(-/-) min_cov &lt;- 50 df_diff &lt;- { df_diff &lt;- df %&gt;% filter(ko3a.cov &gt;= min_cov, ko3b.cov &gt;= min_cov, wt.cov &gt;= min_cov) %&gt;% mutate(diff = ko3a - ko3b) df_diff &lt;- df_diff %&gt;% gintervals.neighbors1(&quot;intervs.global.tss&quot;) %&gt;% select(chrom:diff, geneSymbol, dist) df_diff } %cache_df% here(&quot;output/ab_diff_d6_bulk_diff.tsv&quot;) %&gt;% as_tibble() dim(df_diff) ## [1] 9130435 29 8.3 Plot global differences sqrt(min_cov)/min_cov ## [1] 0.1414214 8.3.1 Figure 7D options(repr.plot.width = 7, repr.plot.height = 7) shades &lt;- colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )) smoothScatter(df_diff$ko3a, df_diff$ko3b, colramp = shades, xlab = &quot;3A (-/-)&quot;, ylab = &quot;3B (-/-)&quot;) abline(a = 0.25, b = 1, lty = 3, lwd = 3, col=&quot;red&quot;) abline(a = -0.25, b = 1, lty = 3, lwd = 3, col=&quot;red&quot;) title(glue(&quot;{scales::comma(nrow(df_diff))} CpGs&quot;)) Focusing only on promoters: df_diff_prom &lt;- df_diff %&gt;% gintervals.neighbors1(get_promoters()) %&gt;% filter(dist1 == 0) %&gt;% select(-(chrom1:dist1)) %cache_df% here(&quot;output/ab_diff_d6_bulk_diff_promoters.tsv&quot;) %&gt;% as_tibble() options(repr.plot.width = 7, repr.plot.height = 7) shades &lt;- colorRampPalette(c(&quot;white&quot;,&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;yellow&quot;, &quot;gold&quot;,&quot;orange&quot;,&quot;red&quot;, &quot;darkred&quot; )) smoothScatter(df_diff_prom$ko3a, df_diff_prom$ko3b, colramp = shades, xlab = &quot;3A (-/-)&quot;, ylab = &quot;3B (-/-)&quot;) abline(a = 0.25, b = 1, lty = 3, lwd = 3, col=&quot;red&quot;) abline(a = -0.25, b = 1, lty = 3, lwd = 3, col=&quot;red&quot;) title(glue(&quot;{scales::comma(nrow(df_diff_prom))} promoters&quot;)) df_diff_prom %&gt;% filter(diff &lt;= -0.3) %&gt;% nrow() ## [1] 169 8.4 Extract DNMT3A targets We extract regions with differences that are below -0.3 (places where 3a(-/-) - 3b(-/-) &lt;= -0.3 (upper left part of the scatter). These are places where 3a(-/-) is less methylated, i.e.Â putative targets of DNMT3A. regs &lt;- df_diff %&gt;% filter(diff &lt;= -0.3) %&gt;% mutate(start = start - 250, end = end + 250) %&gt;% gintervals.canonic() %&gt;% gextract(c(&quot;d_exon&quot;, &quot;d_tss&quot;, &quot;tor&quot;, &quot;ab_score&quot;, &quot;cg_cont&quot;, &quot;gc_cont&quot;), intervals=., iterator=.) %&gt;% gintervals.neighbors1(&quot;intervs.global.tss&quot;) %&gt;% select(chrom:gc_cont, geneSymbol, dist) %cache_df% here(&quot;output/ab_eb_d6_ko3b_hyper.tsv&quot;) %&gt;% as_tibble() dim(regs) ## [1] 1525 11 regs %&gt;% ggplot(aes(x=end - start)) + geom_density() + scale_x_log10() sup_table &lt;- { df_wt &lt;- tracks_key %&gt;% filter(day == &quot;d6&quot;) %&gt;% filter(line == &quot;wt&quot;) df_ko3a &lt;- tracks_key %&gt;% filter(day == &quot;d6&quot;) %&gt;% filter(line == &quot;ko3a&quot;) df_ko3b &lt;- tracks_key %&gt;% filter(day == &quot;d6&quot;) %&gt;% filter(line == &quot;ko3b&quot;) df_ab_bulk &lt;- extract_meth_annot(c( df_wt$track_name, df_ko3a$track_name, df_ko3b$track_name, &quot;Zhang_Nature_Genetics_2017.Ect_mCG&quot;, &quot;Zhang_Nature_Genetics_2017.Mes_mCG&quot;, &quot;Zhang_Nature_Genetics_2017.End_mCG&quot;), names = c(df_wt$name, df_ko3a$name, df_ko3b$name, &quot;ecto&quot;, &quot;meso&quot;, &quot;endo&quot;), d_expand = 250, extract_meth_calls = TRUE, intervals = regs, iterator=regs) df &lt;- df_ab_bulk %&gt;% select(chrom, start, end, d_exon:gc_cont, ecto, ecto.cov, meso, meso.cov, endo, endo.cov) df$wt.meth &lt;- rowSums(df_ab_bulk[, paste0(df_wt$name, &quot;.meth&quot;)], na.rm=TRUE) df$wt.cov &lt;- rowSums(df_ab_bulk[, paste0(df_wt$name, &quot;.cov&quot;)], na.rm=TRUE) df$ko3a.meth &lt;- rowSums(df_ab_bulk[, paste0(df_ko3a$name, &quot;.meth&quot;)], na.rm=TRUE) df$ko3a.cov &lt;- rowSums(df_ab_bulk[, paste0(df_ko3a$name, &quot;.cov&quot;)], na.rm=TRUE) df$ko3b.meth &lt;- rowSums(df_ab_bulk[, paste0(df_ko3b$name, &quot;.meth&quot;)], na.rm=TRUE) df$ko3b.cov &lt;- rowSums(df_ab_bulk[, paste0(df_ko3b$name, &quot;.cov&quot;)], na.rm=TRUE) df$ko3a &lt;- df$ko3a.meth / df$ko3a.cov df$wt &lt;- df$wt.meth / df$wt.cov df$ko3b &lt;- df$ko3b.meth / df$ko3b.cov df } head(sup_table) ## # A tibble: 6 x 26 ## chrom start end d_exon d_tss tor ab_score a_score ## 1 chr1 12856026 12856579 328 23572 1.3366647 -0.4332772 -0.4043494 ## 2 chr1 13117554 13118055 -560 -560 0.6330189 -0.4057871 -0.3534880 ## 3 chr1 13524846 13525376 29671 54833 0.8855244 -0.5009643 -0.4720550 ## 4 chr1 14495784 14496427 -195825 -195825 -0.8437675 -0.4262571 -0.3651721 ## 5 chr1 14497465 14498563 -197734 -197734 -0.8437675 -0.4453787 -0.3654922 ## 6 chr1 14907781 14908427 701 838 -0.9435036 -0.3355332 -0.2938322 ## b_score cg_cont gc_cont ecto ecto.cov meso meso.cov ## 1 0.04263026 0.01212121 0.4500000 0.52976190 168 0.34482759 145 ## 2 0.04959648 0.02231405 0.4995041 0.14791667 480 0.11333333 300 ## 3 0.06331065 0.02303030 0.4686364 0.81167109 377 0.82283465 254 ## 4 0.05616216 0.02012987 0.4293507 0.02386635 419 0.01745636 401 ## 5 0.06639115 0.01604743 0.4779448 0.01891892 370 0.03412969 293 ## 6 0.05721129 0.01545454 0.4189610 0.25698324 179 0.36666667 150 ## endo endo.cov wt.meth wt.cov ko3a.meth ko3a.cov ko3b.meth ko3b.cov ## 1 0.2699387 163 355 450 69 130 72 98 ## 2 0.3497110 346 474 1109 82 288 123 304 ## 3 0.5284810 316 702 791 188 246 201 214 ## 4 0.1633238 349 308 888 61 298 114 320 ## 5 0.2029703 404 745 1089 108 282 221 359 ## 6 0.4080000 125 343 440 76 138 83 113 ## ko3a wt ko3b ## 1 0.5307692 0.7888889 0.7346939 ## 2 0.2847222 0.4274121 0.4046053 ## 3 0.7642276 0.8874842 0.9392523 ## 4 0.2046980 0.3468468 0.3562500 ## 5 0.3829787 0.6841139 0.6155989 ## 6 0.5507246 0.7795455 0.7345133 sup_table %&gt;% select(chrom:end, ko3a, ko3a.cov, ko3b, ko3b.cov, wt, wt.cov, ab_score, `CG content`=cg_cont, `GC content`=gc_cont) %&gt;% inner_join(regs %&gt;% select(chrom:end, geneSymbol, `distance to gene`=dist)) %&gt;% writexl::write_xlsx(path = here(&quot;output/S3 - DNMT3A DMRs.xlsx&quot;)) ## Joining, by = c(&quot;chrom&quot;, &quot;start&quot;, &quot;end&quot;) 8.5 Plot distribution of AB score on the differential regions all_intervs &lt;- df_diff %&gt;% mutate(start = start - 250, end = end + 250) %&gt;% select(chrom, start, end) %&gt;% as.data.frame() %&gt;% gintervals.force_range() %&gt;% gintervals.canonic() %&gt;% gextract(c(&quot;d_exon&quot;, &quot;d_tss&quot;, &quot;tor&quot;, &quot;ab_score&quot;, &quot;cg_cont&quot;, &quot;gc_cont&quot;), intervals=., iterator=.) ## 40%...77%...100% 8.5.1 Figure 7E p_ab_score_regs &lt;- bind_rows(all_intervs %&gt;% mutate(type = &#39;Bg.&#39;), regs %&gt;% mutate(type = &#39;Diff&#39;)) %&gt;% ggplot(aes(x=ab_score, color=type)) + geom_density() + scale_color_manual(name = &#39;&#39;, values = c(&quot;Bg.&quot; = &quot;gray&quot;, &quot;Diff&quot; = &quot;red&quot;)) p_ab_score_regs + theme_bw() all_intervs_prom &lt;- df_diff_prom %&gt;% mutate(start = start - 250, end = end + 250) %&gt;% select(chrom, start, end) %&gt;% as.data.frame() %&gt;% gintervals.force_range() %&gt;% gintervals.canonic() %&gt;% gextract(c(&quot;d_exon&quot;, &quot;d_tss&quot;, &quot;tor&quot;, &quot;ab_score&quot;, &quot;cg_cont&quot;, &quot;gc_cont&quot;), intervals=., iterator=.) p_ab_score_regs_prom &lt;- df_diff_prom %&gt;% mutate(type = case_when(diff &lt;= -0.3 ~ &quot;3a&quot;, diff &gt;= 0.3 ~ &quot;3b&quot;, TRUE ~ &quot;Bg.&quot;)) %&gt;% ggplot(aes(x=ab_score, color=type)) + geom_density() + scale_color_manual(name = &#39;&#39;, values = c(&quot;Bg.&quot; = &quot;gray&quot;, &quot;3a&quot; = &quot;purple&quot;, &quot;3b&quot; = &quot;orange&quot;)) p_ab_score_regs_prom + theme_bw() 8.6 Plot examples 8.6.1 Figure 7G, Extended Data Figure 10 example_genes &lt;- c(&quot;Msx1&quot;, &quot;Cyp26a1&quot;, &quot;Foxa2&quot;, &quot;Krt18&quot;, &quot;Sox2&quot;, &quot;Sp5&quot;, &quot;Zfpm1&quot;) plot_example &lt;- function(gene, ...){ print(gene) x &lt;- regs %&gt;% filter(geneSymbol == gene) %&gt;% slice(1) genome_res &lt;- max(1e4, abs(x$d_tss) + 0.2 * abs(x$d_tss)) plot_res &lt;- 1e3 d_expand &lt;- 250 med_ab_score = gquantiles(&quot;DNMT.ab_score&quot;) p &lt;- plot_ab_diff_cis_example(x, c(&quot;mEBDNMT.comb.d6_wt&quot;, &quot;mEBDNMT.comb.d6_ko3a&quot;, &quot;mEBDNMT.comb.d6_ko3b&quot;), names = c(&quot;wt&quot;, &quot;ko3a&quot;, &quot;ko3b&quot;), colors = c(&quot;wt&quot; = &quot;black&quot;, &quot;ko3a&quot; = &quot;purple&quot;, &quot;ko3b&quot; = &quot;orange&quot;), trend_track = &quot;mEBDNMT.comb.d6_wt&quot;, trend_res = 500, genome_res = genome_res, plot_res = plot_res, d_expand = d_expand, add_legend = FALSE, med_ab_score= med_ab_score) print(p) } walk(example_genes, plot_example) ## [1] &quot;Msx1&quot; ## Warning: Removed 1 row(s) containing missing values (geom_path). ## Warning: Removed 1 rows containing missing values (geom_rect). ## Warning: Removed 14 rows containing missing values (geom_point). ## [1] &quot;Cyp26a1&quot; ## Warning: Removed 75 rows containing missing values (geom_point). ## [1] &quot;Foxa2&quot; ## Warning: Removed 1 row(s) containing missing values (geom_path). ## Warning: Removed 29 rows containing missing values (geom_point). ## [1] &quot;Krt18&quot; ## Warning: Removed 1 row(s) containing missing values (geom_path). ## Warning: Removed 9 rows containing missing values (geom_point). ## [1] &quot;Sox2&quot; ## Warning: Removed 1 row(s) containing missing values (geom_path). ## Warning: Removed 1 rows containing missing values (geom_rect). ## Warning: Removed 68 rows containing missing values (geom_point). ## [1] &quot;Sp5&quot; ## Warning: Removed 1 row(s) containing missing values (geom_path). ## Warning: Removed 15 rows containing missing values (geom_point). ## [1] &quot;Zfpm1&quot; ## Warning: Removed 1 row(s) containing missing values (geom_path). ## Warning: Removed 7 rows containing missing values (geom_point). example_cands &lt;- c( &quot;T&quot;, &quot;Eomes&quot;, &quot;Gsc&quot;, &quot;Pou3f1&quot;, &quot;Pou5f1&quot;, &quot;Sall4&quot;, &quot;Lyl1&quot;) more_examples &lt;- example_cands[example_cands %in% regs$geneSymbol] more_examples ## [1] &quot;Eomes&quot; &quot;Gsc&quot; &quot;Pou3f1&quot; &quot;Pou5f1&quot; &quot;Sall4&quot; &quot;Lyl1&quot; walk(more_examples, plot_example) ## [1] &quot;Eomes&quot; ## Warning: Removed 1 row(s) containing missing values (geom_path). ## Warning: Removed 8 rows containing missing values (geom_point). ## [1] &quot;Gsc&quot; ## Warning: Removed 2 row(s) containing missing values (geom_path). ## Warning: Removed 20 rows containing missing values (geom_point). ## [1] &quot;Pou3f1&quot; ## Warning: Removed 1 row(s) containing missing values (geom_path). ## Warning: Removed 29 rows containing missing values (geom_point). ## [1] &quot;Pou5f1&quot; ## Warning: Removed 2 row(s) containing missing values (geom_path). ## Warning: Removed 1 rows containing missing values (geom_rect). ## Warning: Removed 5 rows containing missing values (geom_point). ## [1] &quot;Sall4&quot; ## Warning: Removed 1 row(s) containing missing values (geom_path). ## Warning: Removed 28 rows containing missing values (geom_point). ## [1] &quot;Lyl1&quot; ## Warning: Removed 9 rows containing missing values (geom_point). 8.7 Test regions enrichment vs gene expression germ_genes &lt;- fread_rownames(here(&quot;data/germ_genes.txt&quot;), row.var = &quot;geneSymbol&quot;) %&gt;% arrange(desc(x) ) %&gt;% slice(1:250) %&gt;% as_tibble() nrow(germ_genes) ## [1] 250 germ_genes &lt;- germ_genes %&gt;% separate_rows(geneSymbol, sep=&quot;;&quot;) %&gt;% left_join(gintervals.load(&quot;intervs.global.tss&quot;)) %&gt;% select(chrom, start, end, strand, geneSymbol, x) %&gt;% as_tibble() %&gt;% filter(!is.na(chrom)) %&gt;% distinct(geneSymbol, .keep_all=TRUE) ## Joining, by = &quot;geneSymbol&quot; nrow(germ_genes) ## [1] 267 gastru_genes &lt;- fread_rownames(here(&quot;data/gastru_genes.txt&quot;), row.var = &quot;geneSymbol&quot;) %&gt;% as_tibble() nrow(gastru_genes) ## [1] 1743 gastru_genes &lt;- gastru_genes %&gt;% separate_rows(geneSymbol, sep=&quot;;&quot;) %&gt;% left_join(gintervals.load(&quot;intervs.global.tss&quot;)) %&gt;% select(chrom, start, end, strand, geneSymbol, x) %&gt;% as_tibble() %&gt;% filter(!is.na(chrom)) %&gt;% distinct(geneSymbol, .keep_all=TRUE) ## Joining, by = &quot;geneSymbol&quot; nrow(gastru_genes) ## [1] 1878 diff = ko3a - ko3b. diff &gt; 0 =&gt; hypo in ko3b =&gt; places that 3b methylates. diff &lt; 0 =&gt; hypo in ko3a =&gt; places that 3a methylates. diff_thresh &lt;- 0.3 regs_3a_intervs &lt;- df_diff %&gt;% filter(diff &gt;= diff_thresh) %&gt;% mutate(start = start - 250, end = end + 250) %&gt;% as.data.frame() %&gt;% gintervals.canonic() %&gt;% mutate(type = &quot;3b&quot;) regs_3b_intervs &lt;- df_diff %&gt;% filter(diff &lt;= -diff_thresh) %&gt;% mutate(start = start - 250, end = end + 250) %&gt;% as.data.frame() %&gt;% gintervals.canonic() %&gt;% mutate(type = &quot;3a&quot;) regs_no_diff_intervs &lt;- df_diff %&gt;% filter(abs(diff) &lt; diff_thresh) %&gt;% mutate(start = start - 250, end = end + 250) %&gt;% as.data.frame() %&gt;% gintervals.force_range() %&gt;% gintervals.canonic() %&gt;% mutate(type = &quot;bg&quot;) ## 22%...54%...81%...100% df_germ &lt;- bind_rows(regs_3a_intervs, regs_3b_intervs, regs_no_diff_intervs) %&gt;% select(chrom, start, end, type) %&gt;% gintervals.neighbors1(germ_genes) df_gastru &lt;- bind_rows(regs_3a_intervs, regs_3b_intervs, regs_no_diff_intervs) %&gt;% select(chrom, start, end, type) %&gt;% gintervals.neighbors1(germ_genes) df_germ %&gt;% count(type) ## # A tibble: 3 x 2 ## type n ## 1 3a 1526 ## 2 3b 14409 ## 3 bg 519257 8.7.1 Figure 7F p &lt;- df_germ %&gt;% ggplot(aes(x=abs(dist), color=type)) + stat_ecdf(size=0.5) + scale_color_manual(name = &quot;&quot;, values = c(&quot;bg&quot; = &quot;darkblue&quot;, &quot;3a&quot; = &quot;purple&quot;, &quot;3b&quot; = &quot;orange&quot;)) + xlab(&quot;Distance to gene (bp)&quot;) + scale_x_log10(labels = c(&quot;0&quot;, &quot;1k&quot;, &quot;10k&quot;, &quot;100k&quot;, &quot;1M&quot;), breaks = c(0, 1e3, 1e4, 1e5, 1e6)) + coord_cartesian(xlim = c(1e3,1e6), ylim=c(0,0.3)) + ylab(&quot;Fraction of regions\\nwith distance &lt; x&quot;) p + theme_bw() ## Warning: Transformation introduced infinite values in continuous x-axis ## Warning: Removed 335 rows containing non-finite values (stat_ecdf). ks.test(abs(df_germ$dist[df_germ$type == &quot;3a&quot;]), abs(df_germ$dist[df_germ$type == &quot;3b&quot;])) ## Warning in ks.test.default(abs(df_germ$dist[df_germ$type == &quot;3a&quot;]), ## abs(df_germ$dist[df_germ$type == : p-value will be approximate in the presence ## of ties ## ## Asymptotic two-sample Kolmogorov-Smirnov test ## ## data: abs(df_germ$dist[df_germ$type == &quot;3a&quot;]) and abs(df_germ$dist[df_germ$type == &quot;3b&quot;]) ## D = 0.052125, p-value = 0.001113 ## alternative hypothesis: two-sided ks.test(abs(df_germ$dist[df_germ$type == &quot;3b&quot;]), abs(df_germ$dist[df_germ$type == &quot;bg&quot;])) ## Warning in ks.test.default(abs(df_germ$dist[df_germ$type == &quot;3b&quot;]), ## abs(df_germ$dist[df_germ$type == : p-value will be approximate in the presence ## of ties ## ## Asymptotic two-sample Kolmogorov-Smirnov test ## ## data: abs(df_germ$dist[df_germ$type == &quot;3b&quot;]) and abs(df_germ$dist[df_germ$type == &quot;bg&quot;]) ## D = 0.062757, p-value &lt; 2.2e-16 ## alternative hypothesis: two-sided ks.test(abs(df_germ$dist[df_germ$type == &quot;3a&quot;]), abs(df_germ$dist[df_germ$type == &quot;bg&quot;])) ## Warning in ks.test.default(abs(df_germ$dist[df_germ$type == &quot;3a&quot;]), ## abs(df_germ$dist[df_germ$type == : p-value will be approximate in the presence ## of ties ## ## Asymptotic two-sample Kolmogorov-Smirnov test ## ## data: abs(df_germ$dist[df_germ$type == &quot;3a&quot;]) and abs(df_germ$dist[df_germ$type == &quot;bg&quot;]) ## D = 0.10252, p-value = 2.631e-14 ## alternative hypothesis: two-sided p &lt;- df_gastru %&gt;% ggplot(aes(x=abs(dist), color=type)) + stat_ecdf(size=0.5) + scale_color_manual(name = &quot;&quot;, values = c(&quot;bg&quot; = &quot;darkblue&quot;, &quot;3a&quot; = &quot;purple&quot;, &quot;3b&quot; = &quot;orange&quot;)) + xlab(&quot;Distance to gene (bp)&quot;) + scale_x_log10(labels = c(&quot;0&quot;, &quot;1k&quot;, &quot;10k&quot;, &quot;100k&quot;, &quot;1M&quot;), breaks = c(0, 1e3, 1e4, 1e5, 1e6)) + coord_cartesian(xlim = c(100,1e6)) + ylab(&quot;Fraction of regions\\nwith distance &lt; x&quot;) p + theme_bw() ## Warning: Transformation introduced infinite values in continuous x-axis ## Warning: Removed 335 rows containing non-finite values (stat_ecdf). ks.test(abs(df_gastru$dist[df_gastru$type == &quot;3a&quot;]), abs(df_gastru$dist[df_gastru$type == &quot;3b&quot;])) ## Warning in ks.test.default(abs(df_gastru$dist[df_gastru$type == &quot;3a&quot;]), : p- ## value will be approximate in the presence of ties ## ## Asymptotic two-sample Kolmogorov-Smirnov test ## ## data: abs(df_gastru$dist[df_gastru$type == &quot;3a&quot;]) and abs(df_gastru$dist[df_gastru$type == &quot;3b&quot;]) ## D = 0.052125, p-value = 0.001113 ## alternative hypothesis: two-sided ks.test(abs(df_gastru$dist[df_gastru$type == &quot;3b&quot;]), abs(df_gastru$dist[df_gastru$type == &quot;bg&quot;])) ## Warning in ks.test.default(abs(df_gastru$dist[df_gastru$type == &quot;3b&quot;]), : p- ## value will be approximate in the presence of ties ## ## Asymptotic two-sample Kolmogorov-Smirnov test ## ## data: abs(df_gastru$dist[df_gastru$type == &quot;3b&quot;]) and abs(df_gastru$dist[df_gastru$type == &quot;bg&quot;]) ## D = 0.062757, p-value &lt; 2.2e-16 ## alternative hypothesis: two-sided ks.test(abs(df_gastru$dist[df_gastru$type == &quot;3a&quot;]), abs(df_gastru$dist[df_gastru$type == &quot;bg&quot;])) ## Warning in ks.test.default(abs(df_gastru$dist[df_gastru$type == &quot;3a&quot;]), : p- ## value will be approximate in the presence of ties ## ## Asymptotic two-sample Kolmogorov-Smirnov test ## ## data: abs(df_gastru$dist[df_gastru$type == &quot;3a&quot;]) and abs(df_gastru$dist[df_gastru$type == &quot;bg&quot;]) ## D = 0.10252, p-value = 2.631e-14 ## alternative hypothesis: two-sided "],["qc---bulk-methylation.html", "9 QC - bulk methylation 9.1 Probe design 9.2 Breakdown of probes 9.3 WGBS E8.5 9.4 Distribution of coverage per condition 9.5 Distribution of non-CpGs methylation per condition 9.6 âOn targetâ statistics 9.7 Global methylation trend", " 9 QC - bulk methylation 9.0.1 initialize definitions suppressMessages(suppressWarnings(source(here::here(&quot;code/init.R&quot;)))) 9.1 Probe design 9.2 Breakdown of probes Get capture regions: regions &lt;- &quot;intervs.captPBAT_probes.ES_EB_V1&quot; regs_df &lt;- gintervals.load(regions) %&gt;% as_tibble() Get capture probes: probes &lt;- fread(here(&quot;data/probes_V1.csv&quot;)) probes_span &lt;- probes %&gt;% select(chrom, start, end, probe_id=id) %&gt;% gintervals.centers() %&gt;% mutate(start = start - 150, end = end + 150) Get enhancer definitions: enh_intervs &lt;- define_enhancer_intervs() %cache_df% here(&quot;output/enh_intervs.csv&quot;) %&gt;% as_tibble() Get promoter definitions: prom_intervs &lt;- misha.ext::get_promoters(upstream = 1e3, downstream=50) %&gt;% as_tibble() Annotate regions: probes_annot &lt;- probes_span %&gt;% gintervals.neighbors1(prom_intervs) %&gt;% mutate(dist_prom = dist) %&gt;% select(-(chrom1:dist)) %&gt;% gintervals.neighbors1(enh_intervs) %&gt;% mutate(dist_enh = dist) %&gt;% select(-(chrom1:dist)) %&gt;% mutate(type = case_when(dist_prom == 0 ~ &quot;Promoter&quot;, dist_enh == 0 ~ &quot;Enhancer&quot;, TRUE ~ &quot;Background&quot;)) 9.2.1 Extended Data Figure 8B p &lt;- probes_annot %&gt;% count(type) %&gt;% mutate(type = factor(type, levels = c(&quot;Promoter&quot;, &quot;Enhancer&quot;, &quot;Background&quot;))) %&gt;% ggplot(aes(x=type, y=n)) + geom_col() + scale_y_continuous(labels=scales::comma) + xlab(&quot;&quot;) + ylab(&quot;# of probes&quot;) + theme(aspect.ratio=1) + vertical_labs() p 9.3 WGBS E8.5 9.3.1 Coverage wgbs_track &lt;- &quot;e8_5&quot; wgbs_df &lt;- gextract(c(glue(&quot;{wgbs_track}.cov&quot;), glue(&quot;{wgbs_track}.meth&quot;)), intervals=&quot;intervs.global.seq_CG&quot;, iterator = &quot;intervs.global.seq_CG&quot;, colnames = c(&quot;cov&quot;, &quot;meth&quot;)) %&gt;% arrange(intervalID) %&gt;% select(-intervalID) %&gt;% as_tibble() wgbs_df &lt;- wgbs_df %&gt;% mutate(cov = ifelse(is.na(cov), 0, cov), meth = ifelse(is.na(meth), 0, meth)) wgbs_cov_counts &lt;- wgbs_df %&gt;% count(cov) med_cov &lt;- median(wgbs_df$cov) Plot: 9.3.2 Extended Data Figure 8A p &lt;- wgbs_cov_counts %&gt;% filter(cov &gt; 0) %&gt;% mutate(cum = rev(cumsum(rev(n)))) %&gt;% ggplot(aes(x=cov, y=cum)) + geom_line() + scale_x_log10(breaks=c(1,2.5,5,10, med_cov, 50, 100, 1e3), labels = c(1,&#39;&#39;, 5,10,med_cov,&#39;&#39;, 100,1000)) + coord_cartesian(xlim=c(1,1e3)) + scale_y_continuous(labels=scales::scientific) + ylab(&quot;# of CpGs&quot;) + xlab(&quot;E8.5 WGBS CpG coverage&quot;) + geom_vline(xintercept=med_cov, linetype=&quot;dashed&quot;, color=&quot;darkblue&quot;) + theme(aspect.ratio=0.7) p 9.3.3 Methylation distribution on-target vs off-target 9.3.4 Extended Data Figure 8C wgbs_df_annot &lt;- wgbs_df %&gt;% filter(cov &gt;= 20) %&gt;% gintervals.neighbors1(&quot;intervs.captPBAT_probes.ES_EB_V1&quot;) %&gt;% mutate(type = ifelse(is.na(dist) | dist == 0, &quot;Designed&quot;, &quot;Other&quot;)) %&gt;% select(-(chrom1:dist)) p &lt;- wgbs_df_annot %&gt;% mutate(type = factor(type, levels = c(&quot;Other&quot;, &quot;Designed&quot;))) %&gt;% arrange(desc(type)) %&gt;% mutate(avg = meth / cov) %&gt;% ggplot(aes(x=avg, fill=type)) + geom_density(alpha=0.5) + scale_fill_manual(&quot;&quot;, values=c(&quot;Designed&quot; = &quot;red&quot;, &quot;Other&quot; = &quot;gray&quot;)) + theme(aspect.ratio=1) + xlab(&quot;E8.5 Avg. Meth.&quot;) + ylab(&quot;Density&quot;) p 9.4 Distribution of coverage per condition Get CpGs participating in the model generation: The criterion is coverage &gt;= 10 in at least 5 samples. cpg_meth &lt;- calc_eb_cpg_meth(from = 0, to = 6, min_cov = 10, max_na = 5, intervals = gintervals.union(&quot;intervs.captPBAT_probes.ES_EB_V1&quot;, &quot;intervs.captPBAT_probes.ES_EB_V2&quot;), iterator = &quot;intervs.global.seq_CG&quot;, cache_fn = here(&quot;output/eb_day0_to_day6_cpg_meth_all.tsv&quot;), rm_meth_cov = FALSE) cpg_cov &lt;- cpg_meth %&gt;% select(chrom, start, end, ends_with(&quot;cov&quot;)) colnames(cpg_cov) &lt;- gsub(&quot;.cov$&quot;, &quot;&quot;, colnames(cpg_cov)) colnames(cpg_cov) &lt;- gsub(&quot;_tko&quot;, &quot;_TKO&quot;, colnames(cpg_cov)) colnames(cpg_cov) &lt;- gsub(&quot;d0S_&quot;, &quot;S_&quot;, colnames(cpg_cov)) samp_levels &lt;- c(&quot;d0_3a&quot;, &quot;d1_3a&quot;, &quot;d2_3a&quot;, &quot;d3_3a&quot;, &quot;d4_3a&quot;, &quot;d0_3b&quot;, &quot;d1_3b&quot;, &quot;d2_3b&quot;, &quot;d3_3b&quot;, &quot;d4_3b&quot;, &quot;d0_wt&quot;, &quot;d1_wt&quot;, &quot;d2_wt&quot;, &quot;d3_wt&quot;, &quot;d4_wt&quot;, &quot;d0_TKO&quot;, &quot;d1_TKO&quot;, &quot;d2_TKO&quot;, &quot;d3_TKO&quot;, &quot;d4_TKO&quot;, &quot;S_3a&quot;, &quot;S_3b&quot;, &quot;S_wt&quot;, &quot;S_TKO&quot;) mut_levels &lt;- c(&quot;3a&quot;, &quot;3b&quot;, &quot;wt&quot;, &quot;TKO&quot;) samp_levels_all &lt;- c(&quot;d0_3a&quot;, &quot;d1_3a&quot;, &quot;d2_3a&quot;, &quot;d3_3a&quot;, &quot;d4_3a&quot;, &quot;d5_3a&quot;, &quot;d6_3a&quot;, &quot;d0_3b&quot;, &quot;d1_3b&quot;, &quot;d2_3b&quot;, &quot;d3_3b&quot;, &quot;d4_3b&quot;, &quot;d5_3b&quot;, &quot;d6_3b&quot;, &quot;d0_wt&quot;, &quot;d1_wt&quot;, &quot;d2_wt&quot;, &quot;d3_wt&quot;, &quot;d4_wt&quot;, &quot;d5_wt&quot;, &quot;d6_wt&quot;, &quot;d0_TKO&quot;, &quot;d1_TKO&quot;, &quot;d2_TKO&quot;, &quot;d3_TKO&quot;, &quot;d4_TKO&quot;, &quot;S_3a&quot;, &quot;S_3b&quot;, &quot;S_wt&quot;, &quot;S_TKO&quot;)#, &quot;N15_d4_3a&quot;, &quot;N15_d5_3a&quot;, &quot;N15_d4_3b&quot;, &quot;N15_d5_3b&quot;, &quot;N15_d4_wt&quot;, &quot;N15_d5_wt&quot;) mut_levels_all &lt;- c(&quot;3a&quot;, &quot;3b&quot;, &quot;wt&quot;, &quot;TKO&quot;) covs_df &lt;- cpg_cov %&gt;% gather(&quot;samp_id&quot;, &quot;cov&quot;, -(chrom:end)) %&gt;% mutate(samp_id = factor(samp_id, levels = samp_levels_all)) %&gt;% filter(!is.na(samp_id)) %&gt;% separate(samp_id, c(&quot;day&quot;, &quot;mut&quot;), sep=&quot;_&quot;, remove=FALSE) %&gt;% mutate(mut = factor(mut, levels = mut_levels_all)) %cache_df% here(&quot;output/cpg_cov_capt_all.tsv&quot;) covs_df %&gt;% distinct(chrom, start, end) %&gt;% nrow() ## [1] 29243 Plot coverage distribution: 9.4.1 Extended Data Figure 8D options(repr.plot.width = 12, repr.plot.height = 8) p &lt;- covs_df %&gt;% ggplot(aes(x=samp_id, y=cov, fill=mut)) + geom_boxplot(outlier.shape=NA) + vertical_labs() + ggsci::scale_fill_npg(name=&#39;&#39;) + theme(aspect.ratio=0.4) + scale_y_log2(breaks = c(4, 10, 20, 50, 100, 256), limits=c(1,300)) + ylab(&quot;CpG coverage\\n(on target)&quot;) + xlab(&quot;&quot;) p + theme_bw() + vertical_labs() + theme(aspect.ratio=0.4) ## Warning: Transformation introduced infinite values in continuous y-axis ## Warning: Removed 8641 rows containing non-finite values (stat_boxplot). 9.5 Distribution of non-CpGs methylation per condition 9.5.1 Extended Data Figure 8H p &lt;- track_stats %&gt;% filter(samp_id %in% samp_levels_all) %&gt;% mutate(mut = factor(mut, levels = mut_levels_all), samp_id = factor(samp_id, levels=samp_levels_all)) %&gt;% group_by(samp_id, mut) %&gt;% summarise(CHH = mean(CHH, na.rm=TRUE)) %&gt;% ggplot(aes(x=samp_id, y=CHH, fill=mut)) + geom_col() + ggsci::scale_fill_npg(name=&#39;&#39;) + vertical_labs() + xlab(&#39;&#39;) + ylab(&#39;%CHH&#39;) + scale_y_continuous(labels=scales::percent) + theme(aspect.ratio=0.4) p + theme_bw() + vertical_labs() + theme(aspect.ratio=0.4) 9.6 âOn targetâ statistics ontar_stats &lt;- calc_on_target_stats() %cache_df% here(&quot;data/on_target_stats.csv&quot;) %&gt;% as_tibble() df &lt;- ontar_stats %&gt;% left_join(tracks_key %&gt;% select(track = track_name, capture)) %&gt;% mutate(n_offtar = n - n_ontar) %&gt;% pivot_longer(cols=c(&quot;n_ontar&quot;, &quot;n_offtar&quot;), names_to=&quot;type&quot;, values_to=&quot;num&quot;) %&gt;% mutate(type = case_when(type == &quot;n_ontar&quot; ~ &quot;on target&quot;, type == &quot;n_offtar&quot; ~ &quot;off target&quot;)) %&gt;% filter(samp_id %in% samp_levels_all) %&gt;% mutate(mut = factor(mut, levels = mut_levels_all), samp_id = factor(samp_id, levels=samp_levels_all)) %&gt;% group_by(samp_id, mut, day, type) %&gt;% summarise(num = sum(num, na.rm=TRUE) + 1) ## Joining, by = &quot;track&quot; 9.6.1 Extended Data Figure 8E p_0_4 &lt;- df %&gt;% filter(!(day %in% c(&quot;d5&quot;, &quot;d6&quot;))) %&gt;% ggplot(aes(x=samp_id, y=num, fill=type)) + geom_col() + scale_fill_manual(name=&quot;&quot;, values=c(&quot;on target&quot; = &quot;darkblue&quot;, &quot;off target&quot; = &quot;darkgray&quot;)) + vertical_labs() + scale_y_continuous(labels=scales::scientific) + xlab(&#39;&#39;) + ylab(&#39;# of methylation calls&#39;) + theme(aspect.ratio=0.4) p_0_4 + theme_bw() + vertical_labs() + theme(aspect.ratio=0.4) p_5_6 &lt;- df %&gt;% filter(day %in% c(&quot;d5&quot;, &quot;d6&quot;)) %&gt;% ggplot(aes(x=samp_id, y=num, fill=type)) + geom_col() + scale_fill_manual(name=&quot;&quot;, values=c(&quot;on target&quot; = &quot;darkblue&quot;, &quot;off target&quot; = &quot;darkgray&quot;)) + vertical_labs() + scale_y_continuous(labels=scales::scientific) + xlab(&#39;&#39;) + ylab(&#39;# of methylation calls&#39;) p_5_6 + theme_bw() + vertical_labs() + theme(aspect.ratio=0.4) Note that we calculate the âon targetâ based only on mapped reads that had at least one CpG. 9.7 Global methylation trend Global methylation is calculated based on CpGs that are not: promoters putative enhancers part of a capture region (âon targetâ) 9.7.1 Extended Data Figure 8G gmeth &lt;- calc_global_meth() %cache_df% here(&quot;output/global_meth.csv&quot;) %&gt;% mutate(breaks = forcats::fct_recode(breaks, &quot;2%-3%&quot; = &quot;(0.02,0.03]&quot;, &quot;1%-2%&quot; = &quot;[0.01,0.02]&quot;, &quot;8%-15%&quot; = &quot;(0.08,0.15]&quot;, &quot;0%-3%&quot; = &quot;[0,0.03]&quot;)) %&gt;% filter(cg_num &gt;= 1e4) gmeth &lt;- gmeth %&gt;% select(-cg_num) %&gt;% spread(breaks, meth) %&gt;% filter(samp_id %in% samp_levels_all) %&gt;% mutate(mut = factor(mut, levels = mut_levels_all), samp_id = factor(samp_id, levels=samp_levels_all)) p &lt;- gmeth %&gt;% group_by(samp_id, mut) %&gt;% summarise(`0%-3%` = mean(`0%-3%`, na.rm=TRUE)) %&gt;% ggplot(aes(x=samp_id, y=`0%-3%`, fill=mut)) + geom_col() + ggsci::scale_fill_npg(name=&#39;&#39;) + vertical_labs() + xlab(&#39;&#39;) + ylab(&#39;Avg. meth in low CpG content&#39;) + theme(aspect.ratio=0.4) p Avg. meth in high CpG content: p &lt;- gmeth %&gt;% group_by(samp_id, mut) %&gt;% summarise(`8%-15%` = mean(`8%-15%`, na.rm=TRUE)) %&gt;% ggplot(aes(x=samp_id, y=`8%-15%`, fill=mut)) + geom_col() + ggsci::scale_fill_npg(name=&#39;&#39;) + vertical_labs() + xlab(&#39;&#39;) + ylab(&#39;Avg. meth in high CpG content&#39;) + theme(aspect.ratio=0.4) p "],["qc---sc-methylation.html", "10 QC - sc methylation 10.1 Distribution of %CHH 10.2 Number of cells 10.3 Number of CpGs 10.4 Sorting plots 10.5 Early/Late coverage per cell (e7.5)", " 10 QC - sc methylation 10.0.1 initialize definitions suppressMessages(suppressWarnings(source(here::here(&quot;code/init.R&quot;)))) suppressMessages(suppressWarnings(load_cgdb())) db ## cgdb object ## 21,342,746 CpGs X 24,179 cells ## --- root (@db_root): /net/mraid14/export/tgdata/users/aviezerl/proj/ebdnmt/Dnmt3ab_EB/methylation/data/cgdb samp_levels &lt;- c(&quot;d5_3a&quot;, &quot;d5_3b&quot;, &quot;d5_wt&quot;, &quot;e7.5_ecto&quot;, &quot;e7.5_meso&quot;, &quot;e7.5_endo&quot;) sc_stats &lt;- db_f@cells %&gt;% filter(day %in% c(&quot;d5&quot;, &quot;e7.5&quot;)) invivo_sort &lt;- fread(here(&quot;data/cells_germ_layer_invivo.tsv&quot;)) %&gt;% as_tibble() sc_stats &lt;- sc_stats %&gt;% left_join(invivo_sort) %&gt;% replace_na(replace = list(germ_layer = &quot;other&quot;)) %&gt;% mutate(sort = ifelse(day == &quot;e7.5&quot;, germ_layer, sort)) ## Joining, by = &quot;cell_id&quot; Note that for cell cycle we use specific experiments with similar cell cycle profile sc_stats %&gt;% count(day, line, sort) ## # A tibble: 15 x 4 ## day line sort n ## 1 d5 ko3a CXCR4-EPCAM+ 372 ## 2 d5 ko3a CXCR4+EPCAM+ 372 ## 3 d5 ko3a index 1851 ## 4 d5 ko3b CXCR4-EPCAM+ 372 ## 5 d5 ko3b CXCR4+EPCAM+ 372 ## 6 d5 ko3b index 1837 ## # ... with 9 more rows 10.1 Distribution of %CHH 10.1.1 Extended Data Figure 9B p &lt;- sc_stats %&gt;% ggplot(aes(x=CHH)) + geom_density() + scale_x_continuous(labels=scales::percent) + vertical_labs() + xlab(&quot;% CHH&quot;) + ylab(&quot;Density&quot;) p 10.2 Number of cells 10.2.1 Extended Data Figure 9A sc_stats %&gt;% filter(cg_num &gt;= 2e4) %&gt;% organize_sc_samp_id() %&gt;% count(samp_id, day, line) ## # A tibble: 4 x 4 ## samp_id day line n ## 1 d5_3a d5 ko3a 2217 ## 2 d5_3b d5 ko3b 2197 ## 3 d5_wt d5 wt 2984 ## 4 e7.5 e7.5 mouse 2146 sc_stats %&gt;% filter(cg_num &gt;= 2e4) %&gt;% organize_sc_samp_id() %&gt;% count(day) ## # A tibble: 2 x 2 ## day n ## 1 d5 7398 ## 2 e7.5 2146 p &lt;- sc_stats %&gt;% filter(cg_num &gt;= 2e4) %&gt;% organize_sc_samp_id() %&gt;% count(samp_id, day, line) %&gt;% mutate(samp_id = factor(samp_id, levels=samp_levels)) %&gt;% ggplot(aes(x=samp_id, y=n)) + geom_col() + vertical_labs() + ylab(&quot;# of cells with more than 20k CpGs&quot;) + xlab(&quot;&quot;) p 10.3 Number of CpGs 10.3.1 Extended Data Figure 9C p &lt;- sc_stats %&gt;% filter(cg_num &gt;= 2e4) %&gt;% organize_sc_samp_id() %&gt;% mutate(samp_id = factor(samp_id, levels=samp_levels)) %&gt;% ggplot(aes(x=samp_id, y=cg_num)) + geom_boxplot(fill=&quot;gray&quot;, outlier.shape = NA) + scale_y_log10(labels=scales::scientific) + ggforce::geom_sina(size=0.001, alpha=0.01) + vertical_labs() + ylab(&quot;# of CpGs&quot;) + xlab(&quot;&quot;) p 10.4 Sorting plots facs_df &lt;- sc_stats %&gt;% filter(!is.na(APC_A), !is.na(BV421_A)) %&gt;% group_by(sort_date) %&gt;% mutate(EPCAM = log2(abs(min(APC_A, na.rm=TRUE)) + 10 + APC_A), CXCR4 = log2(abs(min(BV421_A, na.rm=TRUE)) + 10 + BV421_A)) %&gt;% replace_na(replace = list(gate = &quot;no_gate&quot;)) %&gt;% ungroup() %&gt;% filter(cpg_num &gt;= 2e4) facs_df_e7.5 &lt;- facs_df %&gt;% filter(day == &quot;e7.5&quot;) facs_df_d5 &lt;- facs_df %&gt;% filter(day == &quot;d5&quot;) 10.4.1 Extended Data Figure 9D options(repr.plot.width = 7, repr.plot.height = 7) p_7.5 &lt;- facs_df_e7.5 %&gt;% ggplot(aes(x=EPCAM, y=CXCR4, color=germ_layer)) + geom_point(size=0.2) + scale_color_manual(values=germ_layer_colors) + theme(aspect.ratio=1) p_7.5 10.4.2 Extended Data Figure 9E options(repr.plot.width = 7, repr.plot.height = 7) p_meth_7.5 &lt;- facs_df_e7.5 %&gt;% ggplot(aes(x=low_cgc_m, y=CXCR4, color=germ_layer)) + geom_point(size=0.2) + scale_color_manual(values=germ_layer_colors) + theme(aspect.ratio=1) p_meth_7.5 10.5 Early/Late coverage per cell (e7.5) df_ord_invivo &lt;- fread(here(&quot;output/cell_cycle/segmented.tsv&quot;)) %&gt;% filter(day == &quot;e7.5&quot;) %&gt;% mutate(germ_layer = factor(line, levels=c(&quot;ecto&quot;, &quot;meso&quot;, &quot;endo&quot;))) 10.5.1 Extended Data Figure 9F p &lt;- df_ord_invivo %&gt;% ggplot(aes(x=early, y=late, color=ord2)) + geom_abline(linetype=&quot;dashed&quot;, color=&quot;gray&quot;) + geom_point(size=0.1) + scale_color_gradientn(name = &quot;CC&quot;, colors=c(&quot;white&quot;, &quot;blue&quot;, &quot;red&quot;, &quot;yellow&quot;)) + theme(aspect.ratio=1) + scale_x_log10(labels=scales::scientific) + scale_y_log10(labels=scales::scientific) + vertical_labs() + xlab(&quot;Coverage in early regions&quot;) + ylab(&quot;Coverage in late regions&quot;) + ggtitle(&quot;e7.5&quot;) p "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
